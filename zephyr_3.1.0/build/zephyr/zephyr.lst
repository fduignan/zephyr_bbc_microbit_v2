
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20 0a 00 20 b1 1d 00 00 83 63 00 00 85 1d 00 00      .. .....c......
  10:	85 1d 00 00 85 1d 00 00 85 1d 00 00 00 00 00 00     ................
	...
  2c:	e9 1a 00 00 85 1d 00 00 00 00 00 00 a1 1a 00 00     ................
  3c:	85 1d 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  50:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  60:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  70:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  80:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  90:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  a0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  b0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  c0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  d0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  e0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...
  f0:	65 1b 00 00 65 1b 00 00 65 1b 00 00 65 1b 00 00     e...e...e...e...

Disassembly of section text:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     11e:	f000 b857 	b.w	1d0 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <__data_size+0x4>
     132:	f000 f84f 	bl	1d4 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     14c:	f000 f842 	bl	1d4 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f831 	bl	1d4 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f823 	bl	1d4 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b80c 	b.w	1d0 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f808 	bl	1d4 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__aeabi_idiv0>:
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop

000001d4 <__udivmoddi4>:
     1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	4607      	mov	r7, r0
     1da:	468c      	mov	ip, r1
     1dc:	4608      	mov	r0, r1
     1de:	9e09      	ldr	r6, [sp, #36]	; 0x24
     1e0:	4615      	mov	r5, r2
     1e2:	463c      	mov	r4, r7
     1e4:	4619      	mov	r1, r3
     1e6:	2b00      	cmp	r3, #0
     1e8:	f040 80c6 	bne.w	378 <CONFIG_FLASH_SIZE+0x178>
     1ec:	4282      	cmp	r2, r0
     1ee:	fab2 f782 	clz	r7, r2
     1f2:	d946      	bls.n	282 <CONFIG_FLASH_SIZE+0x82>
     1f4:	b14f      	cbz	r7, 20a <CONFIG_FLASH_SIZE+0xa>
     1f6:	f1c7 0e20 	rsb	lr, r7, #32
     1fa:	fa24 fe0e 	lsr.w	lr, r4, lr
     1fe:	fa00 f307 	lsl.w	r3, r0, r7
     202:	40bd      	lsls	r5, r7
     204:	ea4e 0c03 	orr.w	ip, lr, r3
     208:	40bc      	lsls	r4, r7
     20a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     20e:	fa1f fe85 	uxth.w	lr, r5
     212:	fbbc f9f8 	udiv	r9, ip, r8
     216:	0c22      	lsrs	r2, r4, #16
     218:	fb08 c319 	mls	r3, r8, r9, ip
     21c:	fb09 fa0e 	mul.w	sl, r9, lr
     220:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     224:	459a      	cmp	sl, r3
     226:	d928      	bls.n	27a <CONFIG_FLASH_SIZE+0x7a>
     228:	18eb      	adds	r3, r5, r3
     22a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     22e:	d204      	bcs.n	23a <CONFIG_FLASH_SIZE+0x3a>
     230:	459a      	cmp	sl, r3
     232:	d902      	bls.n	23a <CONFIG_FLASH_SIZE+0x3a>
     234:	f1a9 0002 	sub.w	r0, r9, #2
     238:	442b      	add	r3, r5
     23a:	eba3 030a 	sub.w	r3, r3, sl
     23e:	b2a4      	uxth	r4, r4
     240:	fbb3 f2f8 	udiv	r2, r3, r8
     244:	fb08 3312 	mls	r3, r8, r2, r3
     248:	fb02 fe0e 	mul.w	lr, r2, lr
     24c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     250:	45a6      	cmp	lr, r4
     252:	d914      	bls.n	27e <CONFIG_FLASH_SIZE+0x7e>
     254:	192c      	adds	r4, r5, r4
     256:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     25a:	d203      	bcs.n	264 <CONFIG_FLASH_SIZE+0x64>
     25c:	45a6      	cmp	lr, r4
     25e:	d901      	bls.n	264 <CONFIG_FLASH_SIZE+0x64>
     260:	1e93      	subs	r3, r2, #2
     262:	442c      	add	r4, r5
     264:	eba4 040e 	sub.w	r4, r4, lr
     268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     26c:	b11e      	cbz	r6, 276 <CONFIG_FLASH_SIZE+0x76>
     26e:	40fc      	lsrs	r4, r7
     270:	2300      	movs	r3, #0
     272:	6034      	str	r4, [r6, #0]
     274:	6073      	str	r3, [r6, #4]
     276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     27a:	4648      	mov	r0, r9
     27c:	e7dd      	b.n	23a <CONFIG_FLASH_SIZE+0x3a>
     27e:	4613      	mov	r3, r2
     280:	e7f0      	b.n	264 <CONFIG_FLASH_SIZE+0x64>
     282:	b902      	cbnz	r2, 286 <CONFIG_FLASH_SIZE+0x86>
     284:	deff      	udf	#255	; 0xff
     286:	bb87      	cbnz	r7, 2ea <CONFIG_FLASH_SIZE+0xea>
     288:	1a83      	subs	r3, r0, r2
     28a:	2101      	movs	r1, #1
     28c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     290:	b2aa      	uxth	r2, r5
     292:	fbb3 fcfe 	udiv	ip, r3, lr
     296:	0c20      	lsrs	r0, r4, #16
     298:	fb0e 331c 	mls	r3, lr, ip, r3
     29c:	fb0c f802 	mul.w	r8, ip, r2
     2a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     2a4:	4598      	cmp	r8, r3
     2a6:	d963      	bls.n	370 <CONFIG_FLASH_SIZE+0x170>
     2a8:	18eb      	adds	r3, r5, r3
     2aa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2ae:	d204      	bcs.n	2ba <CONFIG_FLASH_SIZE+0xba>
     2b0:	4598      	cmp	r8, r3
     2b2:	d902      	bls.n	2ba <CONFIG_FLASH_SIZE+0xba>
     2b4:	f1ac 0002 	sub.w	r0, ip, #2
     2b8:	442b      	add	r3, r5
     2ba:	eba3 0308 	sub.w	r3, r3, r8
     2be:	b2a4      	uxth	r4, r4
     2c0:	fbb3 fcfe 	udiv	ip, r3, lr
     2c4:	fb0e 331c 	mls	r3, lr, ip, r3
     2c8:	fb0c f202 	mul.w	r2, ip, r2
     2cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2d0:	42a2      	cmp	r2, r4
     2d2:	d94f      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     2d4:	192c      	adds	r4, r5, r4
     2d6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     2da:	d204      	bcs.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2dc:	42a2      	cmp	r2, r4
     2de:	d902      	bls.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2e0:	f1ac 0302 	sub.w	r3, ip, #2
     2e4:	442c      	add	r4, r5
     2e6:	1aa4      	subs	r4, r4, r2
     2e8:	e7be      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
     2ea:	f1c7 0c20 	rsb	ip, r7, #32
     2ee:	fa20 f80c 	lsr.w	r8, r0, ip
     2f2:	fa00 f307 	lsl.w	r3, r0, r7
     2f6:	fa24 fc0c 	lsr.w	ip, r4, ip
     2fa:	40bd      	lsls	r5, r7
     2fc:	ea4c 0203 	orr.w	r2, ip, r3
     300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     304:	b2ab      	uxth	r3, r5
     306:	fbb8 fcfe 	udiv	ip, r8, lr
     30a:	0c11      	lsrs	r1, r2, #16
     30c:	fb0e 801c 	mls	r0, lr, ip, r8
     310:	fb0c f903 	mul.w	r9, ip, r3
     314:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     318:	4581      	cmp	r9, r0
     31a:	fa04 f407 	lsl.w	r4, r4, r7
     31e:	d923      	bls.n	368 <CONFIG_FLASH_SIZE+0x168>
     320:	1828      	adds	r0, r5, r0
     322:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     326:	d204      	bcs.n	332 <CONFIG_FLASH_SIZE+0x132>
     328:	4581      	cmp	r9, r0
     32a:	d902      	bls.n	332 <CONFIG_FLASH_SIZE+0x132>
     32c:	f1ac 0102 	sub.w	r1, ip, #2
     330:	4428      	add	r0, r5
     332:	eba0 0009 	sub.w	r0, r0, r9
     336:	b292      	uxth	r2, r2
     338:	fbb0 fcfe 	udiv	ip, r0, lr
     33c:	fb0e 001c 	mls	r0, lr, ip, r0
     340:	fb0c f803 	mul.w	r8, ip, r3
     344:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     348:	4598      	cmp	r8, r3
     34a:	d90f      	bls.n	36c <CONFIG_FLASH_SIZE+0x16c>
     34c:	18eb      	adds	r3, r5, r3
     34e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     352:	d204      	bcs.n	35e <CONFIG_FLASH_SIZE+0x15e>
     354:	4598      	cmp	r8, r3
     356:	d902      	bls.n	35e <CONFIG_FLASH_SIZE+0x15e>
     358:	f1ac 0202 	sub.w	r2, ip, #2
     35c:	442b      	add	r3, r5
     35e:	eba3 0308 	sub.w	r3, r3, r8
     362:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     366:	e791      	b.n	28c <CONFIG_FLASH_SIZE+0x8c>
     368:	4661      	mov	r1, ip
     36a:	e7e2      	b.n	332 <CONFIG_FLASH_SIZE+0x132>
     36c:	4662      	mov	r2, ip
     36e:	e7f6      	b.n	35e <CONFIG_FLASH_SIZE+0x15e>
     370:	4660      	mov	r0, ip
     372:	e7a2      	b.n	2ba <CONFIG_FLASH_SIZE+0xba>
     374:	4663      	mov	r3, ip
     376:	e7b6      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     378:	4283      	cmp	r3, r0
     37a:	d905      	bls.n	388 <CONFIG_FLASH_SIZE+0x188>
     37c:	b10e      	cbz	r6, 382 <CONFIG_FLASH_SIZE+0x182>
     37e:	e9c6 7000 	strd	r7, r0, [r6]
     382:	2100      	movs	r1, #0
     384:	4608      	mov	r0, r1
     386:	e776      	b.n	276 <CONFIG_FLASH_SIZE+0x76>
     388:	fab3 f183 	clz	r1, r3
     38c:	b981      	cbnz	r1, 3b0 <CONFIG_FLASH_SIZE+0x1b0>
     38e:	4283      	cmp	r3, r0
     390:	d301      	bcc.n	396 <CONFIG_FLASH_SIZE+0x196>
     392:	42ba      	cmp	r2, r7
     394:	d80a      	bhi.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     396:	1abc      	subs	r4, r7, r2
     398:	eb60 0303 	sbc.w	r3, r0, r3
     39c:	2001      	movs	r0, #1
     39e:	469c      	mov	ip, r3
     3a0:	2e00      	cmp	r6, #0
     3a2:	d068      	beq.n	476 <CONFIG_MAIN_STACK_SIZE+0x76>
     3a4:	e9c6 4c00 	strd	r4, ip, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e764      	b.n	276 <CONFIG_FLASH_SIZE+0x76>
     3ac:	4608      	mov	r0, r1
     3ae:	e7f7      	b.n	3a0 <CONFIG_FLASH_SIZE+0x1a0>
     3b0:	f1c1 0c20 	rsb	ip, r1, #32
     3b4:	408b      	lsls	r3, r1
     3b6:	fa22 f40c 	lsr.w	r4, r2, ip
     3ba:	431c      	orrs	r4, r3
     3bc:	fa02 f501 	lsl.w	r5, r2, r1
     3c0:	fa00 f301 	lsl.w	r3, r0, r1
     3c4:	fa27 f20c 	lsr.w	r2, r7, ip
     3c8:	fa20 fb0c 	lsr.w	fp, r0, ip
     3cc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     3d0:	4313      	orrs	r3, r2
     3d2:	fbbb f8f9 	udiv	r8, fp, r9
     3d6:	fa1f fe84 	uxth.w	lr, r4
     3da:	fb09 bb18 	mls	fp, r9, r8, fp
     3de:	0c1a      	lsrs	r2, r3, #16
     3e0:	fb08 fa0e 	mul.w	sl, r8, lr
     3e4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     3e8:	4592      	cmp	sl, r2
     3ea:	fa07 f701 	lsl.w	r7, r7, r1
     3ee:	d93e      	bls.n	46e <CONFIG_MAIN_STACK_SIZE+0x6e>
     3f0:	18a2      	adds	r2, r4, r2
     3f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3f6:	d204      	bcs.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     3f8:	4592      	cmp	sl, r2
     3fa:	d902      	bls.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     3fc:	f1a8 0002 	sub.w	r0, r8, #2
     400:	4422      	add	r2, r4
     402:	eba2 020a 	sub.w	r2, r2, sl
     406:	b29b      	uxth	r3, r3
     408:	fbb2 f8f9 	udiv	r8, r2, r9
     40c:	fb09 2218 	mls	r2, r9, r8, r2
     410:	fb08 fe0e 	mul.w	lr, r8, lr
     414:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     418:	4596      	cmp	lr, r2
     41a:	d92a      	bls.n	472 <CONFIG_MAIN_STACK_SIZE+0x72>
     41c:	18a2      	adds	r2, r4, r2
     41e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     422:	d204      	bcs.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     424:	4596      	cmp	lr, r2
     426:	d902      	bls.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     428:	f1a8 0302 	sub.w	r3, r8, #2
     42c:	4422      	add	r2, r4
     42e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     432:	fba0 9305 	umull	r9, r3, r0, r5
     436:	eba2 020e 	sub.w	r2, r2, lr
     43a:	429a      	cmp	r2, r3
     43c:	46ce      	mov	lr, r9
     43e:	4698      	mov	r8, r3
     440:	d302      	bcc.n	448 <CONFIG_MAIN_STACK_SIZE+0x48>
     442:	d106      	bne.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     444:	454f      	cmp	r7, r9
     446:	d204      	bcs.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     448:	ebb9 0e05 	subs.w	lr, r9, r5
     44c:	eb63 0804 	sbc.w	r8, r3, r4
     450:	3801      	subs	r0, #1
     452:	b186      	cbz	r6, 476 <CONFIG_MAIN_STACK_SIZE+0x76>
     454:	ebb7 030e 	subs.w	r3, r7, lr
     458:	eb62 0708 	sbc.w	r7, r2, r8
     45c:	fa07 fc0c 	lsl.w	ip, r7, ip
     460:	40cb      	lsrs	r3, r1
     462:	ea4c 0303 	orr.w	r3, ip, r3
     466:	40cf      	lsrs	r7, r1
     468:	e9c6 3700 	strd	r3, r7, [r6]
     46c:	e79c      	b.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     46e:	4640      	mov	r0, r8
     470:	e7c7      	b.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     472:	4643      	mov	r3, r8
     474:	e7db      	b.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     476:	4631      	mov	r1, r6
     478:	e6fd      	b.n	276 <CONFIG_FLASH_SIZE+0x76>
     47a:	0000      	movs	r0, r0
     47c:	0000      	movs	r0, r0
	...

00000480 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
     480:	2903      	cmp	r1, #3
{
     482:	b573      	push	{r0, r1, r4, r5, r6, lr}
     484:	4614      	mov	r4, r2
     486:	4605      	mov	r5, r0
     488:	461a      	mov	r2, r3
	switch (chan) {
     48a:	d85d      	bhi.n	548 <lis2dh_attr_set+0xc8>
	switch (attr) {
     48c:	2c00      	cmp	r4, #0
     48e:	d03c      	beq.n	50a <lis2dh_attr_set+0x8a>
     490:	2c07      	cmp	r4, #7
     492:	d159      	bne.n	548 <lis2dh_attr_set+0xc8>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
     494:	685b      	ldr	r3, [r3, #4]
     496:	6810      	ldr	r0, [r2, #0]
     498:	4a37      	ldr	r2, [pc, #220]	; (578 <lis2dh_attr_set+0xf8>)
     49a:	17d9      	asrs	r1, r3, #31
     49c:	fbc0 3102 	smlal	r3, r1, r0, r2

	if (micro_ms2 > 0) {
     4a0:	2b01      	cmp	r3, #1
     4a2:	f171 0200 	sbcs.w	r2, r1, #0
     4a6:	db22      	blt.n	4ee <lis2dh_attr_set+0x6e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
     4a8:	4834      	ldr	r0, [pc, #208]	; (57c <lis2dh_attr_set+0xfc>)
     4aa:	1818      	adds	r0, r3, r0
     4ac:	a330      	add	r3, pc, #192	; (adr r3, 570 <lis2dh_attr_set+0xf0>)
     4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
     4b2:	f141 0100 	adc.w	r1, r1, #0
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
     4b6:	f7ff fe23 	bl	100 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     4ba:	b280      	uxth	r0, r0
     4bc:	2802      	cmp	r0, #2
     4be:	d01e      	beq.n	4fe <lis2dh_attr_set+0x7e>
     4c0:	2804      	cmp	r0, #4
     4c2:	d01e      	beq.n	502 <lis2dh_attr_set+0x82>
     4c4:	2808      	cmp	r0, #8
     4c6:	d01e      	beq.n	506 <lis2dh_attr_set+0x86>
     4c8:	2810      	cmp	r0, #16
     4ca:	d133      	bne.n	534 <lis2dh_attr_set+0xb4>
     4cc:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     4ce:	492c      	ldr	r1, [pc, #176]	; (580 <lis2dh_attr_set+0x100>)
	struct lis2dh_data *lis2dh = dev->data;
     4d0:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     4d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
     4d6:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     4d8:	6852      	ldr	r2, [r2, #4]
     4da:	6914      	ldr	r4, [r2, #16]
     4dc:	011b      	lsls	r3, r3, #4
     4de:	2230      	movs	r2, #48	; 0x30
     4e0:	2123      	movs	r1, #35	; 0x23
     4e2:	4628      	mov	r0, r5
     4e4:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
     4e6:	b002      	add	sp, #8
     4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     4ec:	4760      	bx	ip
     4ee:	4825      	ldr	r0, [pc, #148]	; (584 <lis2dh_attr_set+0x104>)
     4f0:	1818      	adds	r0, r3, r0
     4f2:	f161 0100 	sbc.w	r1, r1, #0
     4f6:	a31e      	add	r3, pc, #120	; (adr r3, 570 <lis2dh_attr_set+0xf0>)
     4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
     4fc:	e7db      	b.n	4b6 <lis2dh_attr_set+0x36>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
     4fe:	2300      	movs	r3, #0
     500:	e7e5      	b.n	4ce <lis2dh_attr_set+0x4e>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     502:	2301      	movs	r3, #1
     504:	e7e3      	b.n	4ce <lis2dh_attr_set+0x4e>
     506:	2302      	movs	r3, #2
     508:	e7e1      	b.n	4ce <lis2dh_attr_set+0x4e>
		return lis2dh_acc_odr_set(dev, val->val1);
     50a:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
     50c:	4b1e      	ldr	r3, [pc, #120]	; (588 <lis2dh_attr_set+0x108>)
		if (freq == lis2dh_odr_map[i]) {
     50e:	f833 1b02 	ldrh.w	r1, [r3], #2
     512:	428a      	cmp	r2, r1
     514:	d10b      	bne.n	52e <lis2dh_attr_set+0xae>
	struct lis2dh_data *data = dev->data;
     516:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
     518:	6873      	ldr	r3, [r6, #4]
     51a:	f10d 0207 	add.w	r2, sp, #7
     51e:	689b      	ldr	r3, [r3, #8]
     520:	2120      	movs	r1, #32
     522:	4628      	mov	r0, r5
     524:	4798      	blx	r3
	if (status < 0) {
     526:	2800      	cmp	r0, #0
     528:	da07      	bge.n	53a <lis2dh_attr_set+0xba>
}
     52a:	b002      	add	sp, #8
     52c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
     52e:	3401      	adds	r4, #1
     530:	2c0b      	cmp	r4, #11
     532:	d1ec      	bne.n	50e <lis2dh_attr_set+0x8e>
	return -EINVAL;
     534:	f06f 0015 	mvn.w	r0, #21
     538:	e7f7      	b.n	52a <lis2dh_attr_set+0xaa>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     53a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     53e:	0711      	lsls	r1, r2, #28
			return i;
     540:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     542:	d404      	bmi.n	54e <lis2dh_attr_set+0xce>
     544:	2c08      	cmp	r4, #8
     546:	d105      	bne.n	554 <lis2dh_attr_set+0xd4>
	switch (attr) {
     548:	f06f 0085 	mvn.w	r0, #133	; 0x85
     54c:	e7ed      	b.n	52a <lis2dh_attr_set+0xaa>
		odr--;
     54e:	2c0a      	cmp	r4, #10
     550:	bf08      	it	eq
     552:	2309      	moveq	r3, #9
				      (value & ~LIS2DH_ODR_MASK) |
     554:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
     558:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     55c:	6873      	ldr	r3, [r6, #4]
     55e:	b2d2      	uxtb	r2, r2
     560:	68db      	ldr	r3, [r3, #12]
     562:	2120      	movs	r1, #32
     564:	4628      	mov	r0, r5
     566:	4798      	blx	r3
     568:	e7df      	b.n	52a <lis2dh_attr_set+0xaa>
     56a:	bf00      	nop
     56c:	f3af 8000 	nop.w
     570:	0095a33a 	.word	0x0095a33a
     574:	00000000 	.word	0x00000000
     578:	000f4240 	.word	0x000f4240
     57c:	004ad19d 	.word	0x004ad19d
     580:	2000006c 	.word	0x2000006c
     584:	ffb52e63 	.word	0xffb52e63
     588:	00007b50 	.word	0x00007b50

0000058c <main>:
uint32_t random(uint32_t lower,uint32_t upper)
{
    return (prbs()%(upper-lower))+lower;
}
void main(void)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	b0c2      	sub	sp, #264	; 0x108
	int ret;
	
	ret = display_begin();
     590:	f000 f92e 	bl	7f0 <display_begin>
	if (ret < 0)
     594:	1e01      	subs	r1, r0, #0
     596:	da03      	bge.n	5a0 <main+0x14>
	{
		printf("\nError initializing display.  Error code = %d\n",ret);
     598:	4837      	ldr	r0, [pc, #220]	; (678 <main+0xec>)
     59a:	f001 fc63 	bl	1e64 <printf>
		while(1);
     59e:	e7fe      	b.n	59e <main+0x12>
	}
	ret = bmp280_begin();
     5a0:	f000 fbc6 	bl	d30 <bmp280_begin>
	if (ret < 0)
     5a4:	1e01      	subs	r1, r0, #0
     5a6:	da03      	bge.n	5b0 <main+0x24>
	{
		printf("\nError initializing i2c interface.  Error code = %d\n",ret);	
     5a8:	4834      	ldr	r0, [pc, #208]	; (67c <main+0xf0>)
     5aa:	f001 fc5b 	bl	1e64 <printf>
		while(1);
     5ae:	e7fe      	b.n	5ae <main+0x22>
	}
	display_fillRectangle(0,0,SCREEN_WIDTH, SCREEN_HEIGHT,display_RGBToWord(0xff,0xff,0));
     5b0:	21ff      	movs	r1, #255	; 0xff
     5b2:	2200      	movs	r2, #0
     5b4:	4608      	mov	r0, r1
     5b6:	f005 fc25 	bl	5e04 <display_RGBToWord>
     5ba:	2100      	movs	r1, #0
     5bc:	2387      	movs	r3, #135	; 0x87
     5be:	9000      	str	r0, [sp, #0]
     5c0:	22f0      	movs	r2, #240	; 0xf0
     5c2:	4608      	mov	r0, r1
     5c4:	f000 f8d0 	bl	768 <display_fillRectangle>
	display_fillRectangle(10,10,SCREEN_WIDTH-20, (SCREEN_HEIGHT/2)-20,display_RGBToWord(0xaf,0xaf,0xff));
     5c8:	21af      	movs	r1, #175	; 0xaf
     5ca:	22ff      	movs	r2, #255	; 0xff
     5cc:	4608      	mov	r0, r1
     5ce:	f005 fc19 	bl	5e04 <display_RGBToWord>
     5d2:	210a      	movs	r1, #10
     5d4:	232f      	movs	r3, #47	; 0x2f
     5d6:	9000      	str	r0, [sp, #0]
     5d8:	22dc      	movs	r2, #220	; 0xdc
     5da:	4608      	mov	r0, r1
     5dc:	f000 f8c4 	bl	768 <display_fillRectangle>
	display_fillRectangle(10,(SCREEN_HEIGHT/2)+10,SCREEN_WIDTH-20, (SCREEN_HEIGHT/2)-20,display_RGBToWord(0xff,0xaf,0xaf));
     5e0:	22af      	movs	r2, #175	; 0xaf
     5e2:	4611      	mov	r1, r2
     5e4:	20ff      	movs	r0, #255	; 0xff
     5e6:	f005 fc0d 	bl	5e04 <display_RGBToWord>
     5ea:	232f      	movs	r3, #47	; 0x2f
     5ec:	9000      	str	r0, [sp, #0]
     5ee:	22dc      	movs	r2, #220	; 0xdc
     5f0:	214d      	movs	r1, #77	; 0x4d
     5f2:	200a      	movs	r0, #10
     5f4:	f000 f8b8 	bl	768 <display_fillRectangle>
	while(1)
	{    
        char display_string[256];
		sprintf(display_string,"Temp (x100)=%d",bmp280_readTemperature());
     5f8:	4e21      	ldr	r6, [pc, #132]	; (680 <main+0xf4>)
     5fa:	f000 fa3b 	bl	a74 <bmp280_readTemperature>
     5fe:	4631      	mov	r1, r6
     600:	4602      	mov	r2, r0
     602:	a802      	add	r0, sp, #8
     604:	f001 fc14 	bl	1e30 <sprintf>
		display_print(display_string,strlen(display_string),20,30,0,display_RGBToWord(0xaf,0xaf,0xff));
     608:	a802      	add	r0, sp, #8
     60a:	f005 fec1 	bl	6390 <strlen>
     60e:	21af      	movs	r1, #175	; 0xaf
     610:	4604      	mov	r4, r0
     612:	22ff      	movs	r2, #255	; 0xff
     614:	4608      	mov	r0, r1
     616:	f005 fbf5 	bl	5e04 <display_RGBToWord>
     61a:	2500      	movs	r5, #0
     61c:	231e      	movs	r3, #30
     61e:	b2a1      	uxth	r1, r4
     620:	9001      	str	r0, [sp, #4]
     622:	2214      	movs	r2, #20
     624:	a802      	add	r0, sp, #8
     626:	9500      	str	r5, [sp, #0]
     628:	f000 f9ae 	bl	988 <display_print>
		sprintf(display_string,"Pressure (x100) = %d",bmp280_readPressure());
     62c:	f000 fa72 	bl	b14 <bmp280_readPressure>
     630:	4914      	ldr	r1, [pc, #80]	; (684 <main+0xf8>)
     632:	4602      	mov	r2, r0
     634:	a802      	add	r0, sp, #8
     636:	f001 fbfb 	bl	1e30 <sprintf>
		display_print(display_string,strlen(display_string),20,(SCREEN_HEIGHT/2)+30,0,display_RGBToWord(0xff,0xaf,0xaf));
     63a:	a802      	add	r0, sp, #8
     63c:	f005 fea8 	bl	6390 <strlen>
     640:	22af      	movs	r2, #175	; 0xaf
     642:	4604      	mov	r4, r0
     644:	4611      	mov	r1, r2
     646:	20ff      	movs	r0, #255	; 0xff
     648:	f005 fbdc 	bl	5e04 <display_RGBToWord>
     64c:	2361      	movs	r3, #97	; 0x61
     64e:	2214      	movs	r2, #20
     650:	b2a1      	uxth	r1, r4
     652:	e9cd 5000 	strd	r5, r0, [sp]
     656:	a802      	add	r0, sp, #8
     658:	f000 f996 	bl	988 <display_print>
        printf("Temp (x100) = %d\n",bmp280_readTemperature());
     65c:	f000 fa0a 	bl	a74 <bmp280_readTemperature>
     660:	4601      	mov	r1, r0
     662:	4809      	ldr	r0, [pc, #36]	; (688 <main+0xfc>)
     664:	f001 fbfe 	bl	1e64 <printf>
		printf("Pressure(x 100) = %d\n",bmp280_readPressure());
     668:	f000 fa54 	bl	b14 <bmp280_readPressure>
     66c:	4601      	mov	r1, r0
     66e:	4807      	ldr	r0, [pc, #28]	; (68c <main+0x100>)
     670:	f001 fbf8 	bl	1e64 <printf>
	while(1)
     674:	e7c1      	b.n	5fa <main+0x6e>
     676:	bf00      	nop
     678:	00007b66 	.word	0x00007b66
     67c:	00007b95 	.word	0x00007b95
     680:	00007bca 	.word	0x00007bca
     684:	00007bd9 	.word	0x00007bd9
     688:	00007bee 	.word	0x00007bee
     68c:	00007c00 	.word	0x00007c00

00000690 <spi_write.constprop.0.isra.0>:
 * @param tx_bufs Buffer array where data to be sent originates from.
 *
 * @retval 0 If successful.
 * @retval -errno Negative errno code on failure.
 */
static inline int spi_write(const struct device *dev,
     690:	b410      	push	{r4}
     692:	460a      	mov	r2, r1
	return api->transceive(dev, config, tx_bufs, rx_bufs);
     694:	6883      	ldr	r3, [r0, #8]
     696:	4903      	ldr	r1, [pc, #12]	; (6a4 <spi_write.constprop.0.isra.0+0x14>)
     698:	681c      	ldr	r4, [r3, #0]
     69a:	2300      	movs	r3, #0
     69c:	46a4      	mov	ip, r4
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
}
     69e:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
     6a0:	4760      	bx	ip
     6a2:	bf00      	nop
     6a4:	00007908 	.word	0x00007908

000006a8 <ResetLow>:
// The CS_PORT_BIT is on GPIO0
#define CS_PORT_BIT 12

void ResetLow()
{
	gpio_pin_set(gpio0,RESET_PORT_BIT,0);
     6a8:	4b02      	ldr	r3, [pc, #8]	; (6b4 <ResetLow+0xc>)
     6aa:	2200      	movs	r2, #0
     6ac:	6818      	ldr	r0, [r3, #0]
     6ae:	2101      	movs	r1, #1
     6b0:	f005 bb5c 	b.w	5d6c <gpio_pin_set.isra.0>
     6b4:	20000360 	.word	0x20000360

000006b8 <ResetHigh>:
}
void ResetHigh()
{
	gpio_pin_set(gpio0,RESET_PORT_BIT,1);
     6b8:	4b02      	ldr	r3, [pc, #8]	; (6c4 <ResetHigh+0xc>)
     6ba:	2201      	movs	r2, #1
     6bc:	6818      	ldr	r0, [r3, #0]
     6be:	4611      	mov	r1, r2
     6c0:	f005 bb54 	b.w	5d6c <gpio_pin_set.isra.0>
     6c4:	20000360 	.word	0x20000360

000006c8 <DCLow>:
}
void DCLow()
{
	gpio_pin_set(gpio1,DC_PORT_BIT,0);
     6c8:	4b02      	ldr	r3, [pc, #8]	; (6d4 <DCLow+0xc>)
     6ca:	2200      	movs	r2, #0
     6cc:	6818      	ldr	r0, [r3, #0]
     6ce:	2102      	movs	r1, #2
     6d0:	f005 bb4c 	b.w	5d6c <gpio_pin_set.isra.0>
     6d4:	20000364 	.word	0x20000364

000006d8 <DCHigh>:
}
void DCHigh()
{
	gpio_pin_set(gpio1,DC_PORT_BIT,1);
     6d8:	4b02      	ldr	r3, [pc, #8]	; (6e4 <DCHigh+0xc>)
     6da:	2201      	movs	r2, #1
     6dc:	6818      	ldr	r0, [r3, #0]
     6de:	2102      	movs	r1, #2
     6e0:	f005 bb44 	b.w	5d6c <gpio_pin_set.isra.0>
     6e4:	20000364 	.word	0x20000364

000006e8 <CSLow>:
}
void CSLow()
{
	gpio_pin_set(gpio0,CS_PORT_BIT,0);
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <CSLow+0xc>)
     6ea:	2200      	movs	r2, #0
     6ec:	6818      	ldr	r0, [r3, #0]
     6ee:	210c      	movs	r1, #12
     6f0:	f005 bb3c 	b.w	5d6c <gpio_pin_set.isra.0>
     6f4:	20000360 	.word	0x20000360

000006f8 <CSHigh>:
}
void CSHigh()
{
	gpio_pin_set(gpio0,CS_PORT_BIT,1);
     6f8:	4b02      	ldr	r3, [pc, #8]	; (704 <CSHigh+0xc>)
     6fa:	2201      	movs	r2, #1
     6fc:	6818      	ldr	r0, [r3, #0]
     6fe:	210c      	movs	r1, #12
     700:	f005 bb34 	b.w	5d6c <gpio_pin_set.isra.0>
     704:	20000360 	.word	0x20000360

00000708 <display_command>:
	display_fillRectangle(0,0,SCREEN_WIDTH, SCREEN_HEIGHT, 0x0000);  // black out the screen
    
	return 0;
}
void display_command(uint8_t cmd)
{
     708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     70a:	f88d 0007 	strb.w	r0, [sp, #7]
	DCLow();
     70e:	f7ff ffdb 	bl	6c8 <DCLow>
	struct spi_buf tx_buf = {.buf = &cmd, .len = 1};
     712:	f10d 0307 	add.w	r3, sp, #7
     716:	9302      	str	r3, [sp, #8]
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     718:	aa02      	add	r2, sp, #8
	struct spi_buf tx_buf = {.buf = &cmd, .len = 1};
     71a:	2301      	movs	r3, #1
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     71c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct spi_buf tx_buf = {.buf = &cmd, .len = 1};
     720:	9303      	str	r3, [sp, #12]
	spi_write(spi_display, &cfg, &tx_bufs);
     722:	4b04      	ldr	r3, [pc, #16]	; (734 <display_command+0x2c>)
     724:	a904      	add	r1, sp, #16
     726:	6818      	ldr	r0, [r3, #0]
     728:	f7ff ffb2 	bl	690 <spi_write.constprop.0.isra.0>
}
     72c:	b007      	add	sp, #28
     72e:	f85d fb04 	ldr.w	pc, [sp], #4
     732:	bf00      	nop
     734:	20000368 	.word	0x20000368

00000738 <display_data>:

void display_data(uint8_t data)
{
     738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     73a:	f88d 0007 	strb.w	r0, [sp, #7]
	DCHigh();
     73e:	f7ff ffcb 	bl	6d8 <DCHigh>
	struct spi_buf tx_buf = {.buf = &data, .len = 1};
     742:	f10d 0307 	add.w	r3, sp, #7
     746:	9302      	str	r3, [sp, #8]
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     748:	aa02      	add	r2, sp, #8
	struct spi_buf tx_buf = {.buf = &data, .len = 1};
     74a:	2301      	movs	r3, #1
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     74c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct spi_buf tx_buf = {.buf = &data, .len = 1};
     750:	9303      	str	r3, [sp, #12]
	spi_write(spi_display, &cfg, &tx_bufs);
     752:	4b04      	ldr	r3, [pc, #16]	; (764 <display_data+0x2c>)
     754:	a904      	add	r1, sp, #16
     756:	6818      	ldr	r0, [r3, #0]
     758:	f7ff ff9a 	bl	690 <spi_write.constprop.0.isra.0>
}
     75c:	b007      	add	sp, #28
     75e:	f85d fb04 	ldr.w	pc, [sp], #4
     762:	bf00      	nop
     764:	20000368 	.word	0x20000368

00000768 <display_fillRectangle>:
    display_command(0x2c); // put display in to data write mode

}

void display_fillRectangle(uint16_t x,uint16_t y,uint16_t width, uint16_t height, uint16_t colour)
{
     768:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#define PIXEL_CACHE_SIZE 32
	static uint16_t fill_cache[PIXEL_CACHE_SIZE]; // use this to speed up writes
	uint32_t pixelcount = height * width;
	uint32_t blockcount = pixelcount / PIXEL_CACHE_SIZE;
	
	display_openAperture(x, y, x + width - 1, y + height - 1);
     76c:	1e4e      	subs	r6, r1, #1
	uint32_t pixelcount = height * width;
     76e:	fb02 f403 	mul.w	r4, r2, r3
	display_openAperture(x, y, x + width - 1, y + height - 1);
     772:	4433      	add	r3, r6
     774:	1e46      	subs	r6, r0, #1
     776:	4432      	add	r2, r6
     778:	b29b      	uxth	r3, r3
     77a:	b292      	uxth	r2, r2
     77c:	f005 fb16 	bl	5dac <display_openAperture>
	DCHigh();
     780:	f7ff ffaa 	bl	6d8 <DCHigh>
	struct spi_buf tx_buf = {.buf = &colour, .len = 2};
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     784:	2301      	movs	r3, #1

	if (blockcount)
     786:	2c1f      	cmp	r4, #31
	uint32_t blockcount = pixelcount / PIXEL_CACHE_SIZE;
     788:	ea4f 1554 	mov.w	r5, r4, lsr #5
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     78c:	f8cd d008 	str.w	sp, [sp, #8]
     790:	9303      	str	r3, [sp, #12]
	if (blockcount)
     792:	dc0e      	bgt.n	7b2 <display_fillRectangle+0x4a>
			fill_cache[p]=colour;
		}
	}
	while(blockcount--)
	{
		tx_buf.buf=fill_cache;
     794:	4e14      	ldr	r6, [pc, #80]	; (7e8 <display_fillRectangle+0x80>)
		tx_buf.len = PIXEL_CACHE_SIZE*2;
		spi_write(spi_display, &cfg, &tx_bufs);
     796:	f8df 8054 	ldr.w	r8, [pc, #84]	; 7ec <display_fillRectangle+0x84>
		tx_buf.len = PIXEL_CACHE_SIZE*2;
     79a:	2740      	movs	r7, #64	; 0x40
	while(blockcount--)
     79c:	3d01      	subs	r5, #1
     79e:	d212      	bcs.n	7c6 <display_fillRectangle+0x5e>
	pixelcount = pixelcount % PIXEL_CACHE_SIZE;
	while(pixelcount--) 
	{
		tx_buf.buf = &colour;
		tx_buf.len = 2;		
		spi_write(spi_display, &cfg, &tx_bufs);
     7a0:	4e12      	ldr	r6, [pc, #72]	; (7ec <display_fillRectangle+0x84>)
	pixelcount = pixelcount % PIXEL_CACHE_SIZE;
     7a2:	f004 041f 	and.w	r4, r4, #31
		tx_buf.len = 2;		
     7a6:	2502      	movs	r5, #2
	while(pixelcount--) 
     7a8:	3c01      	subs	r4, #1
     7aa:	d214      	bcs.n	7d6 <display_fillRectangle+0x6e>
	}	
}
     7ac:	b004      	add	sp, #16
     7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fill_cache[p]=colour;
     7b2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
     7b6:	4a0c      	ldr	r2, [pc, #48]	; (7e8 <display_fillRectangle+0x80>)
		for (int p=0;p<PIXEL_CACHE_SIZE;p++)
     7b8:	2300      	movs	r3, #0
     7ba:	3301      	adds	r3, #1
     7bc:	2b20      	cmp	r3, #32
			fill_cache[p]=colour;
     7be:	f822 1b02 	strh.w	r1, [r2], #2
		for (int p=0;p<PIXEL_CACHE_SIZE;p++)
     7c2:	d1fa      	bne.n	7ba <display_fillRectangle+0x52>
     7c4:	e7e6      	b.n	794 <display_fillRectangle+0x2c>
		spi_write(spi_display, &cfg, &tx_bufs);
     7c6:	f8d8 0000 	ldr.w	r0, [r8]
     7ca:	a902      	add	r1, sp, #8
		tx_buf.len = PIXEL_CACHE_SIZE*2;
     7cc:	e9cd 6700 	strd	r6, r7, [sp]
		spi_write(spi_display, &cfg, &tx_bufs);
     7d0:	f7ff ff5e 	bl	690 <spi_write.constprop.0.isra.0>
     7d4:	e7e2      	b.n	79c <display_fillRectangle+0x34>
		tx_buf.buf = &colour;
     7d6:	ab0a      	add	r3, sp, #40	; 0x28
		spi_write(spi_display, &cfg, &tx_bufs);
     7d8:	6830      	ldr	r0, [r6, #0]
     7da:	a902      	add	r1, sp, #8
		tx_buf.len = 2;		
     7dc:	e9cd 3500 	strd	r3, r5, [sp]
		spi_write(spi_display, &cfg, &tx_bufs);
     7e0:	f7ff ff56 	bl	690 <spi_write.constprop.0.isra.0>
     7e4:	e7e0      	b.n	7a8 <display_fillRectangle+0x40>
     7e6:	bf00      	nop
     7e8:	2000059c 	.word	0x2000059c
     7ec:	20000368 	.word	0x20000368

000007f0 <display_begin>:
{
     7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     7f2:	484a      	ldr	r0, [pc, #296]	; (91c <CONFIG_ISR_STACK_SIZE+0x11c>)
	spi_display = device_get_binding("SPI_DISPLAY");
     7f4:	4c4a      	ldr	r4, [pc, #296]	; (920 <CONFIG_ISR_STACK_SIZE+0x120>)
     7f6:	f004 f939 	bl	4a6c <z_impl_device_get_binding>
     7fa:	6020      	str	r0, [r4, #0]
	if (spi_display==NULL)
     7fc:	b930      	cbnz	r0, 80c <CONFIG_ISR_STACK_SIZE+0xc>
		printf("Error acquiring SPI interface\n");
     7fe:	4849      	ldr	r0, [pc, #292]	; (924 <CONFIG_ISR_STACK_SIZE+0x124>)
     800:	f001 fb30 	bl	1e64 <printf>
		return -1;
     804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     808:	b003      	add	sp, #12
     80a:	bd30      	pop	{r4, r5, pc}
		printf("Got SPI interface\n");
     80c:	4846      	ldr	r0, [pc, #280]	; (928 <CONFIG_ISR_STACK_SIZE+0x128>)
     80e:	f001 fb29 	bl	1e64 <printf>
		if (!device_is_ready(spi_display))
     812:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     814:	f006 fcee 	bl	71f4 <z_device_is_ready>
     818:	b928      	cbnz	r0, 826 <CONFIG_ISR_STACK_SIZE+0x26>
			printf("Device is not ready\n");
     81a:	4844      	ldr	r0, [pc, #272]	; (92c <CONFIG_ISR_STACK_SIZE+0x12c>)
     81c:	f001 fb22 	bl	1e64 <printf>
			return -2;
     820:	f06f 0001 	mvn.w	r0, #1
     824:	e7f0      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     826:	4842      	ldr	r0, [pc, #264]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
	gpio0=device_get_binding("GPIO_0");
     828:	4c42      	ldr	r4, [pc, #264]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     82a:	f004 f91f 	bl	4a6c <z_impl_device_get_binding>
     82e:	6020      	str	r0, [r4, #0]
	if (gpio0 == NULL)
     830:	b928      	cbnz	r0, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
		printf("Error acquiring GPIO 0 interface\n");
     832:	4841      	ldr	r0, [pc, #260]	; (938 <CONFIG_ISR_STACK_SIZE+0x138>)
     834:	f001 fb16 	bl	1e64 <printf>
		return -3;
     838:	f06f 0002 	mvn.w	r0, #2
     83c:	e7e4      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     83e:	483f      	ldr	r0, [pc, #252]	; (93c <CONFIG_ISR_STACK_SIZE+0x13c>)
	gpio1=device_get_binding("GPIO_1");
     840:	4d3f      	ldr	r5, [pc, #252]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     842:	f004 f913 	bl	4a6c <z_impl_device_get_binding>
     846:	6028      	str	r0, [r5, #0]
	if (gpio1 == NULL)
     848:	b928      	cbnz	r0, 856 <CONFIG_ISR_STACK_SIZE+0x56>
		printf("Error acquiring GPIO 1 interface\n");
     84a:	483e      	ldr	r0, [pc, #248]	; (944 <CONFIG_ISR_STACK_SIZE+0x144>)
     84c:	f001 fb0a 	bl	1e64 <printf>
		return -4;
     850:	f06f 0003 	mvn.w	r0, #3
     854:	e7d8      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	ret = gpio_pin_configure(gpio0,RESET_PORT_BIT,GPIO_OUTPUT);
     856:	6820      	ldr	r0, [r4, #0]
     858:	2101      	movs	r1, #1
     85a:	f005 fa78 	bl	5d4e <gpio_pin_configure.constprop.0.isra.0>
	ret = gpio_pin_configure(gpio1,DC_PORT_BIT,GPIO_OUTPUT);
     85e:	6828      	ldr	r0, [r5, #0]
     860:	2102      	movs	r1, #2
     862:	f005 fa74 	bl	5d4e <gpio_pin_configure.constprop.0.isra.0>
	ret = gpio_pin_configure(gpio0,CS_PORT_BIT,GPIO_OUTPUT);
     866:	210c      	movs	r1, #12
     868:	6820      	ldr	r0, [r4, #0]
     86a:	f005 fa70 	bl	5d4e <gpio_pin_configure.constprop.0.isra.0>
	CSHigh();
     86e:	f7ff ff43 	bl	6f8 <CSHigh>
	k_msleep(25);
     872:	2019      	movs	r0, #25
     874:	f005 fa8a 	bl	5d8c <k_msleep.isra.0>
	CSLow();
     878:	f7ff ff36 	bl	6e8 <CSLow>
	k_msleep(1);
     87c:	2001      	movs	r0, #1
     87e:	f005 fa85 	bl	5d8c <k_msleep.isra.0>
	ResetHigh();
     882:	f7ff ff19 	bl	6b8 <ResetHigh>
	k_msleep(25);
     886:	2019      	movs	r0, #25
     888:	f005 fa80 	bl	5d8c <k_msleep.isra.0>
	ResetLow();
     88c:	f7ff ff0c 	bl	6a8 <ResetLow>
	k_msleep(25);
     890:	2019      	movs	r0, #25
     892:	f005 fa7b 	bl	5d8c <k_msleep.isra.0>
	ResetHigh();
     896:	f7ff ff0f 	bl	6b8 <ResetHigh>
	k_msleep(25);
     89a:	2019      	movs	r0, #25
     89c:	f005 fa76 	bl	5d8c <k_msleep.isra.0>
	display_command(0x1);
     8a0:	2001      	movs	r0, #1
     8a2:	f7ff ff31 	bl	708 <display_command>
	k_msleep(150);
     8a6:	2096      	movs	r0, #150	; 0x96
     8a8:	f005 fa70 	bl	5d8c <k_msleep.isra.0>
	display_command(0x11);
     8ac:	2011      	movs	r0, #17
     8ae:	f7ff ff2b 	bl	708 <display_command>
	k_msleep(25);
     8b2:	2019      	movs	r0, #25
     8b4:	f005 fa6a 	bl	5d8c <k_msleep.isra.0>
	display_command(0x3a);// Set colour mode        
     8b8:	203a      	movs	r0, #58	; 0x3a
     8ba:	f7ff ff25 	bl	708 <display_command>
	display_data(0x55); // 16bits / pixel @ 64k colors 5-6-5 format 
     8be:	2055      	movs	r0, #85	; 0x55
     8c0:	f7ff ff3a 	bl	738 <display_data>
	k_msleep(25);
     8c4:	2019      	movs	r0, #25
     8c6:	f005 fa61 	bl	5d8c <k_msleep.isra.0>
	display_command(0x36); // RGB Format
     8ca:	2036      	movs	r0, #54	; 0x36
     8cc:	f7ff ff1c 	bl	708 <display_command>
	display_data(0x68); // // RGB Format, rows are on the long axis. Change to 0x48 to enable portrait mode
     8d0:	2068      	movs	r0, #104	; 0x68
     8d2:	f7ff ff31 	bl	738 <display_data>
	k_msleep(25);
     8d6:	2019      	movs	r0, #25
     8d8:	f005 fa58 	bl	5d8c <k_msleep.isra.0>
	display_command(0x51); // maximum brightness
     8dc:	2051      	movs	r0, #81	; 0x51
     8de:	f7ff ff13 	bl	708 <display_command>
    k_msleep(25);
     8e2:	2019      	movs	r0, #25
     8e4:	f005 fa52 	bl	5d8c <k_msleep.isra.0>
	display_command(0x21);    // display inversion off (datasheet is incorrect on this point)
     8e8:	2021      	movs	r0, #33	; 0x21
     8ea:	f7ff ff0d 	bl	708 <display_command>
    display_command(0x13);    // partial mode off                 
     8ee:	2013      	movs	r0, #19
     8f0:	f7ff ff0a 	bl	708 <display_command>
    display_command(0x29);    // display on
     8f4:	2029      	movs	r0, #41	; 0x29
     8f6:	f7ff ff07 	bl	708 <display_command>
	k_msleep(25);
     8fa:	2019      	movs	r0, #25
     8fc:	f005 fa46 	bl	5d8c <k_msleep.isra.0>
	display_fillRectangle(0,0,SCREEN_WIDTH, SCREEN_HEIGHT, 0x0000);  // black out the screen
     900:	2400      	movs	r4, #0
	display_command(0x2c);   // put display in to write mode
     902:	202c      	movs	r0, #44	; 0x2c
     904:	f7ff ff00 	bl	708 <display_command>
	display_fillRectangle(0,0,SCREEN_WIDTH, SCREEN_HEIGHT, 0x0000);  // black out the screen
     908:	4620      	mov	r0, r4
     90a:	9400      	str	r4, [sp, #0]
     90c:	2387      	movs	r3, #135	; 0x87
     90e:	22f0      	movs	r2, #240	; 0xf0
     910:	4621      	mov	r1, r4
     912:	f7ff ff29 	bl	768 <display_fillRectangle>
	return 0;
     916:	4620      	mov	r0, r4
     918:	e776      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     91a:	bf00      	nop
     91c:	00007c16 	.word	0x00007c16
     920:	20000368 	.word	0x20000368
     924:	00007c22 	.word	0x00007c22
     928:	00007c41 	.word	0x00007c41
     92c:	00007c54 	.word	0x00007c54
     930:	00007c69 	.word	0x00007c69
     934:	20000360 	.word	0x20000360
     938:	00007c70 	.word	0x00007c70
     93c:	00007c92 	.word	0x00007c92
     940:	20000364 	.word	0x20000364
     944:	00007c99 	.word	0x00007c99

00000948 <display_putImage>:
	DCHigh();
	spi_write(spi_display, &cfg, &tx_bufs);

}
void display_putImage(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *Image)
{
     948:	b530      	push	{r4, r5, lr}
     94a:	461d      	mov	r5, r3
     94c:	4614      	mov	r4, r2
	display_openAperture(x, y, x + width - 1, y + height - 1);
     94e:	3b01      	subs	r3, #1
     950:	3a01      	subs	r2, #1
{
     952:	b085      	sub	sp, #20
	display_openAperture(x, y, x + width - 1, y + height - 1);
     954:	440b      	add	r3, r1
     956:	4402      	add	r2, r0
     958:	b292      	uxth	r2, r2
     95a:	b29b      	uxth	r3, r3
     95c:	f005 fa26 	bl	5dac <display_openAperture>
	struct spi_buf tx_buf = {.buf = Image, .len = width*height*2};
     960:	436c      	muls	r4, r5
     962:	9b08      	ldr	r3, [sp, #32]
     964:	9300      	str	r3, [sp, #0]
     966:	0064      	lsls	r4, r4, #1
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     968:	2301      	movs	r3, #1
     96a:	9303      	str	r3, [sp, #12]
	struct spi_buf tx_buf = {.buf = Image, .len = width*height*2};
     96c:	9401      	str	r4, [sp, #4]
	struct spi_buf_set tx_bufs = {.buffers = &tx_buf, .count = 1};   
     96e:	f8cd d008 	str.w	sp, [sp, #8]
	DCHigh();
     972:	f7ff feb1 	bl	6d8 <DCHigh>
	spi_write(spi_display, &cfg, &tx_bufs);
     976:	4b03      	ldr	r3, [pc, #12]	; (984 <display_putImage+0x3c>)
     978:	a902      	add	r1, sp, #8
     97a:	6818      	ldr	r0, [r3, #0]
     97c:	f7ff fe88 	bl	690 <spi_write.constprop.0.isra.0>

}
     980:	b005      	add	sp, #20
     982:	bd30      	pop	{r4, r5, pc}
     984:	20000368 	.word	0x20000368

00000988 <display_print>:
            err += dx - (radius << 1);
        }
    }
}
void display_print(const char *Text, uint16_t len, uint16_t x, uint16_t y, uint16_t ForeColour, uint16_t BackColour)
{
     988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     98c:	b097      	sub	sp, #92	; 0x5c
     98e:	4688      	mov	r8, r1
     990:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
     994:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
     998:	9003      	str	r0, [sp, #12]
     99a:	4691      	mov	r9, r2
     99c:	469a      	mov	sl, r3
    // calls on putImage to place it on the screen
    uint8_t Index = 0;
    uint8_t Row, Col;
    const uint8_t *CharacterCode = 0;    
    uint16_t TextBox[FONT_WIDTH * FONT_HEIGHT];
    for (Index = 0; Index < len; Index++)
     99e:	2500      	movs	r5, #0
     9a0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     9a4:	b2ea      	uxtb	r2, r5
     9a6:	4448      	add	r0, r9
     9a8:	4542      	cmp	r2, r8
     9aa:	b280      	uxth	r0, r0
     9ac:	d302      	bcc.n	9b4 <display_print+0x2c>
            Col++;
        }
        display_putImage(x, y, FONT_WIDTH, FONT_HEIGHT, (uint16_t *)TextBox);
        x = x + FONT_WIDTH + 2;
    }
}
     9ae:	b017      	add	sp, #92	; 0x5c
     9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CharacterCode = &Font5x7[FONT_WIDTH * (Text[Index] - 32)];
     9b4:	9b03      	ldr	r3, [sp, #12]
     9b6:	5c9c      	ldrb	r4, [r3, r2]
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <display_print+0x7c>)
     9ba:	3c20      	subs	r4, #32
     9bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     9c0:	441c      	add	r4, r3
        while (Col < FONT_WIDTH)
     9c2:	f10d 0c10 	add.w	ip, sp, #16
        CharacterCode = &Font5x7[FONT_WIDTH * (Text[Index] - 32)];
     9c6:	2200      	movs	r2, #0
                if (CharacterCode[Col] & (1 << Row))
     9c8:	f814 e002 	ldrb.w	lr, [r4, r2]
     9cc:	4661      	mov	r1, ip
     9ce:	2300      	movs	r3, #0
     9d0:	fa4e fb03 	asr.w	fp, lr, r3
     9d4:	f01b 0f01 	tst.w	fp, #1
            while (Row < FONT_HEIGHT)
     9d8:	f103 0301 	add.w	r3, r3, #1
                    TextBox[(Row * FONT_WIDTH) + Col] = ForeColour;
     9dc:	bf14      	ite	ne
     9de:	800e      	strhne	r6, [r1, #0]
                    TextBox[(Row * FONT_WIDTH) + Col] = BackColour;
     9e0:	800f      	strheq	r7, [r1, #0]
            while (Row < FONT_HEIGHT)
     9e2:	2b07      	cmp	r3, #7
     9e4:	f101 010a 	add.w	r1, r1, #10
     9e8:	d1f2      	bne.n	9d0 <display_print+0x48>
        while (Col < FONT_WIDTH)
     9ea:	3201      	adds	r2, #1
     9ec:	2a05      	cmp	r2, #5
     9ee:	f10c 0c02 	add.w	ip, ip, #2
     9f2:	d1e9      	bne.n	9c8 <display_print+0x40>
        display_putImage(x, y, FONT_WIDTH, FONT_HEIGHT, (uint16_t *)TextBox);
     9f4:	a904      	add	r1, sp, #16
     9f6:	9100      	str	r1, [sp, #0]
     9f8:	4651      	mov	r1, sl
     9fa:	f7ff ffa5 	bl	948 <display_putImage>
    for (Index = 0; Index < len; Index++)
     9fe:	3501      	adds	r5, #1
     a00:	e7ce      	b.n	9a0 <display_print+0x18>
     a02:	bf00      	nop
     a04:	00007cbb 	.word	0x00007cbb

00000a08 <bmp280_readRegister>:
    T = (t_fine * 5 + 128) >> 8;
    return T;
}

int bmp280_readRegister(uint8_t RegNum, uint8_t *Value)
{
     a08:	b510      	push	{r4, lr}
     a0a:	b088      	sub	sp, #32
     a0c:	4603      	mov	r3, r0
	    //reads a series of bytes, starting from a specific register
    int nack;   
	nack=i2c_reg_read_byte(i2c,BMP280_R_ADDRESS,RegNum,Value);
     a0e:	4a0c      	ldr	r2, [pc, #48]	; (a40 <bmp280_readRegister+0x38>)
     a10:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
     a14:	f10d 0307 	add.w	r3, sp, #7
     a18:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
     a1a:	2301      	movs	r3, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
     a1c:	e9cd 1305 	strd	r1, r3, [sp, #20]
     a20:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
     a22:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
     a24:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     a26:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
     a28:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     a2c:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     a30:	6883      	ldr	r3, [r0, #8]
     a32:	2202      	movs	r2, #2
     a34:	689c      	ldr	r4, [r3, #8]
     a36:	a902      	add	r1, sp, #8
     a38:	2376      	movs	r3, #118	; 0x76
     a3a:	47a0      	blx	r4
	return nack;
}
     a3c:	b008      	add	sp, #32
     a3e:	bd10      	pop	{r4, pc}
     a40:	2000036c 	.word	0x2000036c

00000a44 <bmp280_writeRegister>:
int bmp280_writeRegister(uint8_t RegNum, uint8_t Value)
{
     a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     a46:	4603      	mov	r3, r0
	//sends a byte to a specific register
    uint8_t Buffer[2];    
    Buffer[0]= Value;    
    int nack;    
	nack=i2c_reg_write_byte(i2c,BMP280_R_ADDRESS,RegNum,Value);
     a48:	4a09      	ldr	r2, [pc, #36]	; (a70 <bmp280_writeRegister+0x2c>)
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     a4a:	f88d 3000 	strb.w	r3, [sp]
	msg.len = num_bytes;
     a4e:	2302      	movs	r3, #2
     a50:	6810      	ldr	r0, [r2, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
     a52:	f88d 1001 	strb.w	r1, [sp, #1]
	msg.buf = (uint8_t *)buf;
     a56:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
     a5a:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     a5c:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     a60:	6883      	ldr	r3, [r0, #8]
     a62:	2201      	movs	r2, #1
     a64:	689c      	ldr	r4, [r3, #8]
     a66:	a901      	add	r1, sp, #4
     a68:	2376      	movs	r3, #118	; 0x76
     a6a:	47a0      	blx	r4
    return nack;
}
     a6c:	b004      	add	sp, #16
     a6e:	bd10      	pop	{r4, pc}
     a70:	2000036c 	.word	0x2000036c

00000a74 <bmp280_readTemperature>:
{
     a74:	b507      	push	{r0, r1, r2, lr}
    bmp280_writeRegister (0xF4, 0x2E);// Initializing the write register for temperature
     a76:	212e      	movs	r1, #46	; 0x2e
     a78:	20f4      	movs	r0, #244	; 0xf4
     a7a:	f7ff ffe3 	bl	a44 <bmp280_writeRegister>
    uint8_t status =0x08;
     a7e:	2308      	movs	r3, #8
     a80:	f88d 3004 	strb.w	r3, [sp, #4]
        bmp280_readRegister(0xF3, &status);
     a84:	a901      	add	r1, sp, #4
     a86:	20f3      	movs	r0, #243	; 0xf3
     a88:	f7ff ffbe 	bl	a08 <bmp280_readRegister>
    while(status &0x08){
     a8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
     a90:	071b      	lsls	r3, r3, #28
     a92:	d4f7      	bmi.n	a84 <bmp280_readTemperature+0x10>
    bmp280_readRegister(0xFA, &TemperatureMSB);
     a94:	f10d 0105 	add.w	r1, sp, #5
     a98:	20fa      	movs	r0, #250	; 0xfa
     a9a:	f7ff ffb5 	bl	a08 <bmp280_readRegister>
    bmp280_readRegister(0xFB, &TemperatureLSB);
     a9e:	f10d 0106 	add.w	r1, sp, #6
     aa2:	20fb      	movs	r0, #251	; 0xfb
     aa4:	f7ff ffb0 	bl	a08 <bmp280_readRegister>
    bmp280_readRegister(0xFC, &TemperatureXLSB);
     aa8:	f10d 0107 	add.w	r1, sp, #7
     aac:	20fc      	movs	r0, #252	; 0xfc
     aae:	f7ff ffab 	bl	a08 <bmp280_readRegister>
    int32_t adc_T = (((long)TemperatureMSB<<16)+((long)TemperatureLSB<<8)+(long)TemperatureXLSB)>>4;
     ab2:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ab6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1 ))) * ((int32_t) dig_T2)) >> 11;
     aba:	4912      	ldr	r1, [pc, #72]	; (b04 <bmp280_readTemperature+0x90>)
    int32_t adc_T = (((long)TemperatureMSB<<16)+((long)TemperatureLSB<<8)+(long)TemperatureXLSB)>>4;
     abc:	021b      	lsls	r3, r3, #8
     abe:	eb03 4302 	add.w	r3, r3, r2, lsl #16
     ac2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     ac6:	1898      	adds	r0, r3, r2
    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1 ))) * ((int32_t) dig_T2)) >> 11;
     ac8:	4a0f      	ldr	r2, [pc, #60]	; (b08 <bmp280_readTemperature+0x94>)
     aca:	8812      	ldrh	r2, [r2, #0]
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
     acc:	ebc2 2313 	rsb	r3, r2, r3, lsr #8
    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1 ))) * ((int32_t) dig_T2)) >> 11;
     ad0:	0052      	lsls	r2, r2, #1
     ad2:	ebc2 12d0 	rsb	r2, r2, r0, lsr #7
     ad6:	f9b1 0000 	ldrsh.w	r0, [r1]
     ada:	4342      	muls	r2, r0
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
     adc:	fb03 f003 	mul.w	r0, r3, r3
     ae0:	4b0a      	ldr	r3, [pc, #40]	; (b0c <bmp280_readTemperature+0x98>)
     ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
     ae6:	1300      	asrs	r0, r0, #12
     ae8:	4358      	muls	r0, r3
     aea:	1380      	asrs	r0, r0, #14
    t_fine = var1 + var2; // store to static (private to this module) variable so that pressure routine can access temperature data
     aec:	4b08      	ldr	r3, [pc, #32]	; (b10 <bmp280_readTemperature+0x9c>)
     aee:	eb00 20e2 	add.w	r0, r0, r2, asr #11
     af2:	6018      	str	r0, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
     af4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     af8:	3080      	adds	r0, #128	; 0x80
}
     afa:	1200      	asrs	r0, r0, #8
     afc:	b003      	add	sp, #12
     afe:	f85d fb04 	ldr.w	pc, [sp], #4
     b02:	bf00      	nop
     b04:	200005f0 	.word	0x200005f0
     b08:	200005ee 	.word	0x200005ee
     b0c:	200005f2 	.word	0x200005f2
     b10:	20000370 	.word	0x20000370

00000b14 <bmp280_readPressure>:
{
     b14:	b513      	push	{r0, r1, r4, lr}
    bmp280_readTemperature();  //Pressure reading needs the temperature reading to calculate pressure      
     b16:	f7ff ffad 	bl	a74 <bmp280_readTemperature>
    bmp280_readRegister(0xF7, &PressureMSB);
     b1a:	f10d 0105 	add.w	r1, sp, #5
     b1e:	20f7      	movs	r0, #247	; 0xf7
     b20:	f7ff ff72 	bl	a08 <bmp280_readRegister>
    bmp280_readRegister(0xF8, &PressureLSB);
     b24:	f10d 0106 	add.w	r1, sp, #6
     b28:	20f8      	movs	r0, #248	; 0xf8
     b2a:	f7ff ff6d 	bl	a08 <bmp280_readRegister>
    bmp280_readRegister(0xF9, &PressureXLSB);
     b2e:	f10d 0107 	add.w	r1, sp, #7
     b32:	20f9      	movs	r0, #249	; 0xf9
     b34:	f7ff ff68 	bl	a08 <bmp280_readRegister>
    var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
     b38:	4b2e      	ldr	r3, [pc, #184]	; (bf4 <bmp280_readPressure+0xe0>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	105b      	asrs	r3, r3, #1
     b3e:	f5a3 427a 	sub.w	r2, r3, #64000	; 0xfa00
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2)*var1)>>1)) >> 18;
     b42:	4b2d      	ldr	r3, [pc, #180]	; (bf8 <bmp280_readPressure+0xe4>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)dig_P6);
     b44:	1091      	asrs	r1, r2, #2
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2)*var1)>>1)) >> 18;
     b46:	f9b3 0000 	ldrsh.w	r0, [r3]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)dig_P6);
     b4a:	4349      	muls	r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2)*var1)>>1)) >> 18;
     b4c:	134b      	asrs	r3, r1, #13
     b4e:	4343      	muls	r3, r0
     b50:	482a      	ldr	r0, [pc, #168]	; (bfc <bmp280_readPressure+0xe8>)
     b52:	f9b0 0000 	ldrsh.w	r0, [r0]
     b56:	4350      	muls	r0, r2
     b58:	1040      	asrs	r0, r0, #1
     b5a:	eb00 00e3 	add.w	r0, r0, r3, asr #3
    var1 = ((((32768+var1))*((int32_t)dig_P1)) >> 15);
     b5e:	4b28      	ldr	r3, [pc, #160]	; (c00 <bmp280_readPressure+0xec>)
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2)*var1)>>1)) >> 18;
     b60:	1480      	asrs	r0, r0, #18
    var1 = ((((32768+var1))*((int32_t)dig_P1)) >> 15);
     b62:	881b      	ldrh	r3, [r3, #0]
     b64:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
     b68:	4358      	muls	r0, r3
    if (var1 == 0)
     b6a:	13c0      	asrs	r0, r0, #15
     b6c:	d03f      	beq.n	bee <bmp280_readPressure+0xda>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)dig_P6);
     b6e:	4b25      	ldr	r3, [pc, #148]	; (c04 <bmp280_readPressure+0xf0>)
     b70:	f9b3 4000 	ldrsh.w	r4, [r3]
    var2 = var2 + ((var1*((int32_t)dig_P5)) << 1);
     b74:	4b24      	ldr	r3, [pc, #144]	; (c08 <bmp280_readPressure+0xf4>)
     b76:	f9b3 3000 	ldrsh.w	r3, [r3]
     b7a:	4353      	muls	r3, r2
     b7c:	005b      	lsls	r3, r3, #1
    uint32_t adc_P = (((uint32_t)PressureMSB<<16)+((uint32_t)PressureLSB<<8)+((uint32_t)PressureXLSB))>>4;
     b7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)dig_P6);
     b82:	12c9      	asrs	r1, r1, #11
    var2 = var2 + ((var1*((int32_t)dig_P5)) << 1);
     b84:	fb04 3101 	mla	r1, r4, r1, r3
    uint32_t adc_P = (((uint32_t)PressureMSB<<16)+((uint32_t)PressureLSB<<8)+((uint32_t)PressureXLSB))>>4;
     b88:	f89d 3005 	ldrb.w	r3, [sp, #5]
     b8c:	0212      	lsls	r2, r2, #8
     b8e:	eb02 4303 	add.w	r3, r2, r3, lsl #16
     b92:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b96:	441a      	add	r2, r3
    var2 = (var2 >> 2) + (((int32_t)dig_P4) << 16);
     b98:	4b1c      	ldr	r3, [pc, #112]	; (c0c <bmp280_readPressure+0xf8>)
     b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
     b9e:	041b      	lsls	r3, r3, #16
     ba0:	eb03 03a1 	add.w	r3, r3, r1, asr #2
    p = (((uint32_t)(((int32_t)1048576)-adc_P) - (var2 >> 12)))*3125;
     ba4:	131b      	asrs	r3, r3, #12
     ba6:	eb03 1312 	add.w	r3, r3, r2, lsr #4
     baa:	4a19      	ldr	r2, [pc, #100]	; (c10 <bmp280_readPressure+0xfc>)
    var2 = (((int32_t)(p >> 2)) * ((int32_t) dig_P8)) >> 13;
     bac:	4919      	ldr	r1, [pc, #100]	; (c14 <bmp280_readPressure+0x100>)
    p = (((uint32_t)(((int32_t)1048576)-adc_P) - (var2 >> 12)))*3125;
     bae:	4353      	muls	r3, r2
     bb0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
     bb4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (p < 0x80000000)
     bb8:	2b00      	cmp	r3, #0
        p = (p << 1) / ((uint32_t)var1);
     bba:	bfaa      	itet	ge
     bbc:	005b      	lslge	r3, r3, #1
        p = (p / (uint32_t)var1)*2;
     bbe:	fbb3 f0f0 	udivlt	r0, r3, r0
        p = (p << 1) / ((uint32_t)var1);
     bc2:	fbb3 f0f0 	udivge	r0, r3, r0
    var1 = (((int32_t)dig_P9) * ((int32_t)(((p >> 3)) >> 13))) >> 12;
     bc6:	4b14      	ldr	r3, [pc, #80]	; (c18 <bmp280_readPressure+0x104>)
    var2 = (((int32_t)(p >> 2)) * ((int32_t) dig_P8)) >> 13;
     bc8:	f9b1 1000 	ldrsh.w	r1, [r1]
    var1 = (((int32_t)dig_P9) * ((int32_t)(((p >> 3)) >> 13))) >> 12;
     bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
        p = (p / (uint32_t)var1)*2;
     bd0:	bfb8      	it	lt
     bd2:	0040      	lsllt	r0, r0, #1
    var1 = (((int32_t)dig_P9) * ((int32_t)(((p >> 3)) >> 13))) >> 12;
     bd4:	0c02      	lsrs	r2, r0, #16
     bd6:	435a      	muls	r2, r3
    var2 = (((int32_t)(p >> 2)) * ((int32_t) dig_P8)) >> 13;
     bd8:	0883      	lsrs	r3, r0, #2
     bda:	434b      	muls	r3, r1
     bdc:	135b      	asrs	r3, r3, #13
    p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
     bde:	eb03 3322 	add.w	r3, r3, r2, asr #12
     be2:	4a0e      	ldr	r2, [pc, #56]	; (c1c <bmp280_readPressure+0x108>)
     be4:	f9b2 2000 	ldrsh.w	r2, [r2]
     be8:	4413      	add	r3, r2
     bea:	eb00 1023 	add.w	r0, r0, r3, asr #4
}
     bee:	b002      	add	sp, #8
     bf0:	bd10      	pop	{r4, pc}
     bf2:	bf00      	nop
     bf4:	20000370 	.word	0x20000370
     bf8:	200005e0 	.word	0x200005e0
     bfc:	200005de 	.word	0x200005de
     c00:	200005dc 	.word	0x200005dc
     c04:	200005e6 	.word	0x200005e6
     c08:	200005e4 	.word	0x200005e4
     c0c:	200005e2 	.word	0x200005e2
     c10:	fffff3cb 	.word	0xfffff3cb
     c14:	200005ea 	.word	0x200005ea
     c18:	200005ec 	.word	0x200005ec
     c1c:	200005e8 	.word	0x200005e8

00000c20 <bmp280_readCalibrationData>:
void bmp280_readCalibrationData()
{
     c20:	b510      	push	{r4, lr}
	uint8_t CalibrationData[26];
    int i;
#define CAL_START 0x88 //Defining the address where the calibration data should start 
    for(i=0;i<26;i++)
     c22:	2400      	movs	r4, #0
{
     c24:	b088      	sub	sp, #32
    {
        //Read calibration table
        bmp280_readRegister(CAL_START+i, &CalibrationData[i]);
     c26:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
     c2a:	ab01      	add	r3, sp, #4
     c2c:	1919      	adds	r1, r3, r4
     c2e:	b2c0      	uxtb	r0, r0
    for(i=0;i<26;i++)
     c30:	3401      	adds	r4, #1
        bmp280_readRegister(CAL_START+i, &CalibrationData[i]);
     c32:	f7ff fee9 	bl	a08 <bmp280_readRegister>
    for(i=0;i<26;i++)
     c36:	2c1a      	cmp	r4, #26
     c38:	d1f5      	bne.n	c26 <bmp280_readCalibrationData+0x6>
        
    }        
    dig_T1 = ((uint16_t)CalibrationData[1]<<8) + (uint16_t) (CalibrationData[0]);
     c3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
     c3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
     c42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c46:	4a2e      	ldr	r2, [pc, #184]	; (d00 <bmp280_readCalibrationData+0xe0>)
     c48:	8013      	strh	r3, [r2, #0]
    dig_T2 = ((uint16_t)CalibrationData[3]<<8) + (uint16_t) (CalibrationData[2]);
     c4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     c52:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c56:	4a2b      	ldr	r2, [pc, #172]	; (d04 <bmp280_readCalibrationData+0xe4>)
     c58:	8013      	strh	r3, [r2, #0]
    dig_T3 = ((uint16_t)CalibrationData[5]<<8) + (uint16_t) (CalibrationData[4]);
     c5a:	f89d 2009 	ldrb.w	r2, [sp, #9]
     c5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
     c62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c66:	4a28      	ldr	r2, [pc, #160]	; (d08 <bmp280_readCalibrationData+0xe8>)
     c68:	8013      	strh	r3, [r2, #0]
    dig_P1 = ((uint16_t)CalibrationData[7]<<8) + (uint16_t) (CalibrationData[6]);
     c6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c6e:	f89d 300a 	ldrb.w	r3, [sp, #10]
     c72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c76:	4a25      	ldr	r2, [pc, #148]	; (d0c <bmp280_readCalibrationData+0xec>)
     c78:	8013      	strh	r3, [r2, #0]
    dig_P2 = ((uint16_t)CalibrationData[9]<<8) + (uint16_t) (CalibrationData[8]);
     c7a:	f89d 200d 	ldrb.w	r2, [sp, #13]
     c7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
     c82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c86:	4a22      	ldr	r2, [pc, #136]	; (d10 <bmp280_readCalibrationData+0xf0>)
     c88:	8013      	strh	r3, [r2, #0]
    dig_P3 = ((uint16_t)CalibrationData[11]<<8)+ (uint16_t) (CalibrationData[10]);
     c8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
     c92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     c96:	4a1f      	ldr	r2, [pc, #124]	; (d14 <bmp280_readCalibrationData+0xf4>)
     c98:	8013      	strh	r3, [r2, #0]
    dig_P4 = ((uint16_t)CalibrationData[13]<<8)+ (uint16_t) (CalibrationData[12]);
     c9a:	f89d 2011 	ldrb.w	r2, [sp, #17]
     c9e:	f89d 3010 	ldrb.w	r3, [sp, #16]
     ca2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     ca6:	4a1c      	ldr	r2, [pc, #112]	; (d18 <bmp280_readCalibrationData+0xf8>)
     ca8:	8013      	strh	r3, [r2, #0]
    dig_P5 = ((uint16_t)CalibrationData[15]<<8)+ (uint16_t) (CalibrationData[14]);
     caa:	f89d 2013 	ldrb.w	r2, [sp, #19]
     cae:	f89d 3012 	ldrb.w	r3, [sp, #18]
     cb2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     cb6:	4a19      	ldr	r2, [pc, #100]	; (d1c <bmp280_readCalibrationData+0xfc>)
     cb8:	8013      	strh	r3, [r2, #0]
    dig_P6 = ((uint16_t)CalibrationData[17]<<8)+ (uint16_t) (CalibrationData[16]);
     cba:	f89d 2015 	ldrb.w	r2, [sp, #21]
     cbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
     cc2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     cc6:	4a16      	ldr	r2, [pc, #88]	; (d20 <bmp280_readCalibrationData+0x100>)
     cc8:	8013      	strh	r3, [r2, #0]
    dig_P7 = ((uint16_t)CalibrationData[19]<<8)+ (uint16_t) (CalibrationData[18]);
     cca:	f89d 2017 	ldrb.w	r2, [sp, #23]
     cce:	f89d 3016 	ldrb.w	r3, [sp, #22]
     cd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     cd6:	4a13      	ldr	r2, [pc, #76]	; (d24 <bmp280_readCalibrationData+0x104>)
     cd8:	8013      	strh	r3, [r2, #0]
    dig_P8 = ((uint16_t)CalibrationData[21]<<8)+ (uint16_t) (CalibrationData[20]);
     cda:	f89d 2019 	ldrb.w	r2, [sp, #25]
     cde:	f89d 3018 	ldrb.w	r3, [sp, #24]
     ce2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     ce6:	4a10      	ldr	r2, [pc, #64]	; (d28 <bmp280_readCalibrationData+0x108>)
     ce8:	8013      	strh	r3, [r2, #0]
    dig_P9 = ((uint16_t)CalibrationData[23]<<8)+  (uint16_t) (CalibrationData[22]);
     cea:	f89d 201b 	ldrb.w	r2, [sp, #27]
     cee:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cf2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     cf6:	4a0d      	ldr	r2, [pc, #52]	; (d2c <bmp280_readCalibrationData+0x10c>)
     cf8:	8013      	strh	r3, [r2, #0]
}
     cfa:	b008      	add	sp, #32
     cfc:	bd10      	pop	{r4, pc}
     cfe:	bf00      	nop
     d00:	200005ee 	.word	0x200005ee
     d04:	200005f0 	.word	0x200005f0
     d08:	200005f2 	.word	0x200005f2
     d0c:	200005dc 	.word	0x200005dc
     d10:	200005de 	.word	0x200005de
     d14:	200005e0 	.word	0x200005e0
     d18:	200005e2 	.word	0x200005e2
     d1c:	200005e4 	.word	0x200005e4
     d20:	200005e6 	.word	0x200005e6
     d24:	200005e8 	.word	0x200005e8
     d28:	200005ea 	.word	0x200005ea
     d2c:	200005ec 	.word	0x200005ec

00000d30 <bmp280_begin>:
{
     d30:	b508      	push	{r3, lr}
     d32:	4808      	ldr	r0, [pc, #32]	; (d54 <bmp280_begin+0x24>)
     d34:	f003 fe9a 	bl	4a6c <z_impl_device_get_binding>
	i2c = device_get_binding("I2C_1");
     d38:	4b07      	ldr	r3, [pc, #28]	; (d58 <bmp280_begin+0x28>)
     d3a:	6018      	str	r0, [r3, #0]
	if (i2c==NULL)
     d3c:	b928      	cbnz	r0, d4a <bmp280_begin+0x1a>
		printf("Error acquiring i2c1 interface\n");
     d3e:	4807      	ldr	r0, [pc, #28]	; (d5c <bmp280_begin+0x2c>)
     d40:	f001 f890 	bl	1e64 <printf>
		return -1;
     d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     d48:	bd08      	pop	{r3, pc}
	bmp280_readCalibrationData();
     d4a:	f7ff ff69 	bl	c20 <bmp280_readCalibrationData>
	return 0;
     d4e:	2000      	movs	r0, #0
     d50:	e7fa      	b.n	d48 <bmp280_begin+0x18>
     d52:	bf00      	nop
     d54:	00007e9b 	.word	0x00007e9b
     d58:	2000036c 	.word	0x2000036c
     d5c:	00007ea1 	.word	0x00007ea1

00000d60 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     d60:	4b01      	ldr	r3, [pc, #4]	; (d68 <char_out+0x8>)
     d62:	681b      	ldr	r3, [r3, #0]
     d64:	4718      	bx	r3
     d66:	bf00      	nop
     d68:	20000000 	.word	0x20000000

00000d6c <__printk_hook_install>:
	_char_out = fn;
     d6c:	4b01      	ldr	r3, [pc, #4]	; (d74 <__printk_hook_install+0x8>)
     d6e:	6018      	str	r0, [r3, #0]
}
     d70:	4770      	bx	lr
     d72:	bf00      	nop
     d74:	20000000 	.word	0x20000000

00000d78 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     d78:	b507      	push	{r0, r1, r2, lr}
     d7a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     d7c:	2100      	movs	r1, #0
     d7e:	4602      	mov	r2, r0
     d80:	9100      	str	r1, [sp, #0]
     d82:	4803      	ldr	r0, [pc, #12]	; (d90 <vprintk+0x18>)
     d84:	f000 f8e6 	bl	f54 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     d88:	b003      	add	sp, #12
     d8a:	f85d fb04 	ldr.w	pc, [sp], #4
     d8e:	bf00      	nop
     d90:	00000d61 	.word	0x00000d61

00000d94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d98:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d9c:	f019 0808 	ands.w	r8, r9, #8
{
     da0:	4604      	mov	r4, r0
     da2:	4693      	mov	fp, r2
	if (processing) {
     da4:	d00d      	beq.n	dc2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     da6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     da8:	bf0c      	ite	eq
     daa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     dae:	f049 0920 	orrne.w	r9, r9, #32
     db2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     db6:	f38b 8811 	msr	BASEPRI, fp
     dba:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     dc2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     dc6:	2902      	cmp	r1, #2
     dc8:	d107      	bne.n	dda <process_event+0x46>
			evt = process_recheck(mgr);
     dca:	4620      	mov	r0, r4
     dcc:	f005 f852 	bl	5e74 <process_recheck>
		if (evt == EVT_NOP) {
     dd0:	2800      	cmp	r0, #0
     dd2:	d0f0      	beq.n	db6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     dd4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     dd8:	d14e      	bne.n	e78 <process_event+0xe4>
			res = mgr->last_res;
     dda:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ddc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     dde:	2f00      	cmp	r7, #0
     de0:	da15      	bge.n	e0e <process_event+0x7a>
		*clients = mgr->clients;
     de2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     de4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     de8:	e9c4 8800 	strd	r8, r8, [r4]
     dec:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     df0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     df2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     df4:	8b21      	ldrh	r1, [r4, #24]
     df6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     dfa:	45ca      	cmp	sl, r9
     dfc:	d002      	beq.n	e04 <process_event+0x70>
		if (do_monitors
     dfe:	68a3      	ldr	r3, [r4, #8]
     e00:	2b00      	cmp	r3, #0
     e02:	d15a      	bne.n	eba <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     e04:	b90d      	cbnz	r5, e0a <process_event+0x76>
		    || (transit != NULL)) {
     e06:	2e00      	cmp	r6, #0
     e08:	d071      	beq.n	eee <process_event+0x15a>
     e0a:	2300      	movs	r3, #0
     e0c:	e056      	b.n	ebc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     e0e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     e12:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     e14:	2a01      	cmp	r2, #1
     e16:	d81e      	bhi.n	e56 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e18:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     e1c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     e1e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e20:	b289      	uxth	r1, r1
     e22:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     e26:	d10a      	bne.n	e3e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     e28:	b13d      	cbz	r5, e3a <process_event+0xa6>
     e2a:	8b63      	ldrh	r3, [r4, #26]
     e2c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     e2e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     e30:	3301      	adds	r3, #1
     e32:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     e34:	2a00      	cmp	r2, #0
     e36:	d1fa      	bne.n	e2e <process_event+0x9a>
     e38:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e3a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     e3e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     e40:	4620      	mov	r0, r4
     e42:	f005 f817 	bl	5e74 <process_recheck>
     e46:	4606      	mov	r6, r0
     e48:	2800      	cmp	r0, #0
     e4a:	d0d3      	beq.n	df4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e4c:	8b23      	ldrh	r3, [r4, #24]
     e4e:	f043 0320 	orr.w	r3, r3, #32
     e52:	8323      	strh	r3, [r4, #24]
     e54:	e7cd      	b.n	df2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     e56:	2b04      	cmp	r3, #4
     e58:	d10c      	bne.n	e74 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e5a:	f021 0107 	bic.w	r1, r1, #7
     e5e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     e60:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     e62:	4620      	mov	r0, r4
     e64:	f005 f806 	bl	5e74 <process_recheck>
     e68:	4605      	mov	r5, r0
     e6a:	2800      	cmp	r0, #0
     e6c:	d0c1      	beq.n	df2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e6e:	f041 0120 	orr.w	r1, r1, #32
     e72:	8321      	strh	r1, [r4, #24]
     e74:	2500      	movs	r5, #0
     e76:	e7bc      	b.n	df2 <process_event+0x5e>
		} else if (evt == EVT_START) {
     e78:	2803      	cmp	r0, #3
     e7a:	d109      	bne.n	e90 <process_event+0xfc>
			transit = mgr->transitions->start;
     e7c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e7e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     e82:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e84:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     e88:	8323      	strh	r3, [r4, #24]
}
     e8a:	2500      	movs	r5, #0
		res = 0;
     e8c:	462f      	mov	r7, r5
     e8e:	e7b1      	b.n	df4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     e90:	2804      	cmp	r0, #4
     e92:	d106      	bne.n	ea2 <process_event+0x10e>
			transit = mgr->transitions->stop;
     e94:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e96:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     e9a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e9c:	f043 0304 	orr.w	r3, r3, #4
     ea0:	e7f2      	b.n	e88 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     ea2:	2805      	cmp	r0, #5
     ea4:	d106      	bne.n	eb4 <process_event+0x120>
			transit = mgr->transitions->reset;
     ea6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ea8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     eac:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     eae:	f043 0305 	orr.w	r3, r3, #5
     eb2:	e7e9      	b.n	e88 <process_event+0xf4>
     eb4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     eb6:	462e      	mov	r6, r5
     eb8:	e7e8      	b.n	e8c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     eba:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     ebc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     ec0:	8321      	strh	r1, [r4, #24]
     ec2:	f38b 8811 	msr	BASEPRI, fp
     ec6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     eca:	b9fb      	cbnz	r3, f0c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     ecc:	bb85      	cbnz	r5, f30 <process_event+0x19c>
			if (transit != NULL) {
     ece:	b116      	cbz	r6, ed6 <process_event+0x142>
				transit(mgr, transition_complete);
     ed0:	491f      	ldr	r1, [pc, #124]	; (f50 <process_event+0x1bc>)
     ed2:	4620      	mov	r0, r4
     ed4:	47b0      	blx	r6
	__asm__ volatile(
     ed6:	f04f 0320 	mov.w	r3, #32
     eda:	f3ef 8b11 	mrs	fp, BASEPRI
     ede:	f383 8812 	msr	BASEPRI_MAX, r3
     ee2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     ee6:	8b23      	ldrh	r3, [r4, #24]
     ee8:	f023 0308 	bic.w	r3, r3, #8
     eec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     eee:	8b23      	ldrh	r3, [r4, #24]
     ef0:	06da      	lsls	r2, r3, #27
     ef2:	d525      	bpl.n	f40 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ef4:	f023 0310 	bic.w	r3, r3, #16
     ef8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     efa:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     efc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     f00:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     f04:	2900      	cmp	r1, #0
     f06:	f47f af5e 	bne.w	dc6 <process_event+0x32>
out:
     f0a:	e754      	b.n	db6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     f0c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     f0e:	2900      	cmp	r1, #0
     f10:	d0dc      	beq.n	ecc <process_event+0x138>
	return node->next;
     f12:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     f16:	f8d1 b004 	ldr.w	fp, [r1, #4]
     f1a:	463b      	mov	r3, r7
     f1c:	4652      	mov	r2, sl
     f1e:	4620      	mov	r0, r4
     f20:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     f22:	f1b9 0f00 	cmp.w	r9, #0
     f26:	d0d1      	beq.n	ecc <process_event+0x138>
     f28:	4649      	mov	r1, r9
     f2a:	f8d9 9000 	ldr.w	r9, [r9]
     f2e:	e7f2      	b.n	f16 <process_event+0x182>
     f30:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     f32:	463b      	mov	r3, r7
     f34:	4652      	mov	r2, sl
     f36:	4620      	mov	r0, r4
     f38:	682d      	ldr	r5, [r5, #0]
     f3a:	f004 ffb7 	bl	5eac <notify_one>
     f3e:	e7c5      	b.n	ecc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     f40:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     f44:	bf1e      	ittt	ne
     f46:	f023 0320 	bicne.w	r3, r3, #32
     f4a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     f4c:	2102      	movne	r1, #2
     f4e:	e7d5      	b.n	efc <process_event+0x168>
     f50:	00005ed9 	.word	0x00005ed9

00000f54 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f58:	b091      	sub	sp, #68	; 0x44
     f5a:	468b      	mov	fp, r1
     f5c:	9002      	str	r0, [sp, #8]
     f5e:	4692      	mov	sl, r2
     f60:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f62:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f64:	f89a 0000 	ldrb.w	r0, [sl]
     f68:	b908      	cbnz	r0, f6e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f6a:	4628      	mov	r0, r5
     f6c:	e363      	b.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
		if (*fp != '%') {
     f6e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f70:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     f74:	d007      	beq.n	f86 <z_cbvprintf_impl+0x32>
			OUTC('%');
     f76:	9b02      	ldr	r3, [sp, #8]
     f78:	4659      	mov	r1, fp
     f7a:	4798      	blx	r3
     f7c:	2800      	cmp	r0, #0
     f7e:	f2c0 835a 	blt.w	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
     f82:	3501      	adds	r5, #1
			break;
     f84:	e212      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
		} state = {
     f86:	2218      	movs	r2, #24
     f88:	2100      	movs	r1, #0
     f8a:	a80a      	add	r0, sp, #40	; 0x28
     f8c:	f005 fa27 	bl	63de <memset>
	if (*sp == '%') {
     f90:	f89a 3001 	ldrb.w	r3, [sl, #1]
     f94:	2b25      	cmp	r3, #37	; 0x25
     f96:	d078      	beq.n	108a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xea>
     f98:	2200      	movs	r2, #0
     f9a:	4610      	mov	r0, r2
     f9c:	4696      	mov	lr, r2
     f9e:	4694      	mov	ip, r2
     fa0:	4616      	mov	r6, r2
     fa2:	4639      	mov	r1, r7
		switch (*sp) {
     fa4:	f817 3b01 	ldrb.w	r3, [r7], #1
     fa8:	2b2b      	cmp	r3, #43	; 0x2b
     faa:	f000 809d 	beq.w	10e8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x148>
     fae:	f200 8094 	bhi.w	10da <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x13a>
     fb2:	2b20      	cmp	r3, #32
     fb4:	f000 809b 	beq.w	10ee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x14e>
     fb8:	2b23      	cmp	r3, #35	; 0x23
     fba:	f000 809b 	beq.w	10f4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x154>
     fbe:	b12e      	cbz	r6, fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
     fc0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     fc4:	f046 0604 	orr.w	r6, r6, #4
     fc8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     fcc:	f1bc 0f00 	cmp.w	ip, #0
     fd0:	d005      	beq.n	fde <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3e>
     fd2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     fd6:	f046 0608 	orr.w	r6, r6, #8
     fda:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     fde:	f1be 0f00 	cmp.w	lr, #0
     fe2:	d005      	beq.n	ff0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x50>
     fe4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     fe8:	f046 0610 	orr.w	r6, r6, #16
     fec:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     ff0:	b128      	cbz	r0, ffe <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5e>
     ff2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     ff6:	f040 0020 	orr.w	r0, r0, #32
     ffa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ffe:	b12a      	cbz	r2, 100c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6c>
    1000:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1008:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    100c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1010:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1014:	2844      	cmp	r0, #68	; 0x44
    1016:	d103      	bne.n	1020 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x80>
		conv->flag_zero = false;
    1018:	f36f 1286 	bfc	r2, #6, #1
    101c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1020:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1024:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    102a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    102e:	d17b      	bne.n	1128 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x188>
		conv->width_star = true;
    1030:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1034:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1038:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    103a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    103e:	781a      	ldrb	r2, [r3, #0]
    1040:	2a2e      	cmp	r2, #46	; 0x2e
    1042:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1046:	bf0c      	ite	eq
    1048:	2101      	moveq	r1, #1
    104a:	2100      	movne	r1, #0
    104c:	f361 0241 	bfi	r2, r1, #1, #1
    1050:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1054:	d174      	bne.n	1140 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a0>
	if (*sp == '*') {
    1056:	785a      	ldrb	r2, [r3, #1]
    1058:	2a2a      	cmp	r2, #42	; 0x2a
    105a:	d06a      	beq.n	1132 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x192>
	++sp;
    105c:	3301      	adds	r3, #1
	size_t val = 0;
    105e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1060:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1062:	4618      	mov	r0, r3
    1064:	f810 2b01 	ldrb.w	r2, [r0], #1
    1068:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    106c:	2f09      	cmp	r7, #9
    106e:	f240 808e 	bls.w	118e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1ee>
	conv->unsupported |= ((conv->prec_value < 0)
    1072:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1076:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1078:	f3c2 0040 	ubfx	r0, r2, #1, #1
    107c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1080:	f361 0241 	bfi	r2, r1, #1, #1
    1084:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1088:	e05a      	b.n	1140 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a0>
		conv->specifier = *sp++;
    108a:	f10a 0702 	add.w	r7, sl, #2
    108e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1092:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1096:	07d9      	lsls	r1, r3, #31
    1098:	f140 8149 	bpl.w	132e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38e>
			width = va_arg(ap, int);
    109c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    10a0:	f1b9 0f00 	cmp.w	r9, #0
    10a4:	da07      	bge.n	10b6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x116>
				conv->flag_dash = true;
    10a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10aa:	f042 0204 	orr.w	r2, r2, #4
    10ae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    10b2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    10b6:	075a      	lsls	r2, r3, #29
    10b8:	f140 8142 	bpl.w	1340 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3a0>
			int arg = va_arg(ap, int);
    10bc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    10c0:	f1b8 0f00 	cmp.w	r8, #0
    10c4:	f280 8141 	bge.w	134a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3aa>
				conv->prec_present = false;
    10c8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10cc:	f36f 0341 	bfc	r3, #1, #1
    10d0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    10d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    10d8:	e137      	b.n	134a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3aa>
		switch (*sp) {
    10da:	2b2d      	cmp	r3, #45	; 0x2d
    10dc:	d00c      	beq.n	10f8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x158>
    10de:	2b30      	cmp	r3, #48	; 0x30
    10e0:	f47f af6d 	bne.w	fbe <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1e>
			conv->flag_zero = true;
    10e4:	2201      	movs	r2, #1
	} while (loop);
    10e6:	e75c      	b.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
			conv->flag_plus = true;
    10e8:	f04f 0c01 	mov.w	ip, #1
    10ec:	e759      	b.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
			conv->flag_space = true;
    10ee:	f04f 0e01 	mov.w	lr, #1
    10f2:	e756      	b.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
			conv->flag_hash = true;
    10f4:	2001      	movs	r0, #1
    10f6:	e754      	b.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
		switch (*sp) {
    10f8:	2601      	movs	r6, #1
    10fa:	e752      	b.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
		val = 10U * val + *sp++ - '0';
    10fc:	fb0c 0202 	mla	r2, ip, r2, r0
    1100:	3a30      	subs	r2, #48	; 0x30
    1102:	4633      	mov	r3, r6
    1104:	461e      	mov	r6, r3
    1106:	f816 0b01 	ldrb.w	r0, [r6], #1
    110a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    110e:	2f09      	cmp	r7, #9
    1110:	d9f4      	bls.n	10fc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x15c>
	if (sp != wp) {
    1112:	4299      	cmp	r1, r3
    1114:	d093      	beq.n	103e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x9e>
		conv->unsupported |= ((conv->width_value < 0)
    1116:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    111a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    111c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    111e:	f362 0141 	bfi	r1, r2, #1, #1
    1122:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1126:	e78a      	b.n	103e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x9e>
    1128:	460b      	mov	r3, r1
	size_t val = 0;
    112a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    112c:	f04f 0c0a 	mov.w	ip, #10
    1130:	e7e8      	b.n	1104 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x164>
		conv->prec_star = true;
    1132:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1136:	f042 0204 	orr.w	r2, r2, #4
    113a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    113e:	3302      	adds	r3, #2
	switch (*sp) {
    1140:	461f      	mov	r7, r3
    1142:	f817 2b01 	ldrb.w	r2, [r7], #1
    1146:	2a6c      	cmp	r2, #108	; 0x6c
    1148:	d041      	beq.n	11ce <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x22e>
    114a:	d825      	bhi.n	1198 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1f8>
    114c:	2a68      	cmp	r2, #104	; 0x68
    114e:	d02b      	beq.n	11a8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x208>
    1150:	2a6a      	cmp	r2, #106	; 0x6a
    1152:	d046      	beq.n	11e2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x242>
    1154:	2a4c      	cmp	r2, #76	; 0x4c
    1156:	d04c      	beq.n	11f2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x252>
    1158:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    115a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    115e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1162:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1166:	2a78      	cmp	r2, #120	; 0x78
    1168:	f200 80d9 	bhi.w	131e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x37e>
    116c:	2a57      	cmp	r2, #87	; 0x57
    116e:	d84d      	bhi.n	120c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26c>
    1170:	2a41      	cmp	r2, #65	; 0x41
    1172:	d003      	beq.n	117c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1dc>
    1174:	3a45      	subs	r2, #69	; 0x45
    1176:	2a02      	cmp	r2, #2
    1178:	f200 80d1 	bhi.w	131e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x37e>
		conv->specifier_cat = SPECIFIER_FP;
    117c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1180:	2204      	movs	r2, #4
    1182:	f362 0302 	bfi	r3, r2, #0, #3
    1186:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    118a:	2301      	movs	r3, #1
			break;
    118c:	e09e      	b.n	12cc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32c>
		val = 10U * val + *sp++ - '0';
    118e:	fb06 2101 	mla	r1, r6, r1, r2
    1192:	3930      	subs	r1, #48	; 0x30
    1194:	4603      	mov	r3, r0
    1196:	e764      	b.n	1062 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc2>
	switch (*sp) {
    1198:	2a74      	cmp	r2, #116	; 0x74
    119a:	d026      	beq.n	11ea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x24a>
    119c:	2a7a      	cmp	r2, #122	; 0x7a
    119e:	d1db      	bne.n	1158 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1b8>
		conv->length_mod = LENGTH_Z;
    11a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11a4:	2206      	movs	r2, #6
    11a6:	e00d      	b.n	11c4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x224>
		if (*++sp == 'h') {
    11a8:	785a      	ldrb	r2, [r3, #1]
    11aa:	2a68      	cmp	r2, #104	; 0x68
    11ac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11b0:	d106      	bne.n	11c0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x220>
			conv->length_mod = LENGTH_HH;
    11b2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    11b4:	f361 02c6 	bfi	r2, r1, #3, #4
    11b8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    11bc:	1c9f      	adds	r7, r3, #2
    11be:	e7cc      	b.n	115a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1ba>
			conv->length_mod = LENGTH_H;
    11c0:	4613      	mov	r3, r2
    11c2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    11c4:	f362 03c6 	bfi	r3, r2, #3, #4
    11c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    11cc:	e7c5      	b.n	115a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1ba>
		if (*++sp == 'l') {
    11ce:	785a      	ldrb	r2, [r3, #1]
    11d0:	2a6c      	cmp	r2, #108	; 0x6c
    11d2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11d6:	d101      	bne.n	11dc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x23c>
			conv->length_mod = LENGTH_LL;
    11d8:	2104      	movs	r1, #4
    11da:	e7eb      	b.n	11b4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x214>
			conv->length_mod = LENGTH_L;
    11dc:	4613      	mov	r3, r2
    11de:	2203      	movs	r2, #3
    11e0:	e7f0      	b.n	11c4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x224>
		conv->length_mod = LENGTH_J;
    11e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11e6:	2205      	movs	r2, #5
    11e8:	e7ec      	b.n	11c4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x224>
		conv->length_mod = LENGTH_T;
    11ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11ee:	2207      	movs	r2, #7
    11f0:	e7e8      	b.n	11c4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x224>
		conv->unsupported = true;
    11f2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    11f6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    11fa:	f023 0302 	bic.w	r3, r3, #2
    11fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1202:	f043 0302 	orr.w	r3, r3, #2
    1206:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    120a:	e7a6      	b.n	115a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1ba>
	switch (conv->specifier) {
    120c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1210:	2920      	cmp	r1, #32
    1212:	f200 8084 	bhi.w	131e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x37e>
    1216:	a001      	add	r0, pc, #4	; (adr r0, 121c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x27c>)
    1218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    121c:	000012e1 	.word	0x000012e1
    1220:	0000131f 	.word	0x0000131f
    1224:	0000131f 	.word	0x0000131f
    1228:	0000131f 	.word	0x0000131f
    122c:	0000131f 	.word	0x0000131f
    1230:	0000131f 	.word	0x0000131f
    1234:	0000131f 	.word	0x0000131f
    1238:	0000131f 	.word	0x0000131f
    123c:	0000131f 	.word	0x0000131f
    1240:	0000117d 	.word	0x0000117d
    1244:	0000131f 	.word	0x0000131f
    1248:	000012e1 	.word	0x000012e1
    124c:	000012a1 	.word	0x000012a1
    1250:	0000117d 	.word	0x0000117d
    1254:	0000117d 	.word	0x0000117d
    1258:	0000117d 	.word	0x0000117d
    125c:	0000131f 	.word	0x0000131f
    1260:	000012a1 	.word	0x000012a1
    1264:	0000131f 	.word	0x0000131f
    1268:	0000131f 	.word	0x0000131f
    126c:	0000131f 	.word	0x0000131f
    1270:	0000131f 	.word	0x0000131f
    1274:	000012e9 	.word	0x000012e9
    1278:	000012e1 	.word	0x000012e1
    127c:	00001305 	.word	0x00001305
    1280:	0000131f 	.word	0x0000131f
    1284:	0000131f 	.word	0x0000131f
    1288:	00001305 	.word	0x00001305
    128c:	0000131f 	.word	0x0000131f
    1290:	000012e1 	.word	0x000012e1
    1294:	0000131f 	.word	0x0000131f
    1298:	0000131f 	.word	0x0000131f
    129c:	000012e1 	.word	0x000012e1
		conv->specifier_cat = SPECIFIER_SINT;
    12a0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    12a4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    12a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    12aa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12ae:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    12b0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    12b4:	bf02      	ittt	eq
    12b6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    12ba:	f041 0101 	orreq.w	r1, r1, #1
    12be:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    12c2:	2a63      	cmp	r2, #99	; 0x63
    12c4:	d131      	bne.n	132a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    12c6:	3b00      	subs	r3, #0
    12c8:	bf18      	it	ne
    12ca:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    12cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    12d0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    12d4:	430b      	orrs	r3, r1
    12d6:	f363 0241 	bfi	r2, r3, #1, #1
    12da:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    12de:	e6d8      	b.n	1092 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xf2>
		conv->specifier_cat = SPECIFIER_UINT;
    12e0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    12e4:	2002      	movs	r0, #2
    12e6:	e7de      	b.n	12a6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x306>
		conv->specifier_cat = SPECIFIER_PTR;
    12e8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    12ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12f0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    12f4:	2103      	movs	r1, #3
    12f6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12fa:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    12fc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1300:	4143      	adcs	r3, r0
    1302:	e7e3      	b.n	12cc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32c>
		conv->specifier_cat = SPECIFIER_PTR;
    1304:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1308:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    130a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    130e:	f361 0202 	bfi	r2, r1, #0, #3
    1312:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1316:	bf14      	ite	ne
    1318:	2301      	movne	r3, #1
    131a:	2300      	moveq	r3, #0
    131c:	e7d6      	b.n	12cc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32c>
		conv->invalid = true;
    131e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1322:	f043 0301 	orr.w	r3, r3, #1
    1326:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    132a:	2300      	movs	r3, #0
    132c:	e7ce      	b.n	12cc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32c>
		} else if (conv->width_present) {
    132e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1332:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1334:	bfb4      	ite	lt
    1336:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    133a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    133e:	e6ba      	b.n	10b6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x116>
		} else if (conv->prec_present) {
    1340:	079b      	lsls	r3, r3, #30
    1342:	f57f aec7 	bpl.w	10d4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x134>
			precision = conv->prec_value;
    1346:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    134a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    134e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1350:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1354:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1358:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    135c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    135e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1362:	d135      	bne.n	13d0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x430>
			switch (length_mod) {
    1364:	1ecb      	subs	r3, r1, #3
    1366:	2b04      	cmp	r3, #4
    1368:	d822      	bhi.n	13b0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x410>
    136a:	e8df f003 	tbb	[pc, r3]
    136e:	0903      	.short	0x0903
    1370:	2109      	.short	0x2109
    1372:	21          	.byte	0x21
    1373:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1374:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1378:	17da      	asrs	r2, r3, #31
    137a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    137e:	e006      	b.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
					(sint_value_type)va_arg(ap, intmax_t);
    1380:	3407      	adds	r4, #7
    1382:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1386:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    138a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    138e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1392:	f013 0603 	ands.w	r6, r3, #3
    1396:	d059      	beq.n	144c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4ac>
			OUTS(sp, fp);
    1398:	9802      	ldr	r0, [sp, #8]
    139a:	463b      	mov	r3, r7
    139c:	4652      	mov	r2, sl
    139e:	4659      	mov	r1, fp
    13a0:	f004 fe88 	bl	60b4 <outs>
    13a4:	2800      	cmp	r0, #0
    13a6:	f2c0 8146 	blt.w	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    13aa:	4405      	add	r5, r0
			continue;
    13ac:	46ba      	mov	sl, r7
    13ae:	e5d9      	b.n	f64 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13b0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    13b4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13b6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    13ba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    13be:	d102      	bne.n	13c6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x426>
				value->sint = (signed char)value->sint;
    13c0:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    13c4:	e7d8      	b.n	1378 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3d8>
			} else if (length_mod == LENGTH_H) {
    13c6:	2902      	cmp	r1, #2
    13c8:	d1e1      	bne.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
				value->sint = (short)value->sint;
    13ca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    13ce:	e7d3      	b.n	1378 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3d8>
		} else if (specifier_cat == SPECIFIER_UINT) {
    13d0:	2b02      	cmp	r3, #2
    13d2:	d129      	bne.n	1428 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x488>
			switch (length_mod) {
    13d4:	1ecb      	subs	r3, r1, #3
    13d6:	2b04      	cmp	r3, #4
    13d8:	d813      	bhi.n	1402 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x462>
    13da:	e8df f003 	tbb	[pc, r3]
    13de:	0a03      	.short	0x0a03
    13e0:	120a      	.short	0x120a
    13e2:	12          	.byte	0x12
    13e3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    13e4:	6822      	ldr	r2, [r4, #0]
    13e6:	920a      	str	r2, [sp, #40]	; 0x28
    13e8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    13ea:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    13ec:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    13ee:	4604      	mov	r4, r0
    13f0:	e7cd      	b.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
					(uint_value_type)va_arg(ap,
    13f2:	1de0      	adds	r0, r4, #7
    13f4:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    13f8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    13fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1400:	e7f5      	b.n	13ee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x44e>
					(uint_value_type)va_arg(ap, size_t);
    1402:	f854 3b04 	ldr.w	r3, [r4], #4
    1406:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1408:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    140a:	f04f 0300 	mov.w	r3, #0
    140e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1410:	d105      	bne.n	141e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x47e>
				value->uint = (unsigned char)value->uint;
    1412:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1416:	930a      	str	r3, [sp, #40]	; 0x28
    1418:	2300      	movs	r3, #0
    141a:	930b      	str	r3, [sp, #44]	; 0x2c
    141c:	e7b7      	b.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
			} else if (length_mod == LENGTH_H) {
    141e:	2902      	cmp	r1, #2
    1420:	d1b5      	bne.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
				value->uint = (unsigned short)value->uint;
    1422:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1426:	e7f6      	b.n	1416 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x476>
		} else if (specifier_cat == SPECIFIER_FP) {
    1428:	2b04      	cmp	r3, #4
    142a:	d109      	bne.n	1440 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a0>
					(sint_value_type)va_arg(ap, long long);
    142c:	1de3      	adds	r3, r4, #7
    142e:	f023 0307 	bic.w	r3, r3, #7
    1432:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1436:	e9d3 2300 	ldrd	r2, r3, [r3]
    143a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    143e:	e7a6      	b.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1440:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1442:	bf04      	itt	eq
    1444:	f854 3b04 	ldreq.w	r3, [r4], #4
    1448:	930a      	streq	r3, [sp, #40]	; 0x28
    144a:	e7a0      	b.n	138e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ee>
		switch (conv->specifier) {
    144c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1450:	2878      	cmp	r0, #120	; 0x78
    1452:	d8ab      	bhi.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
    1454:	2862      	cmp	r0, #98	; 0x62
    1456:	d822      	bhi.n	149e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4fe>
    1458:	2825      	cmp	r0, #37	; 0x25
    145a:	f43f ad8c 	beq.w	f76 <z_cbvprintf_impl+0x22>
    145e:	2858      	cmp	r0, #88	; 0x58
    1460:	d1a4      	bne.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1462:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1466:	9300      	str	r3, [sp, #0]
    1468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    146c:	ab04      	add	r3, sp, #16
    146e:	aa0c      	add	r2, sp, #48	; 0x30
    1470:	f004 fdda 	bl	6028 <encode_uint>
    1474:	4682      	mov	sl, r0
			if (precision >= 0) {
    1476:	f1b8 0f00 	cmp.w	r8, #0
    147a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    147e:	db0c      	blt.n	149a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4fa>
				conv->flag_zero = false;
    1480:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1484:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1488:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    148c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    148e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1492:	d902      	bls.n	149a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4fa>
					conv->pad0_value = precision - (int)len;
    1494:	eba8 0303 	sub.w	r3, r8, r3
    1498:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    149a:	4680      	mov	r8, r0
    149c:	e03e      	b.n	151c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x57c>
		switch (conv->specifier) {
    149e:	3863      	subs	r0, #99	; 0x63
    14a0:	2815      	cmp	r0, #21
    14a2:	d883      	bhi.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
    14a4:	a201      	add	r2, pc, #4	; (adr r2, 14ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x50c>)
    14a6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    14aa:	bf00      	nop
    14ac:	0000152d 	.word	0x0000152d
    14b0:	00001591 	.word	0x00001591
    14b4:	000013ad 	.word	0x000013ad
    14b8:	000013ad 	.word	0x000013ad
    14bc:	000013ad 	.word	0x000013ad
    14c0:	000013ad 	.word	0x000013ad
    14c4:	00001591 	.word	0x00001591
    14c8:	000013ad 	.word	0x000013ad
    14cc:	000013ad 	.word	0x000013ad
    14d0:	000013ad 	.word	0x000013ad
    14d4:	000013ad 	.word	0x000013ad
    14d8:	000015eb 	.word	0x000015eb
    14dc:	000015b9 	.word	0x000015b9
    14e0:	000015bd 	.word	0x000015bd
    14e4:	000013ad 	.word	0x000013ad
    14e8:	000013ad 	.word	0x000013ad
    14ec:	00001505 	.word	0x00001505
    14f0:	000013ad 	.word	0x000013ad
    14f4:	000015b9 	.word	0x000015b9
    14f8:	000013ad 	.word	0x000013ad
    14fc:	000013ad 	.word	0x000013ad
    1500:	000015b9 	.word	0x000015b9
			if (precision >= 0) {
    1504:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1508:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    150c:	db0a      	blt.n	1524 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x584>
				len = strnlen(bps, precision);
    150e:	4641      	mov	r1, r8
    1510:	4650      	mov	r0, sl
    1512:	f004 ff44 	bl	639e <strnlen>
			bpe = bps + len;
    1516:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    151a:	2600      	movs	r6, #0
		if (bps == NULL) {
    151c:	f1ba 0f00 	cmp.w	sl, #0
    1520:	d10c      	bne.n	153c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x59c>
    1522:	e743      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
				len = strlen(bps);
    1524:	4650      	mov	r0, sl
    1526:	f004 ff33 	bl	6390 <strlen>
    152a:	e7f4      	b.n	1516 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x576>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    152c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    152e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1532:	2600      	movs	r6, #0
			bps = buf;
    1534:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1538:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    153c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1540:	b106      	cbz	r6, 1544 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5a4>
			nj_len += 1U;
    1542:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1544:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1548:	06d0      	lsls	r0, r2, #27
    154a:	d568      	bpl.n	161e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x67e>
			nj_len += 2U;
    154c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    154e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1550:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1552:	bf48      	it	mi
    1554:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1556:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1558:	bf48      	it	mi
    155a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    155c:	f1b9 0f00 	cmp.w	r9, #0
    1560:	dd76      	ble.n	1650 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6b0>
			if (!conv->flag_dash) {
    1562:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1566:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    156a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    156e:	9303      	str	r3, [sp, #12]
    1570:	0753      	lsls	r3, r2, #29
    1572:	d46d      	bmi.n	1650 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6b0>
				if (conv->flag_zero) {
    1574:	0650      	lsls	r0, r2, #25
    1576:	d561      	bpl.n	163c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x69c>
					if (sign != 0) {
    1578:	b146      	cbz	r6, 158c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5ec>
						OUTC(sign);
    157a:	9b02      	ldr	r3, [sp, #8]
    157c:	4659      	mov	r1, fp
    157e:	4630      	mov	r0, r6
    1580:	4798      	blx	r3
    1582:	2800      	cmp	r0, #0
    1584:	db57      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
						sign = 0;
    1586:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1588:	3501      	adds	r5, #1
						sign = 0;
    158a:	461e      	mov	r6, r3
					pad = '0';
    158c:	2330      	movs	r3, #48	; 0x30
    158e:	e056      	b.n	163e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x69e>
			if (conv->flag_plus) {
    1590:	071e      	lsls	r6, r3, #28
    1592:	d40f      	bmi.n	15b4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x614>
				sign = ' ';
    1594:	f013 0610 	ands.w	r6, r3, #16
    1598:	bf18      	it	ne
    159a:	2620      	movne	r6, #32
			sint = value->sint;
    159c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    15a0:	2b00      	cmp	r3, #0
    15a2:	f6bf af5e 	bge.w	1462 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c2>
				value->uint = (uint_value_type)-sint;
    15a6:	4252      	negs	r2, r2
    15a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    15ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    15b0:	262d      	movs	r6, #45	; 0x2d
    15b2:	e756      	b.n	1462 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c2>
				sign = '+';
    15b4:	262b      	movs	r6, #43	; 0x2b
    15b6:	e7f1      	b.n	159c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5fc>
		switch (conv->specifier) {
    15b8:	2600      	movs	r6, #0
    15ba:	e752      	b.n	1462 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c2>
			if (value->ptr != NULL) {
    15bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    15be:	b340      	cbz	r0, 1612 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x672>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    15c4:	9300      	str	r3, [sp, #0]
    15c6:	aa0c      	add	r2, sp, #48	; 0x30
    15c8:	ab04      	add	r3, sp, #16
    15ca:	2100      	movs	r1, #0
    15cc:	f004 fd2c 	bl	6028 <encode_uint>
				conv->altform_0c = true;
    15d0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    15d4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    15d8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    15dc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15e0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    15e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    15e6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    15e8:	e745      	b.n	1476 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4d6>
				store_count(conv, value->ptr, count);
    15ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    15ec:	2907      	cmp	r1, #7
    15ee:	f63f aedd 	bhi.w	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
    15f2:	e8df f001 	tbb	[pc, r1]
    15f6:	040c      	.short	0x040c
    15f8:	08080c06 	.word	0x08080c06
    15fc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    15fe:	701d      	strb	r5, [r3, #0]
		break;
    1600:	e6d4      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
		*(short *)dp = (short)count;
    1602:	801d      	strh	r5, [r3, #0]
		break;
    1604:	e6d2      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
		*(intmax_t *)dp = (intmax_t)count;
    1606:	17ea      	asrs	r2, r5, #31
    1608:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    160c:	e6ce      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    160e:	601d      	str	r5, [r3, #0]
		break;
    1610:	e6cc      	b.n	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
			bps = "(nil)";
    1612:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 16dc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x73c>
    1616:	4606      	mov	r6, r0
			bpe = bps + 5;
    1618:	f10a 0805 	add.w	r8, sl, #5
    161c:	e78e      	b.n	153c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x59c>
		} else if (conv->altform_0) {
    161e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1620:	bf48      	it	mi
    1622:	3301      	addmi	r3, #1
    1624:	e793      	b.n	154e <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5ae>
					OUTC(pad);
    1626:	4618      	mov	r0, r3
    1628:	9303      	str	r3, [sp, #12]
    162a:	4659      	mov	r1, fp
    162c:	9b02      	ldr	r3, [sp, #8]
    162e:	4798      	blx	r3
    1630:	2800      	cmp	r0, #0
    1632:	9b03      	ldr	r3, [sp, #12]
    1634:	da04      	bge.n	1640 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6a0>
#undef OUTS
#undef OUTC
}
    1636:	b011      	add	sp, #68	; 0x44
    1638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    163c:	2320      	movs	r3, #32
    163e:	444d      	add	r5, r9
    1640:	464a      	mov	r2, r9
				while (width-- > 0) {
    1642:	2a00      	cmp	r2, #0
    1644:	eba5 0109 	sub.w	r1, r5, r9
    1648:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    164c:	dceb      	bgt.n	1626 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x686>
    164e:	460d      	mov	r5, r1
		if (sign != 0) {
    1650:	b136      	cbz	r6, 1660 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6c0>
			OUTC(sign);
    1652:	9b02      	ldr	r3, [sp, #8]
    1654:	4659      	mov	r1, fp
    1656:	4630      	mov	r0, r6
    1658:	4798      	blx	r3
    165a:	2800      	cmp	r0, #0
    165c:	dbeb      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    165e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1660:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1664:	06d9      	lsls	r1, r3, #27
    1666:	d401      	bmi.n	166c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6cc>
    1668:	071a      	lsls	r2, r3, #28
    166a:	d506      	bpl.n	167a <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6da>
				OUTC('0');
    166c:	9b02      	ldr	r3, [sp, #8]
    166e:	4659      	mov	r1, fp
    1670:	2030      	movs	r0, #48	; 0x30
    1672:	4798      	blx	r3
    1674:	2800      	cmp	r0, #0
    1676:	dbde      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    1678:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    167a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    167e:	06db      	lsls	r3, r3, #27
    1680:	d507      	bpl.n	1692 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6f2>
				OUTC(conv->specifier);
    1682:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1686:	9b02      	ldr	r3, [sp, #8]
    1688:	4659      	mov	r1, fp
    168a:	4798      	blx	r3
    168c:	2800      	cmp	r0, #0
    168e:	dbd2      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    1690:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1692:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1694:	442e      	add	r6, r5
    1696:	1b73      	subs	r3, r6, r5
    1698:	2b00      	cmp	r3, #0
    169a:	dc16      	bgt.n	16ca <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x72a>
			OUTS(bps, bpe);
    169c:	9802      	ldr	r0, [sp, #8]
    169e:	4643      	mov	r3, r8
    16a0:	4652      	mov	r2, sl
    16a2:	4659      	mov	r1, fp
    16a4:	f004 fd06 	bl	60b4 <outs>
    16a8:	2800      	cmp	r0, #0
    16aa:	dbc4      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    16ac:	4405      	add	r5, r0
		while (width > 0) {
    16ae:	44a9      	add	r9, r5
    16b0:	eba9 0305 	sub.w	r3, r9, r5
    16b4:	2b00      	cmp	r3, #0
    16b6:	f77f ae79 	ble.w	13ac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x40c>
			OUTC(' ');
    16ba:	9b02      	ldr	r3, [sp, #8]
    16bc:	4659      	mov	r1, fp
    16be:	2020      	movs	r0, #32
    16c0:	4798      	blx	r3
    16c2:	2800      	cmp	r0, #0
    16c4:	dbb7      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    16c6:	3501      	adds	r5, #1
			--width;
    16c8:	e7f2      	b.n	16b0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x710>
				OUTC('0');
    16ca:	9b02      	ldr	r3, [sp, #8]
    16cc:	4659      	mov	r1, fp
    16ce:	2030      	movs	r0, #48	; 0x30
    16d0:	4798      	blx	r3
    16d2:	2800      	cmp	r0, #0
    16d4:	dbaf      	blt.n	1636 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x696>
    16d6:	3501      	adds	r5, #1
    16d8:	e7dd      	b.n	1696 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6f6>
    16da:	bf00      	nop
    16dc:	00007ec1 	.word	0x00007ec1

000016e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    16e0:	f001 bf8c 	b.w	35fc <SystemInit>

000016e4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    16e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16e8:	4605      	mov	r5, r0
    16ea:	f04f 0320 	mov.w	r3, #32
    16ee:	f3ef 8611 	mrs	r6, BASEPRI
    16f2:	f383 8812 	msr	BASEPRI_MAX, r3
    16f6:	f3bf 8f6f 	isb	sy
	return list->head;
    16fa:	4b0e      	ldr	r3, [pc, #56]	; (1734 <pm_state_notify+0x50>)
    16fc:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    16fe:	b19c      	cbz	r4, 1728 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1700:	4f0d      	ldr	r7, [pc, #52]	; (1738 <pm_state_notify+0x54>)
    1702:	f8df 8038 	ldr.w	r8, [pc, #56]	; 173c <pm_state_notify+0x58>
    1706:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    170a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    170e:	2d00      	cmp	r5, #0
    1710:	bf08      	it	eq
    1712:	4613      	moveq	r3, r2
		if (callback) {
    1714:	b12b      	cbz	r3, 1722 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1716:	f898 2014 	ldrb.w	r2, [r8, #20]
    171a:	fb09 f202 	mul.w	r2, r9, r2
    171e:	5cb8      	ldrb	r0, [r7, r2]
    1720:	4798      	blx	r3
	return node->next;
    1722:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1724:	2c00      	cmp	r4, #0
    1726:	d1f0      	bne.n	170a <pm_state_notify+0x26>
	__asm__ volatile(
    1728:	f386 8811 	msr	BASEPRI, r6
    172c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1734:	20000374 	.word	0x20000374
    1738:	20000388 	.word	0x20000388
    173c:	2000055c 	.word	0x2000055c

00001740 <pm_system_resume>:

void pm_system_resume(void)
{
    1740:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    1742:	4b1a      	ldr	r3, [pc, #104]	; (17ac <pm_system_resume+0x6c>)
    1744:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1746:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    174a:	f004 031f 	and.w	r3, r4, #31
    174e:	2201      	movs	r2, #1
    1750:	409a      	lsls	r2, r3
    1752:	4b17      	ldr	r3, [pc, #92]	; (17b0 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1754:	0961      	lsrs	r1, r4, #5
    1756:	43d0      	mvns	r0, r2
    1758:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    175c:	e853 1f00 	ldrex	r1, [r3]
    1760:	ea01 0500 	and.w	r5, r1, r0
    1764:	e843 5c00 	strex	ip, r5, [r3]
    1768:	f1bc 0f00 	cmp.w	ip, #0
    176c:	d1f6      	bne.n	175c <pm_system_resume+0x1c>
    176e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1772:	4211      	tst	r1, r2
    1774:	d013      	beq.n	179e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1776:	4b0f      	ldr	r3, [pc, #60]	; (17b4 <pm_system_resume+0x74>)
    1778:	4d0f      	ldr	r5, [pc, #60]	; (17b8 <pm_system_resume+0x78>)
    177a:	b18b      	cbz	r3, 17a0 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    177c:	230c      	movs	r3, #12
    177e:	4363      	muls	r3, r4
    1780:	18ea      	adds	r2, r5, r3
    1782:	5ce8      	ldrb	r0, [r5, r3]
    1784:	7851      	ldrb	r1, [r2, #1]
    1786:	f004 fe51 	bl	642c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    178a:	2000      	movs	r0, #0
    178c:	f7ff ffaa 	bl	16e4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1790:	230c      	movs	r3, #12
    1792:	435c      	muls	r4, r3
    1794:	192a      	adds	r2, r5, r4
    1796:	2300      	movs	r3, #0
    1798:	512b      	str	r3, [r5, r4]
    179a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    179e:	bd38      	pop	{r3, r4, r5, pc}
    17a0:	f383 8811 	msr	BASEPRI, r3
    17a4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    17a8:	e7ef      	b.n	178a <pm_system_resume+0x4a>
    17aa:	bf00      	nop
    17ac:	2000055c 	.word	0x2000055c
    17b0:	20000394 	.word	0x20000394
    17b4:	0000642d 	.word	0x0000642d
    17b8:	20000388 	.word	0x20000388

000017bc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    17bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    17c0:	4b33      	ldr	r3, [pc, #204]	; (1890 <pm_system_suspend+0xd4>)
{
    17c2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    17c4:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    17c6:	f04f 0320 	mov.w	r3, #32
    17ca:	f3ef 8811 	mrs	r8, BASEPRI
    17ce:	f383 8812 	msr	BASEPRI_MAX, r3
    17d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    17d6:	240c      	movs	r4, #12
    17d8:	4b2e      	ldr	r3, [pc, #184]	; (1894 <pm_system_suspend+0xd8>)
    17da:	4e2f      	ldr	r6, [pc, #188]	; (1898 <pm_system_suspend+0xdc>)
    17dc:	436c      	muls	r4, r5
    17de:	191a      	adds	r2, r3, r4
    17e0:	5d19      	ldrb	r1, [r3, r4]
    17e2:	2900      	cmp	r1, #0
    17e4:	d049      	beq.n	187a <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    17e6:	ca07      	ldmia	r2, {r0, r1, r2}
    17e8:	eb06 0c04 	add.w	ip, r6, r4
    17ec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    17f0:	2200      	movs	r2, #0
    17f2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    17f4:	f388 8811 	msr	BASEPRI, r8
    17f8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    17fc:	230c      	movs	r3, #12
    17fe:	436b      	muls	r3, r5
    1800:	18f2      	adds	r2, r6, r3
    1802:	5cf0      	ldrb	r0, [r6, r3]
    1804:	b3b8      	cbz	r0, 1876 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1806:	1c7b      	adds	r3, r7, #1
    1808:	d00f      	beq.n	182a <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    180a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    180e:	4823      	ldr	r0, [pc, #140]	; (189c <pm_system_suspend+0xe0>)
    1810:	4a23      	ldr	r2, [pc, #140]	; (18a0 <pm_system_suspend+0xe4>)
    1812:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1816:	2100      	movs	r1, #0
    1818:	2300      	movs	r3, #0
    181a:	fbec 0104 	umlal	r0, r1, ip, r4
    181e:	f7fe fcbf 	bl	1a0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1822:	2101      	movs	r1, #1
    1824:	1a38      	subs	r0, r7, r0
    1826:	f005 fe88 	bl	753a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    182a:	f003 fd47 	bl	52bc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    182e:	2001      	movs	r0, #1
    1830:	f7ff ff58 	bl	16e4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1834:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1838:	f005 021f 	and.w	r2, r5, #31
    183c:	2101      	movs	r1, #1
    183e:	4091      	lsls	r1, r2
    1840:	4a18      	ldr	r2, [pc, #96]	; (18a4 <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1842:	096b      	lsrs	r3, r5, #5
    1844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1848:	e853 2f00 	ldrex	r2, [r3]
    184c:	430a      	orrs	r2, r1
    184e:	e843 2000 	strex	r0, r2, [r3]
    1852:	2800      	cmp	r0, #0
    1854:	d1f8      	bne.n	1848 <pm_system_suspend+0x8c>
    1856:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <pm_system_suspend+0xec>)
    185c:	b133      	cbz	r3, 186c <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    185e:	200c      	movs	r0, #12
    1860:	4368      	muls	r0, r5
    1862:	1833      	adds	r3, r6, r0
    1864:	5c30      	ldrb	r0, [r6, r0]
    1866:	7859      	ldrb	r1, [r3, #1]
    1868:	f004 fdd4 	bl	6414 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    186c:	f7ff ff68 	bl	1740 <pm_system_resume>
	k_sched_unlock();
    1870:	f003 fef4 	bl	565c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1874:	2001      	movs	r0, #1
}
    1876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    187a:	4601      	mov	r1, r0
    187c:	4628      	mov	r0, r5
    187e:	f000 f815 	bl	18ac <pm_policy_next_state>
		if (info != NULL) {
    1882:	2800      	cmp	r0, #0
    1884:	d0b6      	beq.n	17f4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1886:	c807      	ldmia	r0, {r0, r1, r2}
    1888:	4434      	add	r4, r6
    188a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    188e:	e7b1      	b.n	17f4 <pm_system_suspend+0x38>
    1890:	2000055c 	.word	0x2000055c
    1894:	2000037c 	.word	0x2000037c
    1898:	20000388 	.word	0x20000388
    189c:	000f423f 	.word	0x000f423f
    18a0:	000f4240 	.word	0x000f4240
    18a4:	20000394 	.word	0x20000394
    18a8:	00006415 	.word	0x00006415

000018ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    18ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18b0:	b085      	sub	sp, #20
    18b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    18b4:	a903      	add	r1, sp, #12
    18b6:	f000 f841 	bl	193c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    18ba:	9b03      	ldr	r3, [sp, #12]
    18bc:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    18be:	4b1c      	ldr	r3, [pc, #112]	; (1930 <pm_policy_next_state+0x84>)
    18c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1934 <pm_policy_next_state+0x88>
    18c4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    18c8:	1e44      	subs	r4, r0, #1
    18ca:	b224      	sxth	r4, r4
    18cc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    18d0:	f04f 0b00 	mov.w	fp, #0
    18d4:	1c63      	adds	r3, r4, #1
    18d6:	d104      	bne.n	18e2 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    18d8:	2500      	movs	r5, #0
}
    18da:	4628      	mov	r0, r5
    18dc:	b005      	add	sp, #20
    18de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    18e2:	9b01      	ldr	r3, [sp, #4]
    18e4:	4a14      	ldr	r2, [pc, #80]	; (1938 <pm_policy_next_state+0x8c>)
    18e6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    18ea:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    18ee:	46c4      	mov	ip, r8
    18f0:	6868      	ldr	r0, [r5, #4]
    18f2:	4659      	mov	r1, fp
    18f4:	fbe0 c107 	umlal	ip, r1, r0, r7
    18f8:	2300      	movs	r3, #0
    18fa:	4660      	mov	r0, ip
    18fc:	f7fe fc50 	bl	1a0 <__aeabi_uldivmod>
    1900:	4681      	mov	r9, r0
    1902:	68a8      	ldr	r0, [r5, #8]
    1904:	4a0c      	ldr	r2, [pc, #48]	; (1938 <pm_policy_next_state+0x8c>)
    1906:	46c4      	mov	ip, r8
    1908:	4659      	mov	r1, fp
    190a:	fbe0 c107 	umlal	ip, r1, r0, r7
    190e:	2300      	movs	r3, #0
    1910:	4660      	mov	r0, ip
    1912:	f7fe fc45 	bl	1a0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1916:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    191a:	d001      	beq.n	1920 <pm_policy_next_state+0x74>
    191c:	4582      	cmp	sl, r0
    191e:	d904      	bls.n	192a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1920:	1c72      	adds	r2, r6, #1
    1922:	d0da      	beq.n	18da <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    1924:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    1926:	42b0      	cmp	r0, r6
    1928:	d9d7      	bls.n	18da <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    192a:	3c01      	subs	r4, #1
    192c:	b224      	sxth	r4, r4
    192e:	e7d1      	b.n	18d4 <pm_policy_next_state+0x28>
    1930:	20000004 	.word	0x20000004
    1934:	000f423f 	.word	0x000f423f
    1938:	000f4240 	.word	0x000f4240

0000193c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    193c:	b908      	cbnz	r0, 1942 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    193e:	4b02      	ldr	r3, [pc, #8]	; (1948 <pm_state_cpu_get_all+0xc>)
    1940:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1942:	2000      	movs	r0, #0
    1944:	4770      	bx	lr
    1946:	bf00      	nop
    1948:	00007914 	.word	0x00007914

0000194c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    194c:	4901      	ldr	r1, [pc, #4]	; (1954 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    194e:	2210      	movs	r2, #16
	str	r2, [r1]
    1950:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1952:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1954:	e000ed10 	.word	0xe000ed10

00001958 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1958:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    195a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    195c:	f380 8811 	msr	BASEPRI, r0
	isb
    1960:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1964:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1968:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    196a:	b662      	cpsie	i
	isb
    196c:	f3bf 8f6f 	isb	sy

	bx	lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1974:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1976:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1978:	f381 8811 	msr	BASEPRI, r1

	wfe
    197c:	bf20      	wfe

	msr	BASEPRI, r0
    197e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1982:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1984:	4770      	bx	lr
    1986:	bf00      	nop

00001988 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1988:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    198a:	2b00      	cmp	r3, #0
    198c:	db08      	blt.n	19a0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    198e:	2201      	movs	r2, #1
    1990:	f000 001f 	and.w	r0, r0, #31
    1994:	fa02 f000 	lsl.w	r0, r2, r0
    1998:	095b      	lsrs	r3, r3, #5
    199a:	4a02      	ldr	r2, [pc, #8]	; (19a4 <arch_irq_enable+0x1c>)
    199c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	e000e100 	.word	0xe000e100

000019a8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    19a8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    19aa:	2b00      	cmp	r3, #0
    19ac:	db0d      	blt.n	19ca <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ae:	2201      	movs	r2, #1
    19b0:	095b      	lsrs	r3, r3, #5
    19b2:	f000 001f 	and.w	r0, r0, #31
    19b6:	fa02 f000 	lsl.w	r0, r2, r0
    19ba:	3320      	adds	r3, #32
    19bc:	4a03      	ldr	r2, [pc, #12]	; (19cc <arch_irq_disable+0x24>)
    19be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    19c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19c6:	f3bf 8f6f 	isb	sy
}
    19ca:	4770      	bx	lr
    19cc:	e000e100 	.word	0xe000e100

000019d0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    19d0:	4b05      	ldr	r3, [pc, #20]	; (19e8 <arch_irq_is_enabled+0x18>)
    19d2:	0942      	lsrs	r2, r0, #5
    19d4:	f000 001f 	and.w	r0, r0, #31
    19d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19dc:	2301      	movs	r3, #1
    19de:	fa03 f000 	lsl.w	r0, r3, r0
}
    19e2:	4010      	ands	r0, r2
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	e000e100 	.word	0xe000e100

000019ec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19ec:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19ee:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19f0:	bfa8      	it	ge
    19f2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    19f6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19fa:	bfb8      	it	lt
    19fc:	4b06      	ldrlt	r3, [pc, #24]	; (1a18 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19fe:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1a02:	bfac      	ite	ge
    1a04:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a08:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a0c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a0e:	bfb4      	ite	lt
    1a10:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a12:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1a16:	4770      	bx	lr
    1a18:	e000ed14 	.word	0xe000ed14

00001a1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a1c:	bf30      	wfi
    b z_SysNmiOnReset
    1a1e:	f7ff bffd 	b.w	1a1c <z_SysNmiOnReset>
    1a22:	bf00      	nop

00001a24 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a24:	4a0f      	ldr	r2, [pc, #60]	; (1a64 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1a26:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a28:	4b0f      	ldr	r3, [pc, #60]	; (1a68 <z_arm_prep_c+0x44>)
    1a2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a2e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1a44:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1a48:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1a4c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1a50:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a54:	f003 f84e 	bl	4af4 <z_bss_zero>
	z_data_copy();
    1a58:	f003 ff42 	bl	58e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a5c:	f000 f99c 	bl	1d98 <z_arm_interrupt_init>
	z_cstart();
    1a60:	f003 f888 	bl	4b74 <z_cstart>
    1a64:	00000000 	.word	0x00000000
    1a68:	e000ed00 	.word	0xe000ed00

00001a6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a6c:	4a09      	ldr	r2, [pc, #36]	; (1a94 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a6e:	490a      	ldr	r1, [pc, #40]	; (1a98 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a72:	6809      	ldr	r1, [r1, #0]
    1a74:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a76:	4909      	ldr	r1, [pc, #36]	; (1a9c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a78:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a7a:	684b      	ldr	r3, [r1, #4]
    1a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a80:	604b      	str	r3, [r1, #4]
    1a82:	2300      	movs	r3, #0
    1a84:	f383 8811 	msr	BASEPRI, r3
    1a88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a8c:	6893      	ldr	r3, [r2, #8]
}
    1a8e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop
    1a94:	2000055c 	.word	0x2000055c
    1a98:	00007b4c 	.word	0x00007b4c
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1aa0:	490f      	ldr	r1, [pc, #60]	; (1ae0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1aa2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1aa4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1aa8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1aaa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1aae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ab2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1ab4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ab8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1abc:	4f09      	ldr	r7, [pc, #36]	; (1ae4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1abe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1ac2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ac4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1ac6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1ac8:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
    1aca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1acc:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1ace:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ad2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1ad6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1ada:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1ade:	4770      	bx	lr
    ldr r1, =_kernel
    1ae0:	2000055c 	.word	0x2000055c
    ldr v4, =_SCS_ICSR
    1ae4:	e000ed04 	.word	0xe000ed04

00001ae8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ae8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1aec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1aee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1af2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1af6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1af8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1afc:	2902      	cmp	r1, #2
    beq _oops
    1afe:	d0ff      	beq.n	1b00 <_oops>

00001b00 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1b00:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1b02:	f004 fc36 	bl	6372 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1b06:	bd01      	pop	{r0, pc}

00001b08 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1b08:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1b0c:	9b00      	ldr	r3, [sp, #0]
    1b0e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1b12:	490a      	ldr	r1, [pc, #40]	; (1b3c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b1a:	9b02      	ldr	r3, [sp, #8]
    1b1c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b20:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b28:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b2c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b30:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b32:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1b34:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1b36:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	00006015 	.word	0x00006015

00001b40 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1b40:	4b07      	ldr	r3, [pc, #28]	; (1b60 <arch_switch_to_main_thread+0x20>)
    1b42:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1b44:	4610      	mov	r0, r2
    1b46:	f381 8809 	msr	PSP, r1
    1b4a:	2100      	movs	r1, #0
    1b4c:	b663      	cpsie	if
    1b4e:	f381 8811 	msr	BASEPRI, r1
    1b52:	f3bf 8f6f 	isb	sy
    1b56:	2200      	movs	r2, #0
    1b58:	2300      	movs	r3, #0
    1b5a:	f004 fa5b 	bl	6014 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b5e:	bf00      	nop
    1b60:	2000055c 	.word	0x2000055c

00001b64 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b68:	4a0b      	ldr	r2, [pc, #44]	; (1b98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b6a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b6e:	bf1e      	ittt	ne
	movne	r1, #0
    1b70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b72:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b74:	f005 fb7e 	blne	7274 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1b82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1b86:	4905      	ldr	r1, [pc, #20]	; (1b9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1b88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1b8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1b8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1b8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1b92:	4903      	ldr	r1, [pc, #12]	; (1ba0 <_isr_wrapper+0x3c>)
	bx r1
    1b94:	4708      	bx	r1
    1b96:	0000      	.short	0x0000
	ldr r2, =_kernel
    1b98:	2000055c 	.word	0x2000055c
	ldr r1, =_sw_isr_table
    1b9c:	0000772c 	.word	0x0000772c
	ldr r1, =z_arm_int_exit
    1ba0:	00001ba5 	.word	0x00001ba5

00001ba4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ba6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ba8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1baa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1bac:	d003      	beq.n	1bb6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1bae:	4903      	ldr	r1, [pc, #12]	; (1bbc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1bb4:	600a      	str	r2, [r1, #0]

00001bb6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1bb6:	4770      	bx	lr
	ldr r3, =_kernel
    1bb8:	2000055c 	.word	0x2000055c
	ldr r1, =_SCS_ICSR
    1bbc:	e000ed04 	.word	0xe000ed04

00001bc0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1bc0:	4b0d      	ldr	r3, [pc, #52]	; (1bf8 <bus_fault.constprop.0+0x38>)
    1bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bc8:	0592      	lsls	r2, r2, #22
    1bca:	d508      	bpl.n	1bde <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bd0:	0412      	lsls	r2, r2, #16
    1bd2:	d504      	bpl.n	1bde <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1bd4:	b118      	cbz	r0, 1bde <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1bdc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <bus_fault.constprop.0+0x38>)
    1be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1be4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1be6:	bf58      	it	pl
    1be8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1bec:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1bee:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1bf2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1bf4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1bf6:	4770      	bx	lr
    1bf8:	e000ed00 	.word	0xe000ed00

00001bfc <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1bfc:	4b12      	ldr	r3, [pc, #72]	; (1c48 <mem_manage_fault.constprop.0+0x4c>)
    1bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c04:	0792      	lsls	r2, r2, #30
    1c06:	d508      	bpl.n	1c1a <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    1c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c0c:	0612      	lsls	r2, r2, #24
    1c0e:	d504      	bpl.n	1c1a <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    1c10:	b118      	cbz	r0, 1c1a <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c18:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1c1a:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <mem_manage_fault.constprop.0+0x4c>)
    1c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c22:	06d0      	lsls	r0, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c24:	bf58      	it	pl
    1c26:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c2a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c2c:	bf42      	ittt	mi
    1c2e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1c30:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1c34:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c36:	4a04      	ldr	r2, [pc, #16]	; (1c48 <mem_manage_fault.constprop.0+0x4c>)
    1c38:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c3a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c3c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1c40:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c42:	7008      	strb	r0, [r1, #0]
}
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	e000ed00 	.word	0xe000ed00

00001c4c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c4e:	4b47      	ldr	r3, [pc, #284]	; (1d6c <z_arm_fault+0x120>)
    1c50:	685b      	ldr	r3, [r3, #4]
{
    1c52:	b08b      	sub	sp, #44	; 0x2c
    1c54:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c5a:	2500      	movs	r5, #0
    1c5c:	f385 8811 	msr	BASEPRI, r5
    1c60:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c64:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1c68:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1c6c:	d111      	bne.n	1c92 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1c6e:	f002 010c 	and.w	r1, r2, #12
    1c72:	2908      	cmp	r1, #8
    1c74:	d00d      	beq.n	1c92 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c76:	0712      	lsls	r2, r2, #28
    1c78:	d401      	bmi.n	1c7e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1c7a:	4606      	mov	r6, r0
			*nested_exc = true;
    1c7c:	2501      	movs	r5, #1
	*recoverable = false;
    1c7e:	2200      	movs	r2, #0
	switch (fault) {
    1c80:	3b03      	subs	r3, #3
	*recoverable = false;
    1c82:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1c86:	2b03      	cmp	r3, #3
    1c88:	d853      	bhi.n	1d32 <z_arm_fault+0xe6>
    1c8a:	e8df f003 	tbb	[pc, r3]
    1c8e:	5404      	.short	0x5404
    1c90:	5c58      	.short	0x5c58
		return NULL;
    1c92:	462e      	mov	r6, r5
    1c94:	e7f3      	b.n	1c7e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c96:	4b35      	ldr	r3, [pc, #212]	; (1d6c <z_arm_fault+0x120>)
    1c98:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c9a:	f014 0402 	ands.w	r4, r4, #2
    1c9e:	d148      	bne.n	1d32 <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ca2:	2a00      	cmp	r2, #0
    1ca4:	db15      	blt.n	1cd2 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1ca6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1ca8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1cac:	d011      	beq.n	1cd2 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1cae:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cb0:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1cb4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1cb8:	4291      	cmp	r1, r2
    1cba:	d009      	beq.n	1cd0 <z_arm_fault+0x84>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cbe:	b2d2      	uxtb	r2, r2
    1cc0:	b302      	cbz	r2, 1d04 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1cc2:	f10d 0107 	add.w	r1, sp, #7
    1cc6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1cc8:	f7ff ff98 	bl	1bfc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    1ccc:	4604      	mov	r4, r0
		break;
    1cce:	e000      	b.n	1cd2 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    1cd0:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1cd6:	b99b      	cbnz	r3, 1d00 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1cd8:	2220      	movs	r2, #32
    1cda:	4631      	mov	r1, r6
    1cdc:	a802      	add	r0, sp, #8
    1cde:	f004 fb73 	bl	63c8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ce4:	2d00      	cmp	r5, #0
    1ce6:	d03b      	beq.n	1d60 <z_arm_fault+0x114>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1cec:	b922      	cbnz	r2, 1cf8 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1cee:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1cf2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1cf6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1cf8:	a902      	add	r1, sp, #8
    1cfa:	4620      	mov	r0, r4
    1cfc:	f004 fb37 	bl	636e <z_arm_fatal_error>
}
    1d00:	b00b      	add	sp, #44	; 0x2c
    1d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1d04:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1d06:	f417 477f 	ands.w	r7, r7, #65280	; 0xff00
    1d0a:	d005      	beq.n	1d18 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    1d0c:	f10d 0107 	add.w	r1, sp, #7
    1d10:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1d12:	f7ff ff55 	bl	1bc0 <bus_fault.constprop.0>
    1d16:	e7d9      	b.n	1ccc <z_arm_fault+0x80>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1d18:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1d1a:	4915      	ldr	r1, [pc, #84]	; (1d70 <z_arm_fault+0x124>)
    1d1c:	400c      	ands	r4, r1
    1d1e:	d0d8      	beq.n	1cd2 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d2e:	430a      	orrs	r2, r1
    1d30:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d32:	2400      	movs	r4, #0
    1d34:	e7cd      	b.n	1cd2 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d36:	f10d 0107 	add.w	r1, sp, #7
    1d3a:	2000      	movs	r0, #0
    1d3c:	e7c4      	b.n	1cc8 <z_arm_fault+0x7c>
		reason = bus_fault(esf, 0, recoverable);
    1d3e:	f10d 0107 	add.w	r1, sp, #7
    1d42:	2000      	movs	r0, #0
    1d44:	e7e5      	b.n	1d12 <z_arm_fault+0xc6>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d46:	4b09      	ldr	r3, [pc, #36]	; (1d6c <z_arm_fault+0x120>)
    1d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d56:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d5a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d5e:	e7e7      	b.n	1d30 <z_arm_fault+0xe4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d60:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1d64:	f023 0301 	bic.w	r3, r3, #1
    1d68:	e7c5      	b.n	1cf6 <z_arm_fault+0xaa>
    1d6a:	bf00      	nop
    1d6c:	e000ed00 	.word	0xe000ed00
    1d70:	ffff0000 	.word	0xffff0000

00001d74 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1d74:	4a02      	ldr	r2, [pc, #8]	; (1d80 <z_arm_fault_init+0xc>)
    1d76:	6953      	ldr	r3, [r2, #20]
    1d78:	f043 0310 	orr.w	r3, r3, #16
    1d7c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1d7e:	4770      	bx	lr
    1d80:	e000ed00 	.word	0xe000ed00

00001d84 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1d84:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1d88:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1d8c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1d8e:	4672      	mov	r2, lr
	bl z_arm_fault
    1d90:	f7ff ff5c 	bl	1c4c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1d94:	bd01      	pop	{r0, pc}
    1d96:	bf00      	nop

00001d98 <z_arm_interrupt_init>:
    1d98:	4804      	ldr	r0, [pc, #16]	; (1dac <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1d9a:	2300      	movs	r3, #0
    1d9c:	2120      	movs	r1, #32
    1d9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1da0:	3301      	adds	r3, #1
    1da2:	2b30      	cmp	r3, #48	; 0x30
    1da4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1da8:	d1f9      	bne.n	1d9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1daa:	4770      	bx	lr
    1dac:	e000e100 	.word	0xe000e100

00001db0 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1db0:	f7ff fc96 	bl	16e0 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1db4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1db6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1dba:	4808      	ldr	r0, [pc, #32]	; (1ddc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1dc0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1dc2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1dc6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1dca:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1dcc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1dce:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1dd2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1dd6:	f7ff fe25 	bl	1a24 <z_arm_prep_c>
    1dda:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1ddc:	20000b60 	.word	0x20000b60

00001de0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1de0:	4b08      	ldr	r3, [pc, #32]	; (1e04 <z_impl_k_thread_abort+0x24>)
    1de2:	689b      	ldr	r3, [r3, #8]
    1de4:	4283      	cmp	r3, r0
    1de6:	d10b      	bne.n	1e00 <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1de8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1dec:	b143      	cbz	r3, 1e00 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1dee:	4b06      	ldr	r3, [pc, #24]	; (1e08 <z_impl_k_thread_abort+0x28>)
    1df0:	685a      	ldr	r2, [r3, #4]
    1df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1df6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1dfe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1e00:	f003 bcfc 	b.w	57fc <z_thread_abort>
    1e04:	2000055c 	.word	0x2000055c
    1e08:	e000ed00 	.word	0xe000ed00

00001e0c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1e0c:	4b01      	ldr	r3, [pc, #4]	; (1e14 <__stdout_hook_install+0x8>)
    1e0e:	6018      	str	r0, [r3, #0]
}
    1e10:	4770      	bx	lr
    1e12:	bf00      	nop
    1e14:	20000008 	.word	0x20000008

00001e18 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    1e18:	3902      	subs	r1, #2
    1e1a:	2901      	cmp	r1, #1
    1e1c:	d802      	bhi.n	1e24 <z_impl_zephyr_fputc+0xc>
    1e1e:	4b03      	ldr	r3, [pc, #12]	; (1e2c <z_impl_zephyr_fputc+0x14>)
    1e20:	681b      	ldr	r3, [r3, #0]
    1e22:	4718      	bx	r3
}
    1e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e28:	4770      	bx	lr
    1e2a:	bf00      	nop
    1e2c:	20000008 	.word	0x20000008

00001e30 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
    1e30:	b40e      	push	{r1, r2, r3}
    1e32:	b510      	push	{r4, lr}
    1e34:	b087      	sub	sp, #28
    1e36:	ab09      	add	r3, sp, #36	; 0x24
    1e38:	2400      	movs	r4, #0

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    1e3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    1e3e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
    1e42:	9004      	str	r0, [sp, #16]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    1e44:	9105      	str	r1, [sp, #20]
    1e46:	9400      	str	r4, [sp, #0]
    1e48:	a904      	add	r1, sp, #16
    1e4a:	4805      	ldr	r0, [pc, #20]	; (1e60 <sprintf+0x30>)

	va_start(vargs, format);
    1e4c:	9303      	str	r3, [sp, #12]
    1e4e:	f7ff f881 	bl	f54 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    1e52:	9b04      	ldr	r3, [sp, #16]
    1e54:	701c      	strb	r4, [r3, #0]
	return r;
}
    1e56:	b007      	add	sp, #28
    1e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e5c:	b003      	add	sp, #12
    1e5e:	4770      	bx	lr
    1e60:	000063fb 	.word	0x000063fb

00001e64 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    1e64:	b40f      	push	{r0, r1, r2, r3}
    1e66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1e68:	ab06      	add	r3, sp, #24
    1e6a:	2100      	movs	r1, #0
    1e6c:	f853 2b04 	ldr.w	r2, [r3], #4
    1e70:	4805      	ldr	r0, [pc, #20]	; (1e88 <printf+0x24>)
    1e72:	9100      	str	r1, [sp, #0]
    1e74:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    1e76:	9303      	str	r3, [sp, #12]
    1e78:	f7ff f86c 	bl	f54 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    1e7c:	b005      	add	sp, #20
    1e7e:	f85d eb04 	ldr.w	lr, [sp], #4
    1e82:	b004      	add	sp, #16
    1e84:	4770      	bx	lr
    1e86:	bf00      	nop
    1e88:	000063f7 	.word	0x000063f7

00001e8c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1e8c:	f04f 0220 	mov.w	r2, #32
    1e90:	f3ef 8311 	mrs	r3, BASEPRI
    1e94:	f382 8812 	msr	BASEPRI_MAX, r2
    1e98:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1e9c:	4a04      	ldr	r2, [pc, #16]	; (1eb0 <nordicsemi_nrf52_init+0x24>)
    1e9e:	2101      	movs	r1, #1
    1ea0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1ea4:	f383 8811 	msr	BASEPRI, r3
    1ea8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1eac:	2000      	movs	r0, #0
    1eae:	4770      	bx	lr
    1eb0:	4001e000 	.word	0x4001e000

00001eb4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1eb4:	b120      	cbz	r0, 1ec0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1eb8:	0180      	lsls	r0, r0, #6
    1eba:	f043 0301 	orr.w	r3, r3, #1
    1ebe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1ec0:	4770      	bx	lr
    1ec2:	bf00      	nop
    1ec4:	00007900 	.word	0x00007900

00001ec8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1ec8:	4b08      	ldr	r3, [pc, #32]	; (1eec <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1eca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1ecc:	1ac3      	subs	r3, r0, r3
{
    1ece:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ed0:	4907      	ldr	r1, [pc, #28]	; (1ef0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1ed2:	109b      	asrs	r3, r3, #2
{
    1ed4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ed6:	4359      	muls	r1, r3
    1ed8:	4806      	ldr	r0, [pc, #24]	; (1ef4 <onoff_stop+0x2c>)
    1eda:	2240      	movs	r2, #64	; 0x40
    1edc:	f004 fac8 	bl	6470 <stop>
	notify(mgr, res);
    1ee0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ee2:	4601      	mov	r1, r0
	notify(mgr, res);
    1ee4:	4620      	mov	r0, r4
}
    1ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1eea:	4718      	bx	r3
    1eec:	200003a8 	.word	0x200003a8
    1ef0:	b6db6db7 	.word	0xb6db6db7
    1ef4:	0000763c 	.word	0x0000763c

00001ef8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ef8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1efa:	4c0c      	ldr	r4, [pc, #48]	; (1f2c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1efc:	4a0c      	ldr	r2, [pc, #48]	; (1f30 <onoff_start+0x38>)
    1efe:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1f00:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f02:	9300      	str	r3, [sp, #0]
{
    1f04:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f06:	460b      	mov	r3, r1
    1f08:	490a      	ldr	r1, [pc, #40]	; (1f34 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1f0a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f0c:	4361      	muls	r1, r4
{
    1f0e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f10:	4809      	ldr	r0, [pc, #36]	; (1f38 <onoff_start+0x40>)
    1f12:	f004 fad9 	bl	64c8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1f16:	1e01      	subs	r1, r0, #0
    1f18:	da05      	bge.n	1f26 <onoff_start+0x2e>
		notify(mgr, err);
    1f1a:	4630      	mov	r0, r6
    1f1c:	462b      	mov	r3, r5
	}
}
    1f1e:	b002      	add	sp, #8
    1f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1f24:	4718      	bx	r3
}
    1f26:	b002      	add	sp, #8
    1f28:	bd70      	pop	{r4, r5, r6, pc}
    1f2a:	bf00      	nop
    1f2c:	200003a8 	.word	0x200003a8
    1f30:	00006539 	.word	0x00006539
    1f34:	b6db6db7 	.word	0xb6db6db7
    1f38:	0000763c 	.word	0x0000763c

00001f3c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f3c:	2200      	movs	r2, #0
{
    1f3e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f40:	2101      	movs	r1, #1
{
    1f42:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f44:	4610      	mov	r0, r2
    1f46:	f7ff fd51 	bl	19ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1f4a:	4811      	ldr	r0, [pc, #68]	; (1f90 <clk_init+0x54>)
    1f4c:	f001 fc4c 	bl	37e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1f50:	4b10      	ldr	r3, [pc, #64]	; (1f94 <clk_init+0x58>)
    1f52:	4298      	cmp	r0, r3
    1f54:	d118      	bne.n	1f88 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    1f56:	6920      	ldr	r0, [r4, #16]
    1f58:	f000 f9c4 	bl	22e4 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    1f5c:	f005 f835 	bl	6fca <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1f60:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f62:	490d      	ldr	r1, [pc, #52]	; (1f98 <clk_init+0x5c>)
    1f64:	4630      	mov	r0, r6
    1f66:	f003 ffd4 	bl	5f12 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1f6a:	2800      	cmp	r0, #0
    1f6c:	db0b      	blt.n	1f86 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1f6e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f70:	4909      	ldr	r1, [pc, #36]	; (1f98 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f72:	2501      	movs	r5, #1
    1f74:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f76:	f104 001c 	add.w	r0, r4, #28
    1f7a:	f003 ffca 	bl	5f12 <onoff_manager_init>
		if (err < 0) {
    1f7e:	2800      	cmp	r0, #0
    1f80:	db01      	blt.n	1f86 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f82:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1f84:	2000      	movs	r0, #0
}
    1f86:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1f88:	f06f 0004 	mvn.w	r0, #4
    1f8c:	e7fb      	b.n	1f86 <clk_init+0x4a>
    1f8e:	bf00      	nop
    1f90:	00001fd1 	.word	0x00001fd1
    1f94:	0bad0000 	.word	0x0bad0000
    1f98:	00007940 	.word	0x00007940

00001f9c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1f9c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1f9e:	230c      	movs	r3, #12
    1fa0:	4809      	ldr	r0, [pc, #36]	; (1fc8 <clkstarted_handle.constprop.0+0x2c>)
    1fa2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1fa4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1fa6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1fa8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1fac:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1fae:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1fb0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1fb2:	4418      	add	r0, r3
    1fb4:	f004 fa49 	bl	644a <set_on_state>
	if (callback) {
    1fb8:	b12d      	cbz	r5, 1fc6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1fba:	4632      	mov	r2, r6
    1fbc:	462b      	mov	r3, r5
    1fbe:	4803      	ldr	r0, [pc, #12]	; (1fcc <clkstarted_handle.constprop.0+0x30>)
}
    1fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1fc4:	4718      	bx	r3
}
    1fc6:	bd70      	pop	{r4, r5, r6, pc}
    1fc8:	200003a8 	.word	0x200003a8
    1fcc:	0000763c 	.word	0x0000763c

00001fd0 <clock_event_handler>:
	switch (event) {
    1fd0:	2801      	cmp	r0, #1
{
    1fd2:	b510      	push	{r4, lr}
    1fd4:	4604      	mov	r4, r0
	switch (event) {
    1fd6:	d00a      	beq.n	1fee <clock_event_handler+0x1e>
    1fd8:	2803      	cmp	r0, #3
    1fda:	d00c      	beq.n	1ff6 <clock_event_handler+0x26>
    1fdc:	b978      	cbnz	r0, 1ffe <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1fde:	4b08      	ldr	r3, [pc, #32]	; (2000 <clock_event_handler+0x30>)
    1fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1fe2:	075b      	lsls	r3, r3, #29
    1fe4:	d10b      	bne.n	1ffe <clock_event_handler+0x2e>
}
    1fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1fea:	f7ff bfd7 	b.w	1f9c <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    1fee:	f000 f987 	bl	2300 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ff2:	4620      	mov	r0, r4
    1ff4:	e7f7      	b.n	1fe6 <clock_event_handler+0x16>
}
    1ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    1ffa:	f000 b98f 	b.w	231c <z_nrf_clock_calibration_done_handler>
}
    1ffe:	bd10      	pop	{r4, pc}
    2000:	200003a8 	.word	0x200003a8

00002004 <generic_hfclk_start>:
{
    2004:	b508      	push	{r3, lr}
	__asm__ volatile(
    2006:	f04f 0320 	mov.w	r3, #32
    200a:	f3ef 8111 	mrs	r1, BASEPRI
    200e:	f383 8812 	msr	BASEPRI_MAX, r3
    2012:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2016:	4a12      	ldr	r2, [pc, #72]	; (2060 <generic_hfclk_start+0x5c>)
    2018:	6813      	ldr	r3, [r2, #0]
    201a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    201e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2022:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2024:	d00c      	beq.n	2040 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    202a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    202e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2032:	f013 0301 	ands.w	r3, r3, #1
    2036:	d003      	beq.n	2040 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2038:	480a      	ldr	r0, [pc, #40]	; (2064 <generic_hfclk_start+0x60>)
    203a:	f004 fa06 	bl	644a <set_on_state>
			already_started = true;
    203e:	2301      	movs	r3, #1
	__asm__ volatile(
    2040:	f381 8811 	msr	BASEPRI, r1
    2044:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2048:	b123      	cbz	r3, 2054 <generic_hfclk_start+0x50>
}
    204a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    204e:	2000      	movs	r0, #0
    2050:	f7ff bfa4 	b.w	1f9c <clkstarted_handle.constprop.0>
}
    2054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2058:	2001      	movs	r0, #1
    205a:	f004 bfc3 	b.w	6fe4 <nrfx_clock_start>
    205e:	bf00      	nop
    2060:	200003f8 	.word	0x200003f8
    2064:	200003e8 	.word	0x200003e8

00002068 <api_blocking_start>:
{
    2068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    206a:	2200      	movs	r2, #0
    206c:	2301      	movs	r3, #1
    206e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2072:	4a09      	ldr	r2, [pc, #36]	; (2098 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2074:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2078:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    207a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    207e:	f004 fa54 	bl	652a <api_start>
	if (err < 0) {
    2082:	2800      	cmp	r0, #0
    2084:	db05      	blt.n	2092 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    208a:	2300      	movs	r3, #0
    208c:	4668      	mov	r0, sp
    208e:	f002 ff77 	bl	4f80 <z_impl_k_sem_take>
}
    2092:	b005      	add	sp, #20
    2094:	f85d fb04 	ldr.w	pc, [sp], #4
    2098:	00006551 	.word	0x00006551

0000209c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    209c:	4b09      	ldr	r3, [pc, #36]	; (20c4 <generic_hfclk_stop+0x28>)
    209e:	f3bf 8f5b 	dmb	ish
    20a2:	e853 2f00 	ldrex	r2, [r3]
    20a6:	f022 0102 	bic.w	r1, r2, #2
    20aa:	e843 1000 	strex	r0, r1, [r3]
    20ae:	2800      	cmp	r0, #0
    20b0:	d1f7      	bne.n	20a2 <generic_hfclk_stop+0x6>
    20b2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    20b6:	07d3      	lsls	r3, r2, #31
    20b8:	d402      	bmi.n	20c0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    20ba:	2001      	movs	r0, #1
    20bc:	f004 bfca 	b.w	7054 <nrfx_clock_stop>
}
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop
    20c4:	200003f8 	.word	0x200003f8

000020c8 <z_nrf_clock_control_get_onoff>:
}
    20c8:	4a02      	ldr	r2, [pc, #8]	; (20d4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    20ca:	b2c3      	uxtb	r3, r0
}
    20cc:	201c      	movs	r0, #28
    20ce:	fb03 2000 	mla	r0, r3, r0, r2
    20d2:	4770      	bx	lr
    20d4:	200003a8 	.word	0x200003a8

000020d8 <z_nrf_clock_control_lf_on>:
{
    20d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    20da:	4928      	ldr	r1, [pc, #160]	; (217c <z_nrf_clock_control_lf_on+0xa4>)
    20dc:	f3bf 8f5b 	dmb	ish
    20e0:	4606      	mov	r6, r0
    20e2:	2201      	movs	r2, #1
    20e4:	e851 3f00 	ldrex	r3, [r1]
    20e8:	e841 2000 	strex	r0, r2, [r1]
    20ec:	2800      	cmp	r0, #0
    20ee:	d1f9      	bne.n	20e4 <z_nrf_clock_control_lf_on+0xc>
    20f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    20f4:	b933      	cbnz	r3, 2104 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    20f6:	4922      	ldr	r1, [pc, #136]	; (2180 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    20f8:	4822      	ldr	r0, [pc, #136]	; (2184 <z_nrf_clock_control_lf_on+0xac>)
    20fa:	604b      	str	r3, [r1, #4]
    20fc:	60cb      	str	r3, [r1, #12]
    20fe:	608a      	str	r2, [r1, #8]
    2100:	f003 ff1a 	bl	5f38 <onoff_request>
	switch (start_mode) {
    2104:	1e73      	subs	r3, r6, #1
    2106:	2b01      	cmp	r3, #1
    2108:	d820      	bhi.n	214c <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    210a:	f005 f8a8 	bl	725e <k_is_in_isr>
    210e:	4604      	mov	r4, r0
    2110:	b910      	cbnz	r0, 2118 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2112:	4b1d      	ldr	r3, [pc, #116]	; (2188 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	bb53      	cbnz	r3, 216e <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    2118:	f04f 0320 	mov.w	r3, #32
    211c:	f3ef 8511 	mrs	r5, BASEPRI
    2120:	f383 8812 	msr	BASEPRI_MAX, r3
    2124:	f3bf 8f6f 	isb	sy
    2128:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    212a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    212e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2132:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    2136:	03d2      	lsls	r2, r2, #15
    2138:	d509      	bpl.n	214e <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    213a:	079b      	lsls	r3, r3, #30
    213c:	d001      	beq.n	2142 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    213e:	2e01      	cmp	r6, #1
    2140:	d105      	bne.n	214e <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    2142:	b174      	cbz	r4, 2162 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    2144:	f385 8811 	msr	BASEPRI, r5
    2148:	f3bf 8f6f 	isb	sy
}
    214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    214e:	b11c      	cbz	r4, 2158 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2150:	4628      	mov	r0, r5
    2152:	f7ff fc0f 	bl	1974 <arch_cpu_atomic_idle>
}
    2156:	e7ea      	b.n	212e <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    2158:	2100      	movs	r1, #0
    215a:	2021      	movs	r0, #33	; 0x21
    215c:	f003 fb2e 	bl	57bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2160:	e7e5      	b.n	212e <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    2162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2166:	2202      	movs	r2, #2
    2168:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    216c:	e7ee      	b.n	214c <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    216e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2172:	2202      	movs	r2, #2
    2174:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2178:	4605      	mov	r5, r0
}
    217a:	e7d6      	b.n	212a <z_nrf_clock_control_lf_on+0x52>
    217c:	200003fc 	.word	0x200003fc
    2180:	20000398 	.word	0x20000398
    2184:	200003c4 	.word	0x200003c4
    2188:	2000061f 	.word	0x2000061f

0000218c <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    218c:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <start_cal_process+0x38>)
    218e:	f3bf 8f5b 	dmb	ish
    2192:	2201      	movs	r2, #1
    2194:	e853 1f00 	ldrex	r1, [r3]
    2198:	2900      	cmp	r1, #0
    219a:	d103      	bne.n	21a4 <start_cal_process+0x18>
    219c:	e843 2000 	strex	r0, r2, [r3]
    21a0:	2800      	cmp	r0, #0
    21a2:	d1f7      	bne.n	2194 <start_cal_process+0x8>
    21a4:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    21a8:	d10a      	bne.n	21c0 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    21aa:	4907      	ldr	r1, [pc, #28]	; (21c8 <start_cal_process+0x3c>)
    21ac:	2300      	movs	r3, #0
    21ae:	60cb      	str	r3, [r1, #12]
    21b0:	4b06      	ldr	r3, [pc, #24]	; (21cc <start_cal_process+0x40>)
    21b2:	604b      	str	r3, [r1, #4]
    21b4:	2303      	movs	r3, #3
    21b6:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <start_cal_process+0x44>)
    21ba:	6818      	ldr	r0, [r3, #0]
    21bc:	f003 bebc 	b.w	5f38 <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    21c0:	4770      	bx	lr
    21c2:	bf00      	nop
    21c4:	20000400 	.word	0x20000400
    21c8:	20000404 	.word	0x20000404
    21cc:	000022b9 	.word	0x000022b9
    21d0:	20000414 	.word	0x20000414

000021d4 <temp_sensor_init>:
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
{
    21d4:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    21d6:	4b05      	ldr	r3, [pc, #20]	; (21ec <temp_sensor_init+0x18>)
    21d8:	4805      	ldr	r0, [pc, #20]	; (21f0 <temp_sensor_init+0x1c>)
    21da:	6018      	str	r0, [r3, #0]
    21dc:	f005 f80a 	bl	71f4 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
		return -ENODEV;
    21e0:	2800      	cmp	r0, #0
	}

	return 0;
}
    21e2:	bf0c      	ite	eq
    21e4:	f06f 0012 	mvneq.w	r0, #18
    21e8:	2000      	movne	r0, #0
    21ea:	bd08      	pop	{r3, pc}
    21ec:	20000418 	.word	0x20000418
    21f0:	00007714 	.word	0x00007714

000021f4 <start_cycle>:
{
    21f4:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    21f6:	2200      	movs	r2, #0
    21f8:	2300      	movs	r3, #0
    21fa:	e9cd 2300 	strd	r2, r3, [sp]
    21fe:	4808      	ldr	r0, [pc, #32]	; (2220 <start_cycle+0x2c>)
    2200:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2204:	2300      	movs	r3, #0
    2206:	f003 fd29 	bl	5c5c <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    220a:	4b06      	ldr	r3, [pc, #24]	; (2224 <start_cycle+0x30>)
	err = onoff_release(mgr);
    220c:	6818      	ldr	r0, [r3, #0]
    220e:	f003 fedc 	bl	5fca <onoff_release>
	cal_process_in_progress = 0;
    2212:	4b05      	ldr	r3, [pc, #20]	; (2228 <start_cycle+0x34>)
    2214:	2200      	movs	r2, #0
    2216:	601a      	str	r2, [r3, #0]
}
    2218:	b003      	add	sp, #12
    221a:	f85d fb04 	ldr.w	pc, [sp], #4
    221e:	bf00      	nop
    2220:	20000190 	.word	0x20000190
    2224:	20000414 	.word	0x20000414
    2228:	20000400 	.word	0x20000400

0000222c <measure_temperature>:
{
    222c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    222e:	4d1d      	ldr	r5, [pc, #116]	; (22a4 <measure_temperature+0x78>)
    2230:	6828      	ldr	r0, [r5, #0]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    2232:	6883      	ldr	r3, [r0, #8]
    2234:	4c1c      	ldr	r4, [pc, #112]	; (22a8 <measure_temperature+0x7c>)
    2236:	68db      	ldr	r3, [r3, #12]
    2238:	2139      	movs	r1, #57	; 0x39
    223a:	4798      	blx	r3
	if (rc == 0) {
    223c:	b170      	cbz	r0, 225c <measure_temperature+0x30>
		calib_skip_cnt = 0;
    223e:	2300      	movs	r3, #0
    2240:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    2242:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    2244:	7821      	ldrb	r1, [r4, #0]
    2246:	b109      	cbz	r1, 224c <measure_temperature+0x20>
    2248:	2a01      	cmp	r2, #1
    224a:	dd20      	ble.n	228e <measure_temperature+0x62>
		prev_temperature = temperature;
    224c:	4a17      	ldr	r2, [pc, #92]	; (22ac <measure_temperature+0x80>)
    224e:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    2250:	f001 fadc 	bl	380c <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    2254:	2301      	movs	r3, #1
    2256:	7023      	strb	r3, [r4, #0]
}
    2258:	b003      	add	sp, #12
    225a:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    225c:	6828      	ldr	r0, [r5, #0]
	return api->channel_get(dev, chan, val);
    225e:	6883      	ldr	r3, [r0, #8]
    2260:	466a      	mov	r2, sp
    2262:	691b      	ldr	r3, [r3, #16]
    2264:	210c      	movs	r1, #12
    2266:	4798      	blx	r3
	if (rc == 0) {
    2268:	2800      	cmp	r0, #0
    226a:	d1e8      	bne.n	223e <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    226c:	4a10      	ldr	r2, [pc, #64]	; (22b0 <measure_temperature+0x84>)
    226e:	9b01      	ldr	r3, [sp, #4]
    2270:	fb93 f3f2 	sdiv	r3, r3, r2
    2274:	9a00      	ldr	r2, [sp, #0]
    2276:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    227a:	4a0c      	ldr	r2, [pc, #48]	; (22ac <measure_temperature+0x80>)
    227c:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    2280:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    2282:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    2284:	2a00      	cmp	r2, #0
    2286:	bfb8      	it	lt
    2288:	4252      	neglt	r2, r2
    228a:	b212      	sxth	r2, r2
    228c:	e7da      	b.n	2244 <measure_temperature+0x18>
		total_skips_cnt++;
    228e:	4a09      	ldr	r2, [pc, #36]	; (22b4 <measure_temperature+0x88>)
    2290:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    2292:	3901      	subs	r1, #1
		total_skips_cnt++;
    2294:	3301      	adds	r3, #1
		calib_skip_cnt--;
    2296:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    2298:	6013      	str	r3, [r2, #0]
}
    229a:	b003      	add	sp, #12
    229c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    22a0:	f7ff bfa8 	b.w	21f4 <start_cycle>
    22a4:	20000418 	.word	0x20000418
    22a8:	200005f6 	.word	0x200005f6
    22ac:	200005f4 	.word	0x200005f4
    22b0:	0003d090 	.word	0x0003d090
    22b4:	20000420 	.word	0x20000420

000022b8 <cal_hf_callback>:
{
    22b8:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    22ba:	4b07      	ldr	r3, [pc, #28]	; (22d8 <cal_hf_callback+0x20>)
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	b92b      	cbnz	r3, 22cc <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    22c0:	f001 faa4 	bl	380c <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    22c4:	4b05      	ldr	r3, [pc, #20]	; (22dc <cal_hf_callback+0x24>)
    22c6:	2201      	movs	r2, #1
    22c8:	701a      	strb	r2, [r3, #0]
}
    22ca:	bd08      	pop	{r3, pc}
    22cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    22d0:	4803      	ldr	r0, [pc, #12]	; (22e0 <cal_hf_callback+0x28>)
    22d2:	f002 bf5d 	b.w	5190 <k_work_submit>
    22d6:	bf00      	nop
    22d8:	20000418 	.word	0x20000418
    22dc:	200005f6 	.word	0x200005f6
    22e0:	2000000c 	.word	0x2000000c

000022e4 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    22e4:	4b03      	ldr	r3, [pc, #12]	; (22f4 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    22e6:	4a04      	ldr	r2, [pc, #16]	; (22f8 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    22e8:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    22ea:	2300      	movs	r3, #0
    22ec:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    22ee:	4a03      	ldr	r2, [pc, #12]	; (22fc <z_nrf_clock_calibration_init+0x18>)
    22f0:	6013      	str	r3, [r2, #0]
}
    22f2:	4770      	bx	lr
    22f4:	20000414 	.word	0x20000414
    22f8:	2000041c 	.word	0x2000041c
    22fc:	20000420 	.word	0x20000420

00002300 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    2300:	4b02      	ldr	r3, [pc, #8]	; (230c <z_nrf_clock_calibration_lfclk_started+0xc>)
    2302:	2200      	movs	r2, #0
    2304:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    2306:	f7ff bf41 	b.w	218c <start_cal_process>
    230a:	bf00      	nop
    230c:	200005f6 	.word	0x200005f6

00002310 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    2310:	4801      	ldr	r0, [pc, #4]	; (2318 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    2312:	f005 b936 	b.w	7582 <z_impl_k_timer_stop>
    2316:	bf00      	nop
    2318:	20000190 	.word	0x20000190

0000231c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    231c:	4a02      	ldr	r2, [pc, #8]	; (2328 <z_nrf_clock_calibration_done_handler+0xc>)
    231e:	6813      	ldr	r3, [r2, #0]
    2320:	3301      	adds	r3, #1
    2322:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    2324:	f7ff bf66 	b.w	21f4 <start_cycle>
    2328:	2000041c 	.word	0x2000041c

0000232c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    232c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    232e:	4b08      	ldr	r3, [pc, #32]	; (2350 <uart_console_init+0x24>)
    2330:	4808      	ldr	r0, [pc, #32]	; (2354 <uart_console_init+0x28>)
    2332:	6018      	str	r0, [r3, #0]
    2334:	f004 ff5e 	bl	71f4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2338:	b138      	cbz	r0, 234a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    233a:	4807      	ldr	r0, [pc, #28]	; (2358 <uart_console_init+0x2c>)
    233c:	f7ff fd66 	bl	1e0c <__stdout_hook_install>
	__printk_hook_install(console_out);
    2340:	4805      	ldr	r0, [pc, #20]	; (2358 <uart_console_init+0x2c>)
    2342:	f7fe fd13 	bl	d6c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2346:	2000      	movs	r0, #0
}
    2348:	bd08      	pop	{r3, pc}
		return -ENODEV;
    234a:	f06f 0012 	mvn.w	r0, #18
    234e:	e7fb      	b.n	2348 <uart_console_init+0x1c>
    2350:	20000424 	.word	0x20000424
    2354:	00007684 	.word	0x00007684
    2358:	0000235d 	.word	0x0000235d

0000235c <console_out>:
	if ('\n' == c) {
    235c:	280a      	cmp	r0, #10
{
    235e:	b538      	push	{r3, r4, r5, lr}
    2360:	4d07      	ldr	r5, [pc, #28]	; (2380 <console_out+0x24>)
    2362:	4604      	mov	r4, r0
	if ('\n' == c) {
    2364:	d104      	bne.n	2370 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2366:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2368:	6883      	ldr	r3, [r0, #8]
    236a:	210d      	movs	r1, #13
    236c:	685b      	ldr	r3, [r3, #4]
    236e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2370:	6828      	ldr	r0, [r5, #0]
    2372:	6883      	ldr	r3, [r0, #8]
    2374:	b2e1      	uxtb	r1, r4
    2376:	685b      	ldr	r3, [r3, #4]
    2378:	4798      	blx	r3
}
    237a:	4620      	mov	r0, r4
    237c:	bd38      	pop	{r3, r4, r5, pc}
    237e:	bf00      	nop
    2380:	20000424 	.word	0x20000424

00002384 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2384:	b530      	push	{r4, r5, lr}
	return port->config;
    2386:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2388:	7b04      	ldrb	r4, [r0, #12]
    238a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    238e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2392:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2396:	b085      	sub	sp, #20
    2398:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    239c:	d105      	bne.n	23aa <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    239e:	4628      	mov	r0, r5
    23a0:	f001 fcdc 	bl	3d5c <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    23a4:	2000      	movs	r0, #0
}
    23a6:	b005      	add	sp, #20
    23a8:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    23aa:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    23ae:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    23b2:	d134      	bne.n	241e <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    23b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    23b8:	bf0c      	ite	eq
    23ba:	2304      	moveq	r3, #4
    23bc:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    23be:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    23c2:	6883      	ldr	r3, [r0, #8]
    23c4:	fa23 f101 	lsr.w	r1, r3, r1
    23c8:	07c9      	lsls	r1, r1, #31
    23ca:	d41a      	bmi.n	2402 <gpio_nrfx_pin_interrupt_configure+0x7e>
    23cc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    23d0:	d117      	bne.n	2402 <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    23d2:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    23d4:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    23d6:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    23da:	4a1c      	ldr	r2, [pc, #112]	; (244c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    23dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    23e0:	bf18      	it	ne
    23e2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    23e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    23ea:	07db      	lsls	r3, r3, #31
    23ec:	d409      	bmi.n	2402 <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    23ee:	f10d 0407 	add.w	r4, sp, #7
    23f2:	4621      	mov	r1, r4
    23f4:	4628      	mov	r0, r5
    23f6:	f001 fc15 	bl	3c24 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    23fa:	4b15      	ldr	r3, [pc, #84]	; (2450 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    23fc:	4298      	cmp	r0, r3
    23fe:	d019      	beq.n	2434 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    2400:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2402:	2300      	movs	r3, #0
    2404:	4619      	mov	r1, r3
    2406:	aa02      	add	r2, sp, #8
    2408:	4628      	mov	r0, r5
    240a:	f001 fae5 	bl	39d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    240e:	4b11      	ldr	r3, [pc, #68]	; (2454 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2410:	4298      	cmp	r0, r3
    2412:	d118      	bne.n	2446 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2414:	2101      	movs	r1, #1
    2416:	4628      	mov	r0, r5
    2418:	f001 fc58 	bl	3ccc <nrfx_gpiote_trigger_enable>
    241c:	e7c2      	b.n	23a4 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    241e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2422:	d005      	beq.n	2430 <gpio_nrfx_pin_interrupt_configure+0xac>
    2424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2428:	bf0c      	ite	eq
    242a:	2302      	moveq	r3, #2
    242c:	2301      	movne	r3, #1
    242e:	e7c6      	b.n	23be <gpio_nrfx_pin_interrupt_configure+0x3a>
    2430:	2303      	movs	r3, #3
    2432:	e7c4      	b.n	23be <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    2434:	4620      	mov	r0, r4
    2436:	f001 fc43 	bl	3cc0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    243a:	4b06      	ldr	r3, [pc, #24]	; (2454 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    243c:	4298      	cmp	r0, r3
    243e:	d0df      	beq.n	2400 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
    2440:	f06f 000b 	mvn.w	r0, #11
    2444:	e7af      	b.n	23a6 <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    2446:	f06f 0015 	mvn.w	r0, #21
    244a:	e7ac      	b.n	23a6 <gpio_nrfx_pin_interrupt_configure+0x22>
    244c:	50000300 	.word	0x50000300
    2450:	0bad0004 	.word	0x0bad0004
    2454:	0bad0000 	.word	0x0bad0000

00002458 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2458:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    245a:	f001 fc21 	bl	3ca0 <nrfx_gpiote_is_init>
    245e:	4604      	mov	r4, r0
    2460:	b968      	cbnz	r0, 247e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2462:	f001 fbf5 	bl	3c50 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2466:	4b08      	ldr	r3, [pc, #32]	; (2488 <gpio_nrfx_init+0x30>)
    2468:	4298      	cmp	r0, r3
    246a:	d10a      	bne.n	2482 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    246c:	4807      	ldr	r0, [pc, #28]	; (248c <gpio_nrfx_init+0x34>)
    246e:	4621      	mov	r1, r4
    2470:	f001 fbd2 	bl	3c18 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2474:	4622      	mov	r2, r4
    2476:	2105      	movs	r1, #5
    2478:	2006      	movs	r0, #6
    247a:	f7ff fab7 	bl	19ec <z_arm_irq_priority_set>
		return 0;
    247e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2480:	bd10      	pop	{r4, pc}
		return -EIO;
    2482:	f06f 0004 	mvn.w	r0, #4
    2486:	e7fb      	b.n	2480 <gpio_nrfx_init+0x28>
    2488:	0bad0000 	.word	0x0bad0000
    248c:	00002491 	.word	0x00002491

00002490 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2490:	0942      	lsrs	r2, r0, #5
{
    2492:	b570      	push	{r4, r5, r6, lr}
    2494:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2496:	d002      	beq.n	249e <nrfx_gpio_handler+0xe>
    2498:	2a01      	cmp	r2, #1
    249a:	d015      	beq.n	24c8 <nrfx_gpio_handler+0x38>
}
    249c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    249e:	4e0b      	ldr	r6, [pc, #44]	; (24cc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    24a0:	6932      	ldr	r2, [r6, #16]
    24a2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    24a4:	2900      	cmp	r1, #0
    24a6:	d0f9      	beq.n	249c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    24a8:	f003 031f 	and.w	r3, r3, #31
    24ac:	2501      	movs	r5, #1
    24ae:	680c      	ldr	r4, [r1, #0]
    24b0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    24b2:	688a      	ldr	r2, [r1, #8]
    24b4:	402a      	ands	r2, r5
    24b6:	d002      	beq.n	24be <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    24b8:	684b      	ldr	r3, [r1, #4]
    24ba:	4630      	mov	r0, r6
    24bc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    24be:	2c00      	cmp	r4, #0
    24c0:	d0ec      	beq.n	249c <nrfx_gpio_handler+0xc>
    24c2:	4621      	mov	r1, r4
    24c4:	6824      	ldr	r4, [r4, #0]
    24c6:	e7f4      	b.n	24b2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    24c8:	4e01      	ldr	r6, [pc, #4]	; (24d0 <nrfx_gpio_handler+0x40>)
    24ca:	e7e9      	b.n	24a0 <nrfx_gpio_handler+0x10>
    24cc:	00007654 	.word	0x00007654
    24d0:	0000766c 	.word	0x0000766c

000024d4 <gpio_nrfx_pin_configure>:
{
    24d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    24d8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    24dc:	f898 300c 	ldrb.w	r3, [r8, #12]
    24e0:	f001 061f 	and.w	r6, r1, #31
{
    24e4:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    24e6:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    24ea:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    24ec:	4630      	mov	r0, r6
    24ee:	f10d 0103 	add.w	r1, sp, #3
{
    24f2:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    24f4:	f001 fb96 	bl	3c24 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    24f8:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    24fc:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    24fe:	d10b      	bne.n	2518 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2500:	4630      	mov	r0, r6
    2502:	f001 fc53 	bl	3dac <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2506:	4b43      	ldr	r3, [pc, #268]	; (2614 <gpio_nrfx_pin_configure+0x140>)
    2508:	4599      	cmp	r9, r3
    250a:	d103      	bne.n	2514 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    250c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2510:	f001 fbd0 	bl	3cb4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2514:	2000      	movs	r0, #0
    2516:	e057      	b.n	25c8 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2518:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    251a:	4619      	mov	r1, r3
    251c:	aa02      	add	r2, sp, #8
    251e:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2520:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2524:	f001 fa58 	bl	39d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2528:	4b3a      	ldr	r3, [pc, #232]	; (2614 <gpio_nrfx_pin_configure+0x140>)
    252a:	4298      	cmp	r0, r3
    252c:	d002      	beq.n	2534 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    252e:	f06f 0015 	mvn.w	r0, #21
    2532:	e049      	b.n	25c8 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
    2534:	4581      	cmp	r9, r0
    2536:	d103      	bne.n	2540 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    2538:	f89d 0003 	ldrb.w	r0, [sp, #3]
    253c:	f001 fbba 	bl	3cb4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2540:	03a5      	lsls	r5, r4, #14
    2542:	d554      	bpl.n	25ee <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2544:	f240 3306 	movw	r3, #774	; 0x306
    2548:	4023      	ands	r3, r4
    254a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    254e:	d03e      	beq.n	25ce <gpio_nrfx_pin_configure+0xfa>
    2550:	d80c      	bhi.n	256c <gpio_nrfx_pin_configure+0x98>
    2552:	2b06      	cmp	r3, #6
    2554:	d015      	beq.n	2582 <gpio_nrfx_pin_configure+0xae>
    2556:	d804      	bhi.n	2562 <gpio_nrfx_pin_configure+0x8e>
    2558:	b19b      	cbz	r3, 2582 <gpio_nrfx_pin_configure+0xae>
    255a:	2b02      	cmp	r3, #2
    255c:	d1e7      	bne.n	252e <gpio_nrfx_pin_configure+0x5a>
    255e:	2304      	movs	r3, #4
    2560:	e00f      	b.n	2582 <gpio_nrfx_pin_configure+0xae>
    2562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2566:	d1e2      	bne.n	252e <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    2568:	2301      	movs	r3, #1
    256a:	e00a      	b.n	2582 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    256c:	f240 2202 	movw	r2, #514	; 0x202
    2570:	4293      	cmp	r3, r2
    2572:	d02e      	beq.n	25d2 <gpio_nrfx_pin_configure+0xfe>
    2574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2578:	d02d      	beq.n	25d6 <gpio_nrfx_pin_configure+0x102>
    257a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    257e:	d1d6      	bne.n	252e <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    2580:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2582:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2586:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    258a:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    258e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2590:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2594:	bf54      	ite	pl
    2596:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    259a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    259c:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    259e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    25a2:	d51a      	bpl.n	25da <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    25a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    25a8:	2101      	movs	r1, #1
    25aa:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    25ae:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    25b2:	2200      	movs	r2, #0
    25b4:	a901      	add	r1, sp, #4
    25b6:	4630      	mov	r0, r6
    25b8:	f001 fabc 	bl	3b34 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    25bc:	4b15      	ldr	r3, [pc, #84]	; (2614 <gpio_nrfx_pin_configure+0x140>)
    25be:	4298      	cmp	r0, r3
    25c0:	bf14      	ite	ne
    25c2:	f06f 0015 	mvnne.w	r0, #21
    25c6:	2000      	moveq	r0, #0
}
    25c8:	b005      	add	sp, #20
    25ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    25ce:	2307      	movs	r3, #7
    25d0:	e7d7      	b.n	2582 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    25d2:	2305      	movs	r3, #5
    25d4:	e7d5      	b.n	2582 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    25d6:	2303      	movs	r3, #3
    25d8:	e7d3      	b.n	2582 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    25da:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    25dc:	bf41      	itttt	mi
    25de:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    25e2:	2101      	movmi	r1, #1
    25e4:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    25e8:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
    25ec:	e7e1      	b.n	25b2 <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
    25ee:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    25f0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    25f4:	bf54      	ite	pl
    25f6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    25fa:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    25fc:	461a      	mov	r2, r3
    25fe:	a901      	add	r1, sp, #4
    2600:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
    2602:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2606:	f001 f9e7 	bl	39d8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    260a:	4b02      	ldr	r3, [pc, #8]	; (2614 <gpio_nrfx_pin_configure+0x140>)
    260c:	4298      	cmp	r0, r3
    260e:	d081      	beq.n	2514 <gpio_nrfx_pin_configure+0x40>
    2610:	e78d      	b.n	252e <gpio_nrfx_pin_configure+0x5a>
    2612:	bf00      	nop
    2614:	0bad0000 	.word	0x0bad0000

00002618 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    2618:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    261a:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    261c:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
    261e:	69e3      	ldr	r3, [r4, #28]
    2620:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
    2622:	6a20      	ldr	r0, [r4, #32]
    2624:	f004 f818 	bl	6658 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    2628:	2800      	cmp	r0, #0
    262a:	db0d      	blt.n	2648 <i2c_nrfx_twim_init+0x30>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    262c:	462b      	mov	r3, r5
    262e:	4a08      	ldr	r2, [pc, #32]	; (2650 <i2c_nrfx_twim_init+0x38>)
    2630:	f104 0108 	add.w	r1, r4, #8
    2634:	4620      	mov	r0, r4
    2636:	f001 ff69 	bl	450c <nrfx_twim_init>
    263a:	4b06      	ldr	r3, [pc, #24]	; (2654 <i2c_nrfx_twim_init+0x3c>)
    263c:	4298      	cmp	r0, r3
    263e:	d104      	bne.n	264a <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    2640:	4620      	mov	r0, r4
    2642:	f001 ffc5 	bl	45d0 <nrfx_twim_enable>
#endif

	return 0;
    2646:	2000      	movs	r0, #0
}
    2648:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    264a:	f06f 0004 	mvn.w	r0, #4
    264e:	e7fb      	b.n	2648 <i2c_nrfx_twim_init+0x30>
    2650:	00002695 	.word	0x00002695
    2654:	0bad0000 	.word	0x0bad0000

00002658 <i2c_nrfx_twim_recover_bus>:
{
    2658:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    265a:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    265c:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    265e:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    2662:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    2666:	4620      	mov	r0, r4
    2668:	f001 ffc2 	bl	45f0 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    266c:	4631      	mov	r1, r6
    266e:	4628      	mov	r0, r5
    2670:	f002 f978 	bl	4964 <nrfx_twi_twim_bus_recover>
    2674:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    2676:	6a20      	ldr	r0, [r4, #32]
    2678:	f003 ffee 	bl	6658 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    267c:	4620      	mov	r0, r4
    267e:	f001 ffa7 	bl	45d0 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2682:	4b03      	ldr	r3, [pc, #12]	; (2690 <i2c_nrfx_twim_recover_bus+0x38>)
    2684:	429d      	cmp	r5, r3
}
    2686:	bf14      	ite	ne
    2688:	f06f 000f 	mvnne.w	r0, #15
    268c:	2000      	moveq	r0, #0
    268e:	bd70      	pop	{r4, r5, r6, pc}
    2690:	0bad0000 	.word	0x0bad0000

00002694 <event_handler>:
	switch (p_event->type) {
    2694:	7803      	ldrb	r3, [r0, #0]
    2696:	2b01      	cmp	r3, #1
    2698:	d008      	beq.n	26ac <event_handler+0x18>
    269a:	2b02      	cmp	r3, #2
    269c:	d008      	beq.n	26b0 <event_handler+0x1c>
    269e:	b94b      	cbnz	r3, 26b4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    26a0:	4b05      	ldr	r3, [pc, #20]	; (26b8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    26a2:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    26a4:	f101 0010 	add.w	r0, r1, #16
    26a8:	f002 bc4a 	b.w	4f40 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    26ac:	4b03      	ldr	r3, [pc, #12]	; (26bc <event_handler+0x28>)
    26ae:	e7f8      	b.n	26a2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    26b0:	4b03      	ldr	r3, [pc, #12]	; (26c0 <event_handler+0x2c>)
    26b2:	e7f6      	b.n	26a2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    26b4:	4b03      	ldr	r3, [pc, #12]	; (26c4 <event_handler+0x30>)
    26b6:	e7f4      	b.n	26a2 <event_handler+0xe>
    26b8:	0bad0000 	.word	0x0bad0000
    26bc:	0bae0001 	.word	0x0bae0001
    26c0:	0bae0002 	.word	0x0bae0002
    26c4:	0bad0001 	.word	0x0bad0001

000026c8 <i2c_nrfx_twim_transfer>:
{
    26c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26cc:	b08b      	sub	sp, #44	; 0x2c
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    26ce:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    26d2:	6906      	ldr	r6, [r0, #16]
{
    26d4:	9201      	str	r2, [sp, #4]
	nrfx_twim_xfer_desc_t cur_xfer = {
    26d6:	2214      	movs	r2, #20
{
    26d8:	461d      	mov	r5, r3
    26da:	4681      	mov	r9, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    26dc:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    26e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    26e4:	9302      	str	r3, [sp, #8]
{
    26e6:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    26e8:	eb0d 0002 	add.w	r0, sp, r2
    26ec:	2100      	movs	r1, #0
    26ee:	f003 fe76 	bl	63de <memset>
    26f2:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    26f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    26fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    26fe:	4630      	mov	r0, r6
    2700:	f002 fc3e 	bl	4f80 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2704:	f106 0b10 	add.w	fp, r6, #16
    2708:	2200      	movs	r2, #0
    270a:	2300      	movs	r3, #0
    270c:	4658      	mov	r0, fp
    270e:	f002 fc37 	bl	4f80 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    2712:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    2714:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    2716:	9b01      	ldr	r3, [sp, #4]
    2718:	429f      	cmp	r7, r3
    271a:	d301      	bcc.n	2720 <i2c_nrfx_twim_transfer+0x58>
    271c:	2400      	movs	r4, #0
    271e:	e049      	b.n	27b4 <i2c_nrfx_twim_transfer+0xec>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2720:	7a21      	ldrb	r1, [r4, #8]
    2722:	070b      	lsls	r3, r1, #28
    2724:	f100 808a 	bmi.w	283c <i2c_nrfx_twim_transfer+0x174>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2728:	9b01      	ldr	r3, [sp, #4]
		bool concat_next = ((i + 1) < num_msgs)
    272a:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    272c:	429f      	cmp	r7, r3
    272e:	d20a      	bcs.n	2746 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2730:	0788      	lsls	r0, r1, #30
    2732:	d408      	bmi.n	2746 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2734:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2736:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    273a:	f002 0201 	and.w	r2, r2, #1
    273e:	f003 0304 	and.w	r3, r3, #4
    2742:	4313      	orrs	r3, r2
    2744:	d017      	beq.n	2776 <i2c_nrfx_twim_transfer+0xae>
		if (concat_next || (msg_buf_used != 0)) {
    2746:	b1c5      	cbz	r5, 277a <i2c_nrfx_twim_transfer+0xb2>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2748:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    274a:	6862      	ldr	r2, [r4, #4]
    274c:	f8dd c008 	ldr.w	ip, [sp, #8]
    2750:	18a8      	adds	r0, r5, r2
    2752:	4560      	cmp	r0, ip
    2754:	d875      	bhi.n	2842 <i2c_nrfx_twim_transfer+0x17a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2756:	07c9      	lsls	r1, r1, #31
    2758:	d406      	bmi.n	2768 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
    275a:	6821      	ldr	r1, [r4, #0]
    275c:	9303      	str	r3, [sp, #12]
    275e:	eb08 0005 	add.w	r0, r8, r5
    2762:	f003 fe31 	bl	63c8 <memcpy>
    2766:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
    2768:	6862      	ldr	r2, [r4, #4]
    276a:	4415      	add	r5, r2
    276c:	b2ad      	uxth	r5, r5
		if (concat_next) {
    276e:	2b00      	cmp	r3, #0
    2770:	d036      	beq.n	27e0 <i2c_nrfx_twim_transfer+0x118>
    2772:	340c      	adds	r4, #12
    2774:	e7cf      	b.n	2716 <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2776:	2301      	movs	r3, #1
    2778:	e7e7      	b.n	274a <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    277a:	07ca      	lsls	r2, r1, #31
    277c:	d521      	bpl.n	27c2 <i2c_nrfx_twim_transfer+0xfa>
			cur_xfer.p_primary_buf = msgs[i].buf;
    277e:	6823      	ldr	r3, [r4, #0]
    2780:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    2782:	6863      	ldr	r3, [r4, #4]
    2784:	9306      	str	r3, [sp, #24]
    2786:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2788:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    278a:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    278e:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2792:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2796:	a905      	add	r1, sp, #20
    2798:	bf0c      	ite	eq
    279a:	2220      	moveq	r2, #32
    279c:	2200      	movne	r2, #0
    279e:	4650      	mov	r0, sl
    27a0:	f001 ff44 	bl	462c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    27a4:	4b2b      	ldr	r3, [pc, #172]	; (2854 <i2c_nrfx_twim_transfer+0x18c>)
    27a6:	4298      	cmp	r0, r3
    27a8:	d020      	beq.n	27ec <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
    27aa:	330b      	adds	r3, #11
    27ac:	4298      	cmp	r0, r3
    27ae:	d04e      	beq.n	284e <i2c_nrfx_twim_transfer+0x186>
			ret = -EIO;
    27b0:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
    27b4:	4630      	mov	r0, r6
    27b6:	f002 fbc3 	bl	4f40 <z_impl_k_sem_give>
}
    27ba:	4620      	mov	r0, r4
    27bc:	b00b      	add	sp, #44	; 0x2c
    27be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    27c2:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    27c4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    27c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    27cc:	d0d7      	beq.n	277e <i2c_nrfx_twim_transfer+0xb6>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    27ce:	6862      	ldr	r2, [r4, #4]
    27d0:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    27d4:	4293      	cmp	r3, r2
    27d6:	d337      	bcc.n	2848 <i2c_nrfx_twim_transfer+0x180>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    27d8:	4640      	mov	r0, r8
    27da:	f003 fdf5 	bl	63c8 <memcpy>
			msg_buf_used = msgs[i].len;
    27de:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    27e0:	2d00      	cmp	r5, #0
    27e2:	d0cc      	beq.n	277e <i2c_nrfx_twim_transfer+0xb6>
			cur_xfer.p_primary_buf = msg_buf;
    27e4:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
    27e8:	9506      	str	r5, [sp, #24]
    27ea:	e7cd      	b.n	2788 <i2c_nrfx_twim_transfer+0xc0>
	return z_impl_k_sem_take(sem, timeout);
    27ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    27f0:	2300      	movs	r3, #0
    27f2:	4658      	mov	r0, fp
    27f4:	f002 fbc4 	bl	4f80 <z_impl_k_sem_take>
		if (ret != 0) {
    27f8:	b118      	cbz	r0, 2802 <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
    27fa:	4648      	mov	r0, r9
    27fc:	f7ff ff2c 	bl	2658 <i2c_nrfx_twim_recover_bus>
    2800:	e7d6      	b.n	27b0 <i2c_nrfx_twim_transfer+0xe8>
		res = dev_data->res;
    2802:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2804:	4a13      	ldr	r2, [pc, #76]	; (2854 <i2c_nrfx_twim_transfer+0x18c>)
    2806:	4293      	cmp	r3, r2
    2808:	d1d2      	bne.n	27b0 <i2c_nrfx_twim_transfer+0xe8>
		if ((msgs[i].flags & I2C_MSG_READ)
    280a:	7a23      	ldrb	r3, [r4, #8]
    280c:	07db      	lsls	r3, r3, #31
    280e:	d401      	bmi.n	2814 <i2c_nrfx_twim_transfer+0x14c>
		msg_buf_used = 0;
    2810:	2500      	movs	r5, #0
    2812:	e7ae      	b.n	2772 <i2c_nrfx_twim_transfer+0xaa>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2814:	9b08      	ldr	r3, [sp, #32]
    2816:	4598      	cmp	r8, r3
    2818:	d1fa      	bne.n	2810 <i2c_nrfx_twim_transfer+0x148>
    281a:	4623      	mov	r3, r4
    281c:	e008      	b.n	2830 <i2c_nrfx_twim_transfer+0x168>
				msg_buf_used -= msgs[j].len;
    281e:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    2820:	68d8      	ldr	r0, [r3, #12]
    2822:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
    2824:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2826:	fa18 f181 	uxtah	r1, r8, r1
    282a:	f003 fdcd 	bl	63c8 <memcpy>
				j--;
    282e:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
    2830:	685a      	ldr	r2, [r3, #4]
    2832:	4295      	cmp	r5, r2
    2834:	f1a3 030c 	sub.w	r3, r3, #12
    2838:	d2f1      	bcs.n	281e <i2c_nrfx_twim_transfer+0x156>
    283a:	e7e9      	b.n	2810 <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
    283c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2840:	e7b8      	b.n	27b4 <i2c_nrfx_twim_transfer+0xec>
				ret = -ENOSPC;
    2842:	f06f 041b 	mvn.w	r4, #27
    2846:	e7b5      	b.n	27b4 <i2c_nrfx_twim_transfer+0xec>
				ret = -EINVAL;
    2848:	f06f 0415 	mvn.w	r4, #21
    284c:	e7b2      	b.n	27b4 <i2c_nrfx_twim_transfer+0xec>
				ret = -EBUSY;
    284e:	f06f 040f 	mvn.w	r4, #15
    2852:	e7af      	b.n	27b4 <i2c_nrfx_twim_transfer+0xec>
    2854:	0bad0000 	.word	0x0bad0000

00002858 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
    2858:	2903      	cmp	r1, #3
{
    285a:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
    285c:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
    285e:	d81c      	bhi.n	289a <lis2dh_channel_get+0x42>
    2860:	4b0f      	ldr	r3, [pc, #60]	; (28a0 <lis2dh_channel_get+0x48>)
    2862:	5658      	ldrsb	r0, [r3, r1]
    2864:	4b0f      	ldr	r3, [pc, #60]	; (28a4 <lis2dh_channel_get+0x4c>)
    2866:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
    2868:	490f      	ldr	r1, [pc, #60]	; (28a8 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    286a:	42b0      	cmp	r0, r6
    286c:	f102 0208 	add.w	r2, r2, #8
    2870:	dd01      	ble.n	2876 <lis2dh_channel_get+0x1e>
	return 0;
    2872:	2000      	movs	r0, #0
}
    2874:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
    2876:	1d03      	adds	r3, r0, #4
    2878:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
    287c:	6925      	ldr	r5, [r4, #16]
    287e:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
    2882:	111b      	asrs	r3, r3, #4
    2884:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
    2886:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
    288a:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
    288e:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
    2892:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    2896:	3001      	adds	r0, #1
    2898:	e7e7      	b.n	286a <lis2dh_channel_get+0x12>
		return -ENOTSUP;
    289a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    289e:	e7e9      	b.n	2874 <lis2dh_channel_get+0x1c>
    28a0:	00007ef3 	.word	0x00007ef3
    28a4:	00007ef7 	.word	0x00007ef7
    28a8:	000f4240 	.word	0x000f4240

000028ac <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
    28ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
    28ae:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    28b0:	6905      	ldr	r5, [r0, #16]
	int status;
	uint8_t id;
	uint8_t raw[6];

	status = cfg->bus_init(dev);
    28b2:	6833      	ldr	r3, [r6, #0]
{
    28b4:	4604      	mov	r4, r0
	status = cfg->bus_init(dev);
    28b6:	4798      	blx	r3
	if (status < 0) {
    28b8:	2800      	cmp	r0, #0
    28ba:	db2e      	blt.n	291a <lis2dh_init+0x6e>
		return status;
	}

	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
    28bc:	686b      	ldr	r3, [r5, #4]
    28be:	f10d 0207 	add.w	r2, sp, #7
    28c2:	689b      	ldr	r3, [r3, #8]
    28c4:	210f      	movs	r1, #15
    28c6:	4620      	mov	r0, r4
    28c8:	4798      	blx	r3
	if (status < 0) {
    28ca:	2800      	cmp	r0, #0
    28cc:	db25      	blt.n	291a <lis2dh_init+0x6e>
		LOG_ERR("Failed to read chip id.");
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
    28ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    28d2:	2b33      	cmp	r3, #51	; 0x33
    28d4:	d13f      	bne.n	2956 <lis2dh_init+0xaa>
		LOG_ERR("Invalid chip ID: %02x\n", id);
		return -EINVAL;
	}

	/* Fix LSM303AGR_ACCEL device scale values */
	if (cfg->hw.is_lsm303agr_dev) {
    28d6:	7b32      	ldrb	r2, [r6, #12]
    28d8:	07d3      	lsls	r3, r2, #31
    28da:	d50b      	bpl.n	28f4 <lis2dh_init+0x48>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
    28dc:	4b1f      	ldr	r3, [pc, #124]	; (295c <lis2dh_init+0xb0>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
    28de:	f644 1116 	movw	r1, #18710	; 0x4916
    28e2:	f242 408b 	movw	r0, #9355	; 0x248b
    28e6:	e9c3 0100 	strd	r0, r1, [r3]
		lis2dh_reg_val_to_scale[2] = ACCEL_SCALE(6252);
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
    28ea:	491d      	ldr	r1, [pc, #116]	; (2960 <lis2dh_init+0xb4>)
    28ec:	f249 262d 	movw	r6, #37421	; 0x922d
    28f0:	e9c3 6102 	strd	r6, r1, [r3, #8]
	}

	if (cfg->hw.disc_pull_up) {
    28f4:	0793      	lsls	r3, r2, #30
    28f6:	d412      	bmi.n	291e <lis2dh_init+0x72>
	/* Initialize control register ctrl1 to ctrl 6 to default boot values
	 * to avoid warm start/reset issues as the accelerometer has no reset
	 * pin. Register values are retained if power is not removed.
	 * Default values see LIS2DH documentation page 30, chapter 6.
	 */
	(void)memset(raw, 0, sizeof(raw));
    28f8:	2206      	movs	r2, #6
    28fa:	2100      	movs	r1, #0
    28fc:	a802      	add	r0, sp, #8
    28fe:	f003 fd6e 	bl	63de <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
    2902:	2307      	movs	r3, #7
    2904:	f88d 3008 	strb.w	r3, [sp, #8]

	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
    2908:	686b      	ldr	r3, [r5, #4]
    290a:	aa02      	add	r2, sp, #8
    290c:	685e      	ldr	r6, [r3, #4]
    290e:	2120      	movs	r1, #32
    2910:	2306      	movs	r3, #6
    2912:	4620      	mov	r0, r4
    2914:	47b0      	blx	r6
					   sizeof(raw));

	if (status < 0) {
    2916:	2800      	cmp	r0, #0
    2918:	da0b      	bge.n	2932 <lis2dh_init+0x86>

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
    291a:	b004      	add	sp, #16
    291c:	bd70      	pop	{r4, r5, r6, pc}
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
    291e:	686b      	ldr	r3, [r5, #4]
    2920:	691e      	ldr	r6, [r3, #16]
    2922:	2380      	movs	r3, #128	; 0x80
    2924:	461a      	mov	r2, r3
    2926:	211e      	movs	r1, #30
    2928:	4620      	mov	r0, r4
    292a:	47b0      	blx	r6
		if (status < 0) {
    292c:	2800      	cmp	r0, #0
    292e:	dae3      	bge.n	28f8 <lis2dh_init+0x4c>
    2930:	e7f3      	b.n	291a <lis2dh_init+0x6e>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
    2932:	4b0a      	ldr	r3, [pc, #40]	; (295c <lis2dh_init+0xb0>)
    2934:	681b      	ldr	r3, [r3, #0]
    2936:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
    2938:	686b      	ldr	r3, [r5, #4]
    293a:	2200      	movs	r2, #0
    293c:	68db      	ldr	r3, [r3, #12]
    293e:	2123      	movs	r1, #35	; 0x23
    2940:	4620      	mov	r0, r4
    2942:	4798      	blx	r3
	if (status < 0) {
    2944:	2800      	cmp	r0, #0
    2946:	dbe8      	blt.n	291a <lis2dh_init+0x6e>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    2948:	686b      	ldr	r3, [r5, #4]
    294a:	2247      	movs	r2, #71	; 0x47
    294c:	68db      	ldr	r3, [r3, #12]
    294e:	2120      	movs	r1, #32
    2950:	4620      	mov	r0, r4
    2952:	4798      	blx	r3
    2954:	e7e1      	b.n	291a <lis2dh_init+0x6e>
		return -EINVAL;
    2956:	f06f 0015 	mvn.w	r0, #21
    295a:	e7de      	b.n	291a <lis2dh_init+0x6e>
    295c:	2000006c 	.word	0x2000006c
    2960:	0001b694 	.word	0x0001b694

00002964 <lis2dh_i2c_init>:
int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;
	const struct lis2dh_config *cfg = dev->config;

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
    2964:	6843      	ldr	r3, [r0, #4]
{
    2966:	b510      	push	{r4, lr}
	struct lis2dh_data *data = dev->data;
    2968:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
    296a:	6858      	ldr	r0, [r3, #4]
    296c:	f004 fc42 	bl	71f4 <z_device_is_ready>
    2970:	b118      	cbz	r0, 297a <lis2dh_i2c_init+0x16>
		LOG_ERR("Bus device is not ready");
		return -ENODEV;
	}

	data->hw_tf = &lis2dh_i2c_transfer_fn;
    2972:	4b03      	ldr	r3, [pc, #12]	; (2980 <lis2dh_i2c_init+0x1c>)
    2974:	6063      	str	r3, [r4, #4]

	return 0;
    2976:	2000      	movs	r0, #0
}
    2978:	bd10      	pop	{r4, pc}
		return -ENODEV;
    297a:	f06f 0012 	mvn.w	r0, #18
    297e:	e7fb      	b.n	2978 <lis2dh_i2c_init+0x14>
    2980:	00007a4c 	.word	0x00007a4c

00002984 <lis2mdl_channel_get>:

static int lis2mdl_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	switch (chan) {
    2984:	290b      	cmp	r1, #11
{
    2986:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (chan) {
    2988:	d804      	bhi.n	2994 <lis2mdl_channel_get+0x10>
    298a:	2907      	cmp	r1, #7
    298c:	d819      	bhi.n	29c2 <lis2mdl_channel_get+0x3e>
    298e:	f06f 0085 	mvn.w	r0, #133	; 0x85
		LOG_ERR("Channel not supported");
		return -ENOTSUP;
	}

	return 0;
}
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (chan) {
    2994:	290c      	cmp	r1, #12
    2996:	d1fa      	bne.n	298e <lis2mdl_channel_get+0xa>
	val->val1 = 25  + drv_data->temp_sample / 8;
    2998:	6903      	ldr	r3, [r0, #16]
    299a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    299e:	2b00      	cmp	r3, #0
    29a0:	4619      	mov	r1, r3
    29a2:	bfb8      	it	lt
    29a4:	1dd9      	addlt	r1, r3, #7
    29a6:	10c9      	asrs	r1, r1, #3
    29a8:	3119      	adds	r1, #25
    29aa:	6011      	str	r1, [r2, #0]
	val->val2 = (drv_data->temp_sample % 8) * 1000000 / 8;
    29ac:	4259      	negs	r1, r3
    29ae:	f001 0107 	and.w	r1, r1, #7
    29b2:	f003 0307 	and.w	r3, r3, #7
    29b6:	bf58      	it	pl
    29b8:	424b      	negpl	r3, r1
    29ba:	4912      	ldr	r1, [pc, #72]	; (2a04 <lis2mdl_channel_get+0x80>)
    29bc:	434b      	muls	r3, r1
    29be:	6053      	str	r3, [r2, #4]
    29c0:	e010      	b.n	29e4 <lis2mdl_channel_get+0x60>
		lis2mdl_channel_get_mag(dev, chan, val);
    29c2:	290b      	cmp	r1, #11
    29c4:	bf18      	it	ne
    29c6:	3908      	subne	r1, #8
    29c8:	6900      	ldr	r0, [r0, #16]
		pval->val1 = cval / 1000000;
    29ca:	4d0f      	ldr	r5, [pc, #60]	; (2a08 <lis2mdl_channel_get+0x84>)
    29cc:	bf19      	ittee	ne
    29ce:	b2c9      	uxtbne	r1, r1
	switch (chan) {
    29d0:	460c      	movne	r4, r1
    29d2:	2402      	moveq	r4, #2
    29d4:	2100      	moveq	r1, #0
		cval = lis2mdl->mag[i] * 1500;
    29d6:	3004      	adds	r0, #4
    29d8:	f240 57dc 	movw	r7, #1500	; 0x5dc
	for (i = ofs_start; i <= ofs_stop; i++) {
    29dc:	42a1      	cmp	r1, r4
    29de:	f102 0208 	add.w	r2, r2, #8
    29e2:	dd01      	ble.n	29e8 <lis2mdl_channel_get+0x64>
	return 0;
    29e4:	2000      	movs	r0, #0
}
    29e6:	e7d4      	b.n	2992 <lis2mdl_channel_get+0xe>
		cval = lis2mdl->mag[i] * 1500;
    29e8:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    29ec:	fb13 f307 	smulbb	r3, r3, r7
		pval->val1 = cval / 1000000;
    29f0:	fb93 f6f5 	sdiv	r6, r3, r5
		pval->val2 = cval % 1000000;
    29f4:	fb05 3316 	mls	r3, r5, r6, r3
		pval->val1 = cval / 1000000;
    29f8:	f842 6c08 	str.w	r6, [r2, #-8]
		pval->val2 = cval % 1000000;
    29fc:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_stop; i++) {
    2a00:	3101      	adds	r1, #1
    2a02:	e7eb      	b.n	29dc <lis2mdl_channel_get+0x58>
    2a04:	0001e848 	.word	0x0001e848
    2a08:	000f4240 	.word	0x000f4240

00002a0c <lis2mdl_init_interrupt>:
	lis2mdl_handle_interrupt(lis2mdl->dev);
}
#endif

int lis2mdl_init_interrupt(const struct device *dev)
{
    2a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
	const struct lis2mdl_config *const cfg = dev->config;
    2a0e:	6844      	ldr	r4, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
    2a10:	6905      	ldr	r5, [r0, #16]
	int ret;

	/* setup data ready gpio interrupt */
	if (!device_is_ready(cfg->gpio_drdy.port)) {
    2a12:	69a0      	ldr	r0, [r4, #24]
    2a14:	f004 fbee 	bl	71f4 <z_device_is_ready>
    2a18:	2800      	cmp	r0, #0
    2a1a:	d034      	beq.n	2a86 <lis2mdl_init_interrupt+0x7a>
			CONFIG_LIS2MDL_THREAD_STACK_SIZE,
			(k_thread_entry_t)lis2mdl_thread, lis2mdl,
			NULL, NULL, K_PRIO_COOP(CONFIG_LIS2MDL_THREAD_PRIORITY),
			0, K_NO_WAIT);
#elif defined(CONFIG_LIS2MDL_TRIGGER_GLOBAL_THREAD)
	lis2mdl->work.handler = lis2mdl_work_cb;
    2a1c:	4b1b      	ldr	r3, [pc, #108]	; (2a8c <lis2mdl_init_interrupt+0x80>)
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
    2a1e:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    2a22:	632b      	str	r3, [r5, #48]	; 0x30
	return gpio_pin_configure(spec->port,
    2a24:	69a0      	ldr	r0, [r4, #24]
    2a26:	7f21      	ldrb	r1, [r4, #28]
    2a28:	f44c 3280 	orr.w	r2, ip, #65536	; 0x10000
	struct gpio_driver_data *data =
    2a2c:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    2a2e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2a32:	2301      	movs	r3, #1
    2a34:	fa03 f601 	lsl.w	r6, r3, r1
    2a38:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    2a3a:	f01c 0f01 	tst.w	ip, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2a3e:	bf14      	ite	ne
    2a40:	4333      	orrne	r3, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2a42:	43b3      	biceq	r3, r6
    2a44:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
    2a46:	f8de 3000 	ldr.w	r3, [lr]
    2a4a:	4798      	blx	r3
#endif

	ret = gpio_pin_configure_dt(&cfg->gpio_drdy, GPIO_INPUT);
	if (ret < 0) {
    2a4c:	2800      	cmp	r0, #0
    2a4e:	db0e      	blt.n	2a6e <lis2mdl_init_interrupt+0x62>
		return ret;
	}

	gpio_init_callback(&lis2mdl->gpio_cb,
			   lis2mdl_gpio_callback,
			   BIT(cfg->gpio_drdy.pin));
    2a50:	7f23      	ldrb	r3, [r4, #28]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2a52:	480f      	ldr	r0, [pc, #60]	; (2a90 <lis2mdl_init_interrupt+0x84>)
    2a54:	2201      	movs	r2, #1
    2a56:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    2a5a:	e9c5 0308 	strd	r0, r3, [r5, #32]

	if (gpio_add_callback(cfg->gpio_drdy.port, &lis2mdl->gpio_cb) < 0) {
    2a5e:	69a0      	ldr	r0, [r4, #24]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    2a60:	6883      	ldr	r3, [r0, #8]
    2a62:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&lis2mdl->gpio_cb,
    2a64:	f105 011c 	add.w	r1, r5, #28
    2a68:	b913      	cbnz	r3, 2a70 <lis2mdl_init_interrupt+0x64>
		LOG_ERR("Could not set gpio callback");
		return -EIO;
    2a6a:	f06f 0004 	mvn.w	r0, #4
	}

	return gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
					       GPIO_INT_EDGE_TO_ACTIVE);
}
    2a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    2a70:	4798      	blx	r3
	if (gpio_add_callback(cfg->gpio_drdy.port, &lis2mdl->gpio_cb) < 0) {
    2a72:	2800      	cmp	r0, #0
    2a74:	dbf9      	blt.n	2a6a <lis2mdl_init_interrupt+0x5e>
	return gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    2a76:	f104 0018 	add.w	r0, r4, #24
    2a7a:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
}
    2a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    2a82:	f004 b801 	b.w	6a88 <gpio_pin_interrupt_configure_dt>
		return -EINVAL;
    2a86:	f06f 0015 	mvn.w	r0, #21
    2a8a:	e7f0      	b.n	2a6e <lis2mdl_init_interrupt+0x62>
    2a8c:	00006ad9 	.word	0x00006ad9
    2a90:	00006ab9 	.word	0x00006ab9

00002a94 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2a94:	4b01      	ldr	r3, [pc, #4]	; (2a9c <hfclk_on_callback+0x8>)
    2a96:	2201      	movs	r2, #1
    2a98:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    2a9a:	4770      	bx	lr
    2a9c:	4000c000 	.word	0x4000c000

00002aa0 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2aa0:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    2aa2:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2aa4:	d10b      	bne.n	2abe <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2aa8:	4906      	ldr	r1, [pc, #24]	; (2ac4 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    2aaa:	4807      	ldr	r0, [pc, #28]	; (2ac8 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2aac:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    2aae:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    2ab2:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    2ab6:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    2ab8:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    2aba:	2000      	movs	r0, #0
    2abc:	4770      	bx	lr
		return -ENOTSUP;
    2abe:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2ac2:	4770      	bx	lr
    2ac4:	0003d090 	.word	0x0003d090
    2ac8:	000f4240 	.word	0x000f4240

00002acc <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2acc:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    2ace:	6900      	ldr	r0, [r0, #16]
    2ad0:	2200      	movs	r2, #0
    2ad2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2ad6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    2ada:	f002 ba31 	b.w	4f40 <z_impl_k_sem_give>
    2ade:	bf00      	nop
    2ae0:	4000c000 	.word	0x4000c000

00002ae4 <temp_nrf5_sample_fetch>:
{
    2ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    2ae6:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    2ae8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2aea:	b363      	cbz	r3, 2b46 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    2aec:	2939      	cmp	r1, #57	; 0x39
    2aee:	d001      	beq.n	2af4 <temp_nrf5_sample_fetch+0x10>
    2af0:	290c      	cmp	r1, #12
    2af2:	d12b      	bne.n	2b4c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    2af4:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    2af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b00:	4630      	mov	r0, r6
    2b02:	f002 f969 	bl	4dd8 <z_impl_k_mutex_lock>
    2b06:	4b13      	ldr	r3, [pc, #76]	; (2b54 <temp_nrf5_sample_fetch+0x70>)
    2b08:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    2b0a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2b0c:	2303      	movs	r3, #3
    2b0e:	2400      	movs	r4, #0
    2b10:	4669      	mov	r1, sp
    2b12:	9403      	str	r4, [sp, #12]
    2b14:	9302      	str	r3, [sp, #8]
    2b16:	f003 fa0f 	bl	5f38 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    2b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b22:	4628      	mov	r0, r5
    2b24:	f002 fa2c 	bl	4f80 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    2b28:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2b2a:	f003 fa4e 	bl	5fca <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    2b2e:	4b0a      	ldr	r3, [pc, #40]	; (2b58 <temp_nrf5_sample_fetch+0x74>)
    2b30:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    2b34:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2b36:	2201      	movs	r2, #1
    2b38:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    2b3a:	4630      	mov	r0, r6
    2b3c:	f002 f9c4 	bl	4ec8 <z_impl_k_mutex_unlock>
	return 0;
    2b40:	4620      	mov	r0, r4
}
    2b42:	b004      	add	sp, #16
    2b44:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    2b46:	f06f 000a 	mvn.w	r0, #10
    2b4a:	e7fa      	b.n	2b42 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    2b4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b50:	e7f7      	b.n	2b42 <temp_nrf5_sample_fetch+0x5e>
    2b52:	bf00      	nop
    2b54:	00002a95 	.word	0x00002a95
    2b58:	4000c000 	.word	0x4000c000

00002b5c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    2b5c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    2b5e:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    2b60:	2000      	movs	r0, #0
    2b62:	f7ff fab1 	bl	20c8 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    2b66:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    2b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b6c:	2100      	movs	r1, #0
    2b6e:	4620      	mov	r0, r4
    2b70:	f004 fb96 	bl	72a0 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    2b74:	f104 0010 	add.w	r0, r4, #16
    2b78:	f004 fb8b 	bl	7292 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    2b7c:	2200      	movs	r2, #0
    2b7e:	2101      	movs	r1, #1
    2b80:	200c      	movs	r0, #12
    2b82:	f7fe ff33 	bl	19ec <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    2b86:	200c      	movs	r0, #12
    2b88:	f7fe fefe 	bl	1988 <arch_irq_enable>
    p_reg->INTENSET = mask;
    2b8c:	4b02      	ldr	r3, [pc, #8]	; (2b98 <temp_nrf5_init+0x3c>)
    2b8e:	2201      	movs	r2, #1
    2b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    2b94:	2000      	movs	r0, #0
    2b96:	bd10      	pop	{r4, pc}
    2b98:	4000c000 	.word	0x4000c000

00002b9c <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    2b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    2b9e:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    2ba0:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    2ba2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
	if (!ctx->tx_len) {
    2ba4:	b97b      	cbnz	r3, 2bc6 <transfer_next_chunk+0x2a>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    2ba6:	b99c      	cbnz	r4, 2bd0 <transfer_next_chunk+0x34>
	_spi_context_cs_control(ctx, on, false);
    2ba8:	2200      	movs	r2, #0
    2baa:	4611      	mov	r1, r2
    2bac:	4628      	mov	r0, r5
    2bae:	f004 f830 	bl	6c12 <_spi_context_cs_control>
	ctx->sync_status = status;
    2bb2:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    2bb4:	f105 0020 	add.w	r0, r5, #32
    2bb8:	f002 f9c2 	bl	4f40 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    2bbc:	2300      	movs	r3, #0
    2bbe:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    2bc2:	b004      	add	sp, #16
    2bc4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!ctx->rx_len) {
    2bc6:	2c00      	cmp	r4, #0
    2bc8:	d034      	beq.n	2c34 <transfer_next_chunk+0x98>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    2bca:	429c      	cmp	r4, r3
    2bcc:	bf28      	it	cs
    2bce:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    2bd0:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    2bd2:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    2bd4:	b169      	cbz	r1, 2bf2 <transfer_next_chunk+0x56>
    2bd6:	b163      	cbz	r3, 2bf2 <transfer_next_chunk+0x56>
    2bd8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    2bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2be0:	d007      	beq.n	2bf2 <transfer_next_chunk+0x56>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    2be2:	2c08      	cmp	r4, #8
    2be4:	bf28      	it	cs
    2be6:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    2be8:	6e28      	ldr	r0, [r5, #96]	; 0x60
    2bea:	4622      	mov	r2, r4
    2bec:	f003 fbec 	bl	63c8 <memcpy>
			tx_buf = dev_data->buffer;
    2bf0:	6e29      	ldr	r1, [r5, #96]	; 0x60
    2bf2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    2bf4:	9100      	str	r1, [sp, #0]
    2bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2bfa:	4294      	cmp	r4, r2
    2bfc:	bf28      	it	cs
    2bfe:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    2c00:	65ac      	str	r4, [r5, #88]	; 0x58
    2c02:	b11b      	cbz	r3, 2c0c <transfer_next_chunk+0x70>
    2c04:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2c06:	2b00      	cmp	r3, #0
    2c08:	bf18      	it	ne
    2c0a:	4623      	movne	r3, r4
    2c0c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2c0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    2c10:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    2c12:	b11b      	cbz	r3, 2c1c <transfer_next_chunk+0x80>
    2c14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2c16:	2b00      	cmp	r3, #0
    2c18:	bf18      	it	ne
    2c1a:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2c1c:	2200      	movs	r2, #0
    2c1e:	4669      	mov	r1, sp
    2c20:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2c22:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2c24:	f001 fb1e 	bl	4264 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    2c28:	4b03      	ldr	r3, [pc, #12]	; (2c38 <transfer_next_chunk+0x9c>)
    2c2a:	4298      	cmp	r0, r3
    2c2c:	d0c9      	beq.n	2bc2 <transfer_next_chunk+0x26>
			error = -EIO;
    2c2e:	f06f 0404 	mvn.w	r4, #4
    2c32:	e7b9      	b.n	2ba8 <transfer_next_chunk+0xc>
    2c34:	461c      	mov	r4, r3
    2c36:	e7cb      	b.n	2bd0 <transfer_next_chunk+0x34>
    2c38:	0bad0000 	.word	0x0bad0000

00002c3c <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    2c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c40:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    2c42:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    2c44:	6904      	ldr	r4, [r0, #16]
{
    2c46:	4681      	mov	r9, r0
    2c48:	0498      	lsls	r0, r3, #18
    2c4a:	b08b      	sub	sp, #44	; 0x2c
    2c4c:	460d      	mov	r5, r1
    2c4e:	4690      	mov	r8, r2
    2c50:	f100 80d4 	bmi.w	2dfc <spi_nrfx_transceive+0x1c0>
	return z_impl_k_sem_take(sem, timeout);
    2c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c5c:	f104 0010 	add.w	r0, r4, #16
    2c60:	f002 f98e 	bl	4f80 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    2c64:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    2c66:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    2c6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
    2c6e:	f8db 3008 	ldr.w	r3, [fp, #8]
    2c72:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    2c74:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    2c78:	9301      	str	r3, [sp, #4]
    2c7a:	b11b      	cbz	r3, 2c84 <spi_nrfx_transceive+0x48>
    2c7c:	f8da 3000 	ldr.w	r3, [sl]
    2c80:	429d      	cmp	r5, r3
    2c82:	d06d      	beq.n	2d60 <spi_nrfx_transceive+0x124>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    2c84:	88ae      	ldrh	r6, [r5, #4]
    2c86:	0531      	lsls	r1, r6, #20
    2c88:	f100 80ed 	bmi.w	2e66 <spi_nrfx_transceive+0x22a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    2c8c:	f016 0f09 	tst.w	r6, #9
    2c90:	f040 80e6 	bne.w	2e60 <spi_nrfx_transceive+0x224>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    2c94:	f3c6 1345 	ubfx	r3, r6, #5, #6
    2c98:	2b08      	cmp	r3, #8
    2c9a:	f040 80e1 	bne.w	2e60 <spi_nrfx_transceive+0x224>
	if (spi_cfg->frequency < 125000) {
    2c9e:	682b      	ldr	r3, [r5, #0]
    2ca0:	9302      	str	r3, [sp, #8]
    2ca2:	9a02      	ldr	r2, [sp, #8]
    2ca4:	4b7b      	ldr	r3, [pc, #492]	; (2e94 <spi_nrfx_transceive+0x258>)
    2ca6:	429a      	cmp	r2, r3
    2ca8:	f240 80da 	bls.w	2e60 <spi_nrfx_transceive+0x224>
	config = dev_config->def_config;
    2cac:	f10b 0e0c 	add.w	lr, fp, #12
    2cb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2cb4:	f10d 0c10 	add.w	ip, sp, #16
    2cb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    2cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2cc0:	4293      	cmp	r3, r2
    2cc2:	bf28      	it	cs
    2cc4:	4613      	movcs	r3, r2
	config = dev_config->def_config;
    2cc6:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    2cca:	4a73      	ldr	r2, [pc, #460]	; (2e98 <spi_nrfx_transceive+0x25c>)
    2ccc:	4293      	cmp	r3, r2
	config = dev_config->def_config;
    2cce:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
    2cd2:	f240 809c 	bls.w	2e0e <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 500000) {
    2cd6:	4a71      	ldr	r2, [pc, #452]	; (2e9c <spi_nrfx_transceive+0x260>)
    2cd8:	4293      	cmp	r3, r2
    2cda:	f240 809b 	bls.w	2e14 <spi_nrfx_transceive+0x1d8>
	} else if (frequency < 1000000) {
    2cde:	4a70      	ldr	r2, [pc, #448]	; (2ea0 <spi_nrfx_transceive+0x264>)
    2ce0:	4293      	cmp	r3, r2
    2ce2:	f240 809a 	bls.w	2e1a <spi_nrfx_transceive+0x1de>
	} else if (frequency < 2000000) {
    2ce6:	4a6f      	ldr	r2, [pc, #444]	; (2ea4 <spi_nrfx_transceive+0x268>)
    2ce8:	4293      	cmp	r3, r2
    2cea:	f240 8099 	bls.w	2e20 <spi_nrfx_transceive+0x1e4>
	} else if (frequency < 4000000) {
    2cee:	4a6e      	ldr	r2, [pc, #440]	; (2ea8 <spi_nrfx_transceive+0x26c>)
    2cf0:	4293      	cmp	r3, r2
    2cf2:	f240 8098 	bls.w	2e26 <spi_nrfx_transceive+0x1ea>
	} else if (frequency < 8000000) {
    2cf6:	4a6d      	ldr	r2, [pc, #436]	; (2eac <spi_nrfx_transceive+0x270>)
    2cf8:	4293      	cmp	r3, r2
    2cfa:	f0c0 8097 	bcc.w	2e2c <spi_nrfx_transceive+0x1f0>
	} else if (frequency < 16000000) {
    2cfe:	4a6c      	ldr	r2, [pc, #432]	; (2eb0 <spi_nrfx_transceive+0x274>)
    2d00:	4293      	cmp	r3, r2
    2d02:	f0c0 8096 	bcc.w	2e32 <spi_nrfx_transceive+0x1f6>
		return NRF_SPIM_FREQ_32M;
    2d06:	4a6b      	ldr	r2, [pc, #428]	; (2eb4 <spi_nrfx_transceive+0x278>)
    2d08:	4293      	cmp	r3, r2
    2d0a:	bf34      	ite	cc
    2d0c:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
    2d10:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2d14:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    2d16:	9306      	str	r3, [sp, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2d18:	f006 0304 	and.w	r3, r6, #4
    2d1c:	f140 808c 	bpl.w	2e38 <spi_nrfx_transceive+0x1fc>
			return NRF_SPIM_MODE_2;
    2d20:	2b00      	cmp	r3, #0
    2d22:	bf14      	ite	ne
    2d24:	2303      	movne	r3, #3
    2d26:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    2d28:	f88d 301c 	strb.w	r3, [sp, #28]
	if (dev_data->initialized) {
    2d2c:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    2d2e:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    2d32:	f88d 601d 	strb.w	r6, [sp, #29]
	if (dev_data->initialized) {
    2d36:	b12b      	cbz	r3, 2d44 <spi_nrfx_transceive+0x108>
		nrfx_spim_uninit(&dev_config->spim);
    2d38:	4658      	mov	r0, fp
    2d3a:	f001 fa3d 	bl	41b8 <nrfx_spim_uninit>
		dev_data->initialized = false;
    2d3e:	2300      	movs	r3, #0
    2d40:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    2d44:	4653      	mov	r3, sl
    2d46:	4a5c      	ldr	r2, [pc, #368]	; (2eb8 <spi_nrfx_transceive+0x27c>)
    2d48:	a904      	add	r1, sp, #16
    2d4a:	4658      	mov	r0, fp
    2d4c:	f001 f936 	bl	3fbc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    2d50:	4b5a      	ldr	r3, [pc, #360]	; (2ebc <spi_nrfx_transceive+0x280>)
    2d52:	4298      	cmp	r0, r3
    2d54:	d174      	bne.n	2e40 <spi_nrfx_transceive+0x204>
	dev_data->initialized = true;
    2d56:	2301      	movs	r3, #1
    2d58:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    2d5c:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
    2d60:	2301      	movs	r3, #1
    2d62:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    2d66:	f1b8 0f00 	cmp.w	r8, #0
    2d6a:	d17f      	bne.n	2e6c <spi_nrfx_transceive+0x230>
    2d6c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2d70:	4642      	mov	r2, r8
    2d72:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    2d74:	f104 0138 	add.w	r1, r4, #56	; 0x38
    2d78:	f104 0248 	add.w	r2, r4, #72	; 0x48
    2d7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2d80:	f003 ff22 	bl	6bc8 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    2d84:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2d86:	2f00      	cmp	r7, #0
    2d88:	d179      	bne.n	2e7e <spi_nrfx_transceive+0x242>
    2d8a:	63e7      	str	r7, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    2d8c:	6427      	str	r7, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    2d8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2d92:	f104 0140 	add.w	r1, r4, #64	; 0x40
    2d96:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    2d9a:	f003 ff15 	bl	6bc8 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    2d9e:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    2da0:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    2da2:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    2da4:	2101      	movs	r1, #1
    2da6:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    2da8:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    2daa:	f003 ff32 	bl	6c12 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    2dae:	4648      	mov	r0, r9
    2db0:	f7ff fef4 	bl	2b9c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    2db4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    2db6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    2db8:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    2dba:	429d      	cmp	r5, r3
    2dbc:	bf38      	it	cc
    2dbe:	461d      	movcc	r5, r3
    2dc0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    2dc4:	435d      	muls	r5, r3
			     ctx->config->frequency;
    2dc6:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2dca:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	fbb5 f5f3 	udiv	r5, r5, r3
    2dd4:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    2dd6:	35c8      	adds	r5, #200	; 0xc8
    2dd8:	f240 30e7 	movw	r0, #999	; 0x3e7
    2ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2de0:	2300      	movs	r3, #0
    2de2:	fbe5 010c 	umlal	r0, r1, r5, ip
    2de6:	f7fd f9db 	bl	1a0 <__aeabi_uldivmod>
    2dea:	4602      	mov	r2, r0
    2dec:	460b      	mov	r3, r1
    2dee:	4638      	mov	r0, r7
    2df0:	f002 f8c6 	bl	4f80 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    2df4:	2800      	cmp	r0, #0
    2df6:	d149      	bne.n	2e8c <spi_nrfx_transceive+0x250>
	status = ctx->sync_status;
    2df8:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    2dfa:	e023      	b.n	2e44 <spi_nrfx_transceive+0x208>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    2dfc:	69a3      	ldr	r3, [r4, #24]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	f47f af28 	bne.w	2c54 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    2e04:	6863      	ldr	r3, [r4, #4]
    2e06:	4299      	cmp	r1, r3
    2e08:	f47f af24 	bne.w	2c54 <spi_nrfx_transceive+0x18>
    2e0c:	e72b      	b.n	2c66 <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
    2e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    2e12:	e77f      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_250K;
    2e14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2e18:	e77c      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_500K;
    2e1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2e1e:	e779      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_1M;
    2e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2e24:	e776      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_2M;
    2e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2e2a:	e773      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_4M;
    2e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e30:	e770      	b.n	2d14 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_8M;
    2e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    2e36:	e76d      	b.n	2d14 <spi_nrfx_transceive+0xd8>
			return NRF_SPIM_MODE_0;
    2e38:	3b00      	subs	r3, #0
    2e3a:	bf18      	it	ne
    2e3c:	2301      	movne	r3, #1
    2e3e:	e773      	b.n	2d28 <spi_nrfx_transceive+0xec>
		return -EIO;
    2e40:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    2e44:	6823      	ldr	r3, [r4, #0]
    2e46:	889b      	ldrh	r3, [r3, #4]
    2e48:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    2e4c:	d104      	bne.n	2e58 <spi_nrfx_transceive+0x21c>
		ctx->owner = NULL;
    2e4e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    2e50:	f104 0010 	add.w	r0, r4, #16
    2e54:	f002 f874 	bl	4f40 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    2e58:	4628      	mov	r0, r5
    2e5a:	b00b      	add	sp, #44	; 0x2c
    2e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    2e60:	f06f 0515 	mvn.w	r5, #21
    2e64:	e7ee      	b.n	2e44 <spi_nrfx_transceive+0x208>
		return -ENOTSUP;
    2e66:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2e6a:	e7eb      	b.n	2e44 <spi_nrfx_transceive+0x208>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    2e6c:	f8d8 2000 	ldr.w	r2, [r8]
    2e70:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2e72:	2a00      	cmp	r2, #0
    2e74:	f43f af7d 	beq.w	2d72 <spi_nrfx_transceive+0x136>
    2e78:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2e7c:	e779      	b.n	2d72 <spi_nrfx_transceive+0x136>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2e7e:	683b      	ldr	r3, [r7, #0]
    2e80:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    2e82:	b10b      	cbz	r3, 2e88 <spi_nrfx_transceive+0x24c>
    2e84:	687f      	ldr	r7, [r7, #4]
    2e86:	e781      	b.n	2d8c <spi_nrfx_transceive+0x150>
    2e88:	461f      	mov	r7, r3
    2e8a:	e77f      	b.n	2d8c <spi_nrfx_transceive+0x150>
		return -ETIMEDOUT;
    2e8c:	f06f 0573 	mvn.w	r5, #115	; 0x73
    2e90:	e7d8      	b.n	2e44 <spi_nrfx_transceive+0x208>
    2e92:	bf00      	nop
    2e94:	0001e847 	.word	0x0001e847
    2e98:	0003d08f 	.word	0x0003d08f
    2e9c:	0007a11f 	.word	0x0007a11f
    2ea0:	000f423f 	.word	0x000f423f
    2ea4:	001e847f 	.word	0x001e847f
    2ea8:	003d08ff 	.word	0x003d08ff
    2eac:	007a1200 	.word	0x007a1200
    2eb0:	00f42400 	.word	0x00f42400
    2eb4:	01e84800 	.word	0x01e84800
    2eb8:	00006d47 	.word	0x00006d47
    2ebc:	0bad0000 	.word	0x0bad0000

00002ec0 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ec0:	4b07      	ldr	r3, [pc, #28]	; (2ee0 <uart_nrfx_poll_in+0x20>)
    2ec2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2ec6:	b142      	cbz	r2, 2eda <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ec8:	2000      	movs	r0, #0
    2eca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    2ece:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    2ed2:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2ed6:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    2ed8:	4770      	bx	lr
		return -1;
    2eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2ede:	4770      	bx	lr
    2ee0:	40002000 	.word	0x40002000

00002ee4 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2ee4:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <uart_nrfx_err_check+0xc>)
    2ee6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2eea:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    2eee:	4770      	bx	lr
    2ef0:	40002000 	.word	0x40002000

00002ef4 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    2ef4:	b570      	push	{r4, r5, r6, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2ef6:	794b      	ldrb	r3, [r1, #5]
    2ef8:	2b01      	cmp	r3, #1
    2efa:	d024      	beq.n	2f46 <uart_nrfx_configure+0x52>
    2efc:	2b03      	cmp	r3, #3
    2efe:	d11f      	bne.n	2f40 <uart_nrfx_configure+0x4c>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    2f00:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2f02:	798b      	ldrb	r3, [r1, #6]
    2f04:	2b03      	cmp	r3, #3
    2f06:	d11b      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2f08:	79cc      	ldrb	r4, [r1, #7]
    2f0a:	b9cc      	cbnz	r4, 2f40 <uart_nrfx_configure+0x4c>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2f0c:	790a      	ldrb	r2, [r1, #4]
    2f0e:	2a01      	cmp	r2, #1
    2f10:	d01b      	beq.n	2f4a <uart_nrfx_configure+0x56>
    2f12:	2a02      	cmp	r2, #2
    2f14:	d01b      	beq.n	2f4e <uart_nrfx_configure+0x5a>
    2f16:	b99a      	cbnz	r2, 2f40 <uart_nrfx_configure+0x4c>
    2f18:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2f1a:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2f1c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2f20:	d066      	beq.n	2ff0 <uart_nrfx_configure+0xfc>
    2f22:	d831      	bhi.n	2f88 <uart_nrfx_configure+0x94>
    2f24:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2f28:	d064      	beq.n	2ff4 <uart_nrfx_configure+0x100>
    2f2a:	d81a      	bhi.n	2f62 <uart_nrfx_configure+0x6e>
    2f2c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2f30:	d062      	beq.n	2ff8 <uart_nrfx_configure+0x104>
    2f32:	d80e      	bhi.n	2f52 <uart_nrfx_configure+0x5e>
    2f34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2f38:	d061      	beq.n	2ffe <uart_nrfx_configure+0x10a>
    2f3a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2f3e:	d061      	beq.n	3004 <uart_nrfx_configure+0x110>
    2f40:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2f44:	e053      	b.n	2fee <uart_nrfx_configure+0xfa>
	switch (cfg->stop_bits) {
    2f46:	2600      	movs	r6, #0
    2f48:	e7db      	b.n	2f02 <uart_nrfx_configure+0xe>
		uart_cfg.paritytype = NRF_UART_PARITYTYPE_ODD;
    2f4a:	f44f 7480 	mov.w	r4, #256	; 0x100
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    2f4e:	220e      	movs	r2, #14
    2f50:	e7e3      	b.n	2f1a <uart_nrfx_configure+0x26>
	switch (baudrate) {
    2f52:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f56:	d058      	beq.n	300a <uart_nrfx_configure+0x116>
    2f58:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2f5c:	d1f0      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2f5e:	4b35      	ldr	r3, [pc, #212]	; (3034 <uart_nrfx_configure+0x140>)
    2f60:	e039      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2f62:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2f66:	d053      	beq.n	3010 <uart_nrfx_configure+0x11c>
    2f68:	d807      	bhi.n	2f7a <uart_nrfx_configure+0x86>
    2f6a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2f6e:	d051      	beq.n	3014 <uart_nrfx_configure+0x120>
    2f70:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f74:	d1e4      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2f76:	4b30      	ldr	r3, [pc, #192]	; (3038 <uart_nrfx_configure+0x144>)
    2f78:	e02d      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2f7a:	f647 2512 	movw	r5, #31250	; 0x7a12
    2f7e:	42ab      	cmp	r3, r5
    2f80:	d1de      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2f82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f86:	e026      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2f88:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f8c:	d045      	beq.n	301a <uart_nrfx_configure+0x126>
    2f8e:	d811      	bhi.n	2fb4 <uart_nrfx_configure+0xc0>
    2f90:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f94:	d043      	beq.n	301e <uart_nrfx_configure+0x12a>
    2f96:	d808      	bhi.n	2faa <uart_nrfx_configure+0xb6>
    2f98:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2f9c:	42ab      	cmp	r3, r5
    2f9e:	d040      	beq.n	3022 <uart_nrfx_configure+0x12e>
    2fa0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2fa4:	d1cc      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2fa6:	4b25      	ldr	r3, [pc, #148]	; (303c <uart_nrfx_configure+0x148>)
    2fa8:	e015      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2faa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2fae:	d1c7      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2fb0:	4b23      	ldr	r3, [pc, #140]	; (3040 <uart_nrfx_configure+0x14c>)
    2fb2:	e010      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2fb4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2fb8:	d036      	beq.n	3028 <uart_nrfx_configure+0x134>
    2fba:	d807      	bhi.n	2fcc <uart_nrfx_configure+0xd8>
    2fbc:	4d21      	ldr	r5, [pc, #132]	; (3044 <uart_nrfx_configure+0x150>)
    2fbe:	42ab      	cmp	r3, r5
    2fc0:	d034      	beq.n	302c <uart_nrfx_configure+0x138>
    2fc2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2fc6:	d1bb      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2fc8:	4b1f      	ldr	r3, [pc, #124]	; (3048 <uart_nrfx_configure+0x154>)
    2fca:	e004      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    2fcc:	4d1f      	ldr	r5, [pc, #124]	; (304c <uart_nrfx_configure+0x158>)
    2fce:	42ab      	cmp	r3, r5
    2fd0:	d1b6      	bne.n	2f40 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
    2fd6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2fd8:	481d      	ldr	r0, [pc, #116]	; (3050 <uart_nrfx_configure+0x15c>)
                    | (uint32_t)p_cfg->stop
    2fda:	4332      	orrs	r2, r6
                    | (uint32_t)p_cfg->paritytype
    2fdc:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2fde:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2fe2:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
    2fe6:	c903      	ldmia	r1, {r0, r1}
    2fe8:	e885 0003 	stmia.w	r5, {r0, r1}

	return 0;
    2fec:	2000      	movs	r0, #0
}
    2fee:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2ff0:	4b18      	ldr	r3, [pc, #96]	; (3054 <uart_nrfx_configure+0x160>)
    2ff2:	e7f0      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2ff4:	4b18      	ldr	r3, [pc, #96]	; (3058 <uart_nrfx_configure+0x164>)
    2ff6:	e7ee      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2ff8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2ffc:	e7eb      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    2ffe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3002:	e7e8      	b.n	2fd6 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    3004:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3008:	e7e5      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    300a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    300e:	e7e2      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3010:	4b12      	ldr	r3, [pc, #72]	; (305c <uart_nrfx_configure+0x168>)
    3012:	e7e0      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3014:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3018:	e7dd      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    301a:	4b11      	ldr	r3, [pc, #68]	; (3060 <uart_nrfx_configure+0x16c>)
    301c:	e7db      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    301e:	4b11      	ldr	r3, [pc, #68]	; (3064 <uart_nrfx_configure+0x170>)
    3020:	e7d9      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3022:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3026:	e7d6      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3028:	4b0f      	ldr	r3, [pc, #60]	; (3068 <uart_nrfx_configure+0x174>)
    302a:	e7d4      	b.n	2fd6 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    302c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3030:	e7d1      	b.n	2fd6 <uart_nrfx_configure+0xe2>
    3032:	bf00      	nop
    3034:	0013b000 	.word	0x0013b000
    3038:	004ea000 	.word	0x004ea000
    303c:	00ebf000 	.word	0x00ebf000
    3040:	01d7e000 	.word	0x01d7e000
    3044:	0003d090 	.word	0x0003d090
    3048:	075f7000 	.word	0x075f7000
    304c:	000f4240 	.word	0x000f4240
    3050:	40002000 	.word	0x40002000
    3054:	009d5000 	.word	0x009d5000
    3058:	00275000 	.word	0x00275000
    305c:	0075f000 	.word	0x0075f000
    3060:	03afb000 	.word	0x03afb000
    3064:	013a9000 	.word	0x013a9000
    3068:	0ebed000 	.word	0x0ebed000

0000306c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    306c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
    306e:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    3070:	4c12      	ldr	r4, [pc, #72]	; (30bc <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    3072:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
    3074:	6907      	ldr	r7, [r0, #16]
    3076:	2100      	movs	r1, #0
{
    3078:	4605      	mov	r5, r0
    307a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    307e:	aa01      	add	r2, sp, #4
    3080:	4630      	mov	r0, r6
    3082:	f003 fead 	bl	6de0 <pinctrl_lookup_state>
	if (ret < 0) {
    3086:	2800      	cmp	r0, #0
    3088:	db15      	blt.n	30b6 <uart_nrfx_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    308a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    308c:	6832      	ldr	r2, [r6, #0]
    308e:	7919      	ldrb	r1, [r3, #4]
    3090:	6818      	ldr	r0, [r3, #0]
    3092:	f003 fedc 	bl	6e4e <pinctrl_configure_pins>
	if (err < 0) {
    3096:	2800      	cmp	r0, #0
    3098:	db0d      	blt.n	30b6 <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
    309a:	4639      	mov	r1, r7
    309c:	4628      	mov	r0, r5
    309e:	f7ff ff29 	bl	2ef4 <uart_nrfx_configure>
	if (err) {
    30a2:	b940      	cbnz	r0, 30b6 <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    30a4:	2304      	movs	r3, #4
    30a6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30aa:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    30ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30b2:	2301      	movs	r3, #1
    30b4:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    30b6:	b003      	add	sp, #12
    30b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30ba:	bf00      	nop
    30bc:	40002000 	.word	0x40002000

000030c0 <uart_nrfx_poll_out>:
{
    30c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30c2:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    30c4:	f004 f8cb 	bl	725e <k_is_in_isr>
    30c8:	4d1a      	ldr	r5, [pc, #104]	; (3134 <uart_nrfx_poll_out+0x74>)
    30ca:	bb78      	cbnz	r0, 312c <uart_nrfx_poll_out+0x6c>
    30cc:	2464      	movs	r4, #100	; 0x64
    30ce:	2701      	movs	r7, #1
    30d0:	f3bf 8f5b 	dmb	ish
    30d4:	e855 3f00 	ldrex	r3, [r5]
    30d8:	2b00      	cmp	r3, #0
    30da:	d103      	bne.n	30e4 <uart_nrfx_poll_out+0x24>
    30dc:	e845 7200 	strex	r2, r7, [r5]
    30e0:	2a00      	cmp	r2, #0
    30e2:	d1f7      	bne.n	30d4 <uart_nrfx_poll_out+0x14>
    30e4:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    30e8:	d007      	beq.n	30fa <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    30ea:	2021      	movs	r0, #33	; 0x21
    30ec:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    30ee:	3c01      	subs	r4, #1
    30f0:	f002 fb64 	bl	57bc <z_impl_k_sleep>
    30f4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    30f8:	d1ea      	bne.n	30d0 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30fa:	4c0f      	ldr	r4, [pc, #60]	; (3138 <uart_nrfx_poll_out+0x78>)
    30fc:	2300      	movs	r3, #0
    30fe:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    3102:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3106:	2301      	movs	r3, #1
    3108:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    310a:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    310e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3112:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    3116:	b923      	cbnz	r3, 3122 <uart_nrfx_poll_out+0x62>
    3118:	2001      	movs	r0, #1
    311a:	f003 ff09 	bl	6f30 <nrfx_busy_wait>
    311e:	3e01      	subs	r6, #1
    3120:	d1f7      	bne.n	3112 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3122:	2301      	movs	r3, #1
    3124:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    3126:	2300      	movs	r3, #0
    3128:	602b      	str	r3, [r5, #0]
}
    312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    312c:	2301      	movs	r3, #1
    312e:	602b      	str	r3, [r5, #0]
    3130:	e7e3      	b.n	30fa <uart_nrfx_poll_out+0x3a>
    3132:	bf00      	nop
    3134:	200004bc 	.word	0x200004bc
    3138:	40002000 	.word	0x40002000

0000313c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    313c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    313e:	2301      	movs	r3, #1
    3140:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3142:	4a11      	ldr	r2, [pc, #68]	; (3188 <compare_int_lock+0x4c>)
    3144:	f3bf 8f5b 	dmb	ish
    3148:	43dc      	mvns	r4, r3
    314a:	e852 1f00 	ldrex	r1, [r2]
    314e:	ea01 0c04 	and.w	ip, r1, r4
    3152:	e842 ce00 	strex	lr, ip, [r2]
    3156:	f1be 0f00 	cmp.w	lr, #0
    315a:	d1f6      	bne.n	314a <compare_int_lock+0xe>
    315c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3164:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3168:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    316c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3170:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3174:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3178:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    317c:	420b      	tst	r3, r1
}
    317e:	bf14      	ite	ne
    3180:	2001      	movne	r0, #1
    3182:	2000      	moveq	r0, #0
    3184:	bd10      	pop	{r4, pc}
    3186:	bf00      	nop
    3188:	200004c4 	.word	0x200004c4

0000318c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    318c:	4919      	ldr	r1, [pc, #100]	; (31f4 <sys_clock_timeout_handler+0x68>)
{
    318e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3190:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3192:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3196:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3198:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    319c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    31a0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    31a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    31a6:	d222      	bcs.n	31ee <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    31a8:	4b13      	ldr	r3, [pc, #76]	; (31f8 <sys_clock_timeout_handler+0x6c>)
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	0a1a      	lsrs	r2, r3, #8
    31ae:	061b      	lsls	r3, r3, #24
    31b0:	195e      	adds	r6, r3, r5
    31b2:	4b12      	ldr	r3, [pc, #72]	; (31fc <sys_clock_timeout_handler+0x70>)
    31b4:	f142 0700 	adc.w	r7, r2, #0
    31b8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    31bc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    31be:	f002 fc6d 	bl	5a9c <sys_clock_announce>
    return p_reg->CC[ch];
    31c2:	00a3      	lsls	r3, r4, #2
    31c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31c8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    31cc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    31d0:	42aa      	cmp	r2, r5
    31d2:	d10b      	bne.n	31ec <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    31d4:	b91e      	cbnz	r6, 31de <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    31d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    31da:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    31de:	4b08      	ldr	r3, [pc, #32]	; (3200 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    31e4:	fa00 f404 	lsl.w	r4, r0, r4
    31e8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    31ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    31ee:	2600      	movs	r6, #0
    31f0:	e7e5      	b.n	31be <sys_clock_timeout_handler+0x32>
    31f2:	bf00      	nop
    31f4:	200001e0 	.word	0x200001e0
    31f8:	200004c8 	.word	0x200004c8
    31fc:	200001c8 	.word	0x200001c8
    3200:	40011000 	.word	0x40011000

00003204 <compare_int_unlock>:
	if (key) {
    3204:	b319      	cbz	r1, 324e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3206:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    320a:	2301      	movs	r3, #1
    320c:	4a10      	ldr	r2, [pc, #64]	; (3250 <compare_int_unlock+0x4c>)
    320e:	4083      	lsls	r3, r0
    3210:	e852 1f00 	ldrex	r1, [r2]
    3214:	4319      	orrs	r1, r3
    3216:	e842 1c00 	strex	ip, r1, [r2]
    321a:	f1bc 0f00 	cmp.w	ip, #0
    321e:	d1f7      	bne.n	3210 <compare_int_unlock+0xc>
    3220:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3224:	4a0b      	ldr	r2, [pc, #44]	; (3254 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    322a:	4083      	lsls	r3, r0
    322c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <compare_int_unlock+0x54>)
    3232:	f3bf 8f5b 	dmb	ish
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    323c:	fa23 f000 	lsr.w	r0, r3, r0
    3240:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3242:	bf42      	ittt	mi
    3244:	4b05      	ldrmi	r3, [pc, #20]	; (325c <compare_int_unlock+0x58>)
    3246:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    324a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    324e:	4770      	bx	lr
    3250:	200004c4 	.word	0x200004c4
    3254:	40011000 	.word	0x40011000
    3258:	200004c0 	.word	0x200004c0
    325c:	e000e100 	.word	0xe000e100

00003260 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3260:	4b0d      	ldr	r3, [pc, #52]	; (3298 <z_nrf_rtc_timer_read+0x38>)
    3262:	6818      	ldr	r0, [r3, #0]
    3264:	0a01      	lsrs	r1, r0, #8
    3266:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3268:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    326c:	4b0b      	ldr	r3, [pc, #44]	; (329c <z_nrf_rtc_timer_read+0x3c>)
    326e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3272:	1818      	adds	r0, r3, r0
    3274:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    327c:	d20a      	bcs.n	3294 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    327e:	4b08      	ldr	r3, [pc, #32]	; (32a0 <z_nrf_rtc_timer_read+0x40>)
    3280:	e9d3 2300 	ldrd	r2, r3, [r3]
    3284:	4290      	cmp	r0, r2
    3286:	eb71 0303 	sbcs.w	r3, r1, r3
    328a:	d203      	bcs.n	3294 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    328c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3290:	f141 0100 	adc.w	r1, r1, #0
}
    3294:	4770      	bx	lr
    3296:	bf00      	nop
    3298:	200004c8 	.word	0x200004c8
    329c:	40011000 	.word	0x40011000
    32a0:	200001c8 	.word	0x200001c8

000032a4 <compare_set>:
{
    32a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32a8:	b085      	sub	sp, #20
    32aa:	4616      	mov	r6, r2
    32ac:	4698      	mov	r8, r3
    32ae:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    32b0:	f7ff ff44 	bl	313c <compare_int_lock>
    32b4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    32b6:	f7ff ffd3 	bl	3260 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    32ba:	42b0      	cmp	r0, r6
    32bc:	eb71 0308 	sbcs.w	r3, r1, r8
    32c0:	d278      	bcs.n	33b4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    32c2:	4b46      	ldr	r3, [pc, #280]	; (33dc <compare_set+0x138>)
    32c4:	1a30      	subs	r0, r6, r0
    32c6:	eb68 0101 	sbc.w	r1, r8, r1
    32ca:	4298      	cmp	r0, r3
    32cc:	f171 0300 	sbcs.w	r3, r1, #0
    32d0:	f080 8081 	bcs.w	33d6 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    32d4:	4b42      	ldr	r3, [pc, #264]	; (33e0 <compare_set+0x13c>)
    32d6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    32da:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    32de:	45d8      	cmp	r8, fp
    32e0:	bf08      	it	eq
    32e2:	4556      	cmpeq	r6, sl
    32e4:	d051      	beq.n	338a <compare_set+0xe6>
    32e6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    32ea:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    32ee:	f105 0750 	add.w	r7, r5, #80	; 0x50
    32f2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    32f6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    32fc:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3300:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3302:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3306:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    330a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    330c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3310:	4b34      	ldr	r3, [pc, #208]	; (33e4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3312:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3316:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3318:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    331c:	1a40      	subs	r0, r0, r1
    331e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3322:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3326:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3328:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    332c:	d107      	bne.n	333e <compare_set+0x9a>
    332e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3332:	2013      	movs	r0, #19
    3334:	f004 f921 	bl	757a <z_impl_k_busy_wait>
    3338:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    333c:	4b29      	ldr	r3, [pc, #164]	; (33e4 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    333e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3342:	eba4 000c 	sub.w	r0, r4, ip
    3346:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    334a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    334e:	bf88      	it	hi
    3350:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3352:	2000      	movs	r0, #0
    3354:	6038      	str	r0, [r7, #0]
    3356:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3358:	9801      	ldr	r0, [sp, #4]
    335a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    335e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3362:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3366:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    336a:	4281      	cmp	r1, r0
    336c:	d006      	beq.n	337c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    336e:	1a20      	subs	r0, r4, r0
    3370:	3802      	subs	r0, #2
    3372:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3376:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    337a:	d819      	bhi.n	33b0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    337c:	1aa4      	subs	r4, r4, r2
    337e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3382:	eb14 0a06 	adds.w	sl, r4, r6
    3386:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    338a:	4915      	ldr	r1, [pc, #84]	; (33e0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    338c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    338e:	012b      	lsls	r3, r5, #4
    3390:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3394:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3398:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    339a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    339c:	6053      	str	r3, [r2, #4]
	return ret;
    339e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    33a0:	4628      	mov	r0, r5
    33a2:	9900      	ldr	r1, [sp, #0]
    33a4:	f7ff ff2e 	bl	3204 <compare_int_unlock>
}
    33a8:	4620      	mov	r0, r4
    33aa:	b005      	add	sp, #20
    33ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33b0:	4620      	mov	r0, r4
    33b2:	e7b1      	b.n	3318 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    33b4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    33b6:	4a0c      	ldr	r2, [pc, #48]	; (33e8 <compare_set+0x144>)
    33b8:	f3bf 8f5b 	dmb	ish
    33bc:	40ab      	lsls	r3, r5
    33be:	e852 1f00 	ldrex	r1, [r2]
    33c2:	4319      	orrs	r1, r3
    33c4:	e842 1000 	strex	r0, r1, [r2]
    33c8:	2800      	cmp	r0, #0
    33ca:	d1f8      	bne.n	33be <compare_set+0x11a>
    33cc:	f3bf 8f5b 	dmb	ish
    33d0:	46b2      	mov	sl, r6
    33d2:	46c3      	mov	fp, r8
    33d4:	e7d9      	b.n	338a <compare_set+0xe6>
			return -EINVAL;
    33d6:	f06f 0415 	mvn.w	r4, #21
    33da:	e7e1      	b.n	33a0 <compare_set+0xfc>
    33dc:	01000001 	.word	0x01000001
    33e0:	200001d0 	.word	0x200001d0
    33e4:	40011000 	.word	0x40011000
    33e8:	200004c0 	.word	0x200004c0

000033ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    33ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    33ee:	4b19      	ldr	r3, [pc, #100]	; (3454 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    33f0:	4d19      	ldr	r5, [pc, #100]	; (3458 <sys_clock_driver_init+0x6c>)
    33f2:	2400      	movs	r4, #0
    33f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3400:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3408:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    340c:	4b13      	ldr	r3, [pc, #76]	; (345c <sys_clock_driver_init+0x70>)
    340e:	2602      	movs	r6, #2
    3410:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3414:	2101      	movs	r1, #1
    3416:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    341a:	2011      	movs	r0, #17
    341c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3420:	4622      	mov	r2, r4
    3422:	f7fe fae3 	bl	19ec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3426:	2011      	movs	r0, #17
    3428:	f7fe faae 	bl	1988 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    342c:	4a0c      	ldr	r2, [pc, #48]	; (3460 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    342e:	2301      	movs	r3, #1
    3430:	60ab      	str	r3, [r5, #8]
    3432:	602b      	str	r3, [r5, #0]
    3434:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3436:	4b0b      	ldr	r3, [pc, #44]	; (3464 <sys_clock_driver_init+0x78>)
    3438:	4a0b      	ldr	r2, [pc, #44]	; (3468 <sys_clock_driver_init+0x7c>)
    343a:	9300      	str	r3, [sp, #0]
    343c:	9401      	str	r4, [sp, #4]
    343e:	2300      	movs	r3, #0
    3440:	4620      	mov	r0, r4
    3442:	f7ff ff2f 	bl	32a4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3446:	4630      	mov	r0, r6
    3448:	f7fe fe46 	bl	20d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    344c:	4620      	mov	r0, r4
    344e:	b002      	add	sp, #8
    3450:	bd70      	pop	{r4, r5, r6, pc}
    3452:	bf00      	nop
    3454:	200001d0 	.word	0x200001d0
    3458:	40011000 	.word	0x40011000
    345c:	e000e100 	.word	0xe000e100
    3460:	200004c4 	.word	0x200004c4
    3464:	0000318d 	.word	0x0000318d
    3468:	007fffff 	.word	0x007fffff

0000346c <rtc_nrf_isr>:
{
    346c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3470:	4c35      	ldr	r4, [pc, #212]	; (3548 <rtc_nrf_isr+0xdc>)
    3472:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3476:	079a      	lsls	r2, r3, #30
    3478:	d50b      	bpl.n	3492 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    347a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    347e:	b143      	cbz	r3, 3492 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3480:	4a32      	ldr	r2, [pc, #200]	; (354c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3482:	2300      	movs	r3, #0
    3484:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3488:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    348c:	6813      	ldr	r3, [r2, #0]
    348e:	3301      	adds	r3, #1
    3490:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3492:	f04f 0320 	mov.w	r3, #32
    3496:	f3ef 8211 	mrs	r2, BASEPRI
    349a:	f383 8812 	msr	BASEPRI_MAX, r3
    349e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    34a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    34a6:	03db      	lsls	r3, r3, #15
    34a8:	d512      	bpl.n	34d0 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    34aa:	f3bf 8f5b 	dmb	ish
    34ae:	4b28      	ldr	r3, [pc, #160]	; (3550 <rtc_nrf_isr+0xe4>)
    34b0:	e853 1f00 	ldrex	r1, [r3]
    34b4:	f021 0001 	bic.w	r0, r1, #1
    34b8:	e843 0600 	strex	r6, r0, [r3]
    34bc:	2e00      	cmp	r6, #0
    34be:	d1f7      	bne.n	34b0 <rtc_nrf_isr+0x44>
    34c0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    34c4:	2900      	cmp	r1, #0
    34c6:	d136      	bne.n	3536 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    34cc:	2b00      	cmp	r3, #0
    34ce:	d132      	bne.n	3536 <rtc_nrf_isr+0xca>
{
    34d0:	2300      	movs	r3, #0
	__asm__ volatile(
    34d2:	f382 8811 	msr	BASEPRI, r2
    34d6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    34da:	b34b      	cbz	r3, 3530 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    34dc:	f7ff fec0 	bl	3260 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    34e0:	f04f 0320 	mov.w	r3, #32
    34e4:	f3ef 8c11 	mrs	ip, BASEPRI
    34e8:	f383 8812 	msr	BASEPRI_MAX, r3
    34ec:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    34f0:	4b18      	ldr	r3, [pc, #96]	; (3554 <rtc_nrf_isr+0xe8>)
    34f2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    34f6:	42b0      	cmp	r0, r6
    34f8:	eb71 0207 	sbcs.w	r2, r1, r7
    34fc:	f04f 0200 	mov.w	r2, #0
    3500:	d320      	bcc.n	3544 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3502:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    350a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    350e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3512:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3518:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    351c:	f38c 8811 	msr	BASEPRI, ip
    3520:	f3bf 8f6f 	isb	sy
		if (handler) {
    3524:	b121      	cbz	r1, 3530 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3526:	9500      	str	r5, [sp, #0]
    3528:	4632      	mov	r2, r6
    352a:	463b      	mov	r3, r7
    352c:	2000      	movs	r0, #0
    352e:	4788      	blx	r1
}
    3530:	b003      	add	sp, #12
    3532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3536:	2300      	movs	r3, #0
    3538:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    353c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3540:	2301      	movs	r3, #1
}
    3542:	e7c6      	b.n	34d2 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3544:	4611      	mov	r1, r2
    3546:	e7e9      	b.n	351c <rtc_nrf_isr+0xb0>
    3548:	40011000 	.word	0x40011000
    354c:	200004c8 	.word	0x200004c8
    3550:	200004c0 	.word	0x200004c0
    3554:	200001d0 	.word	0x200001d0

00003558 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3558:	1c43      	adds	r3, r0, #1
{
    355a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    355c:	d021      	beq.n	35a2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    355e:	2801      	cmp	r0, #1
    3560:	dd21      	ble.n	35a6 <sys_clock_set_timeout+0x4e>
    3562:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3566:	da20      	bge.n	35aa <sys_clock_set_timeout+0x52>
    3568:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    356a:	f7ff fe79 	bl	3260 <z_nrf_rtc_timer_read>
    356e:	4b10      	ldr	r3, [pc, #64]	; (35b0 <sys_clock_set_timeout+0x58>)
    3570:	e9d3 1300 	ldrd	r1, r3, [r3]
    3574:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3576:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    357a:	bf28      	it	cs
    357c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    357e:	3001      	adds	r0, #1
    3580:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3582:	480c      	ldr	r0, [pc, #48]	; (35b4 <sys_clock_set_timeout+0x5c>)
    3584:	4282      	cmp	r2, r0
    3586:	bf28      	it	cs
    3588:	4602      	movcs	r2, r0
    358a:	1852      	adds	r2, r2, r1
    358c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3590:	4909      	ldr	r1, [pc, #36]	; (35b8 <sys_clock_set_timeout+0x60>)
    3592:	9001      	str	r0, [sp, #4]
    3594:	9100      	str	r1, [sp, #0]
    3596:	f143 0300 	adc.w	r3, r3, #0
    359a:	f7ff fe83 	bl	32a4 <compare_set>
}
    359e:	b002      	add	sp, #8
    35a0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    35a2:	4804      	ldr	r0, [pc, #16]	; (35b4 <sys_clock_set_timeout+0x5c>)
    35a4:	e7e0      	b.n	3568 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    35a6:	2400      	movs	r4, #0
    35a8:	e7df      	b.n	356a <sys_clock_set_timeout+0x12>
    35aa:	4c02      	ldr	r4, [pc, #8]	; (35b4 <sys_clock_set_timeout+0x5c>)
    35ac:	e7dd      	b.n	356a <sys_clock_set_timeout+0x12>
    35ae:	bf00      	nop
    35b0:	200001e0 	.word	0x200001e0
    35b4:	007fffff 	.word	0x007fffff
    35b8:	0000318d 	.word	0x0000318d

000035bc <sys_clock_elapsed>:
{
    35bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    35be:	f7ff fe4f 	bl	3260 <z_nrf_rtc_timer_read>
    35c2:	4b02      	ldr	r3, [pc, #8]	; (35cc <sys_clock_elapsed+0x10>)
    35c4:	681b      	ldr	r3, [r3, #0]
}
    35c6:	1ac0      	subs	r0, r0, r3
    35c8:	bd08      	pop	{r3, pc}
    35ca:	bf00      	nop
    35cc:	200001e0 	.word	0x200001e0

000035d0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    35d0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    35d2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    35d6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    35d8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    35da:	6002      	str	r2, [r0, #0]
}
    35dc:	4802      	ldr	r0, [pc, #8]	; (35e8 <nrf_gpio_pin_port_decode+0x18>)
    35de:	bf18      	it	ne
    35e0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	50000300 	.word	0x50000300

000035ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    35ec:	4a02      	ldr	r2, [pc, #8]	; (35f8 <nvmc_wait+0xc>)
    35ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    35f2:	2b00      	cmp	r3, #0
    35f4:	d0fb      	beq.n	35ee <nvmc_wait+0x2>
}
    35f6:	4770      	bx	lr
    35f8:	4001e000 	.word	0x4001e000

000035fc <SystemInit>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    35fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3600:	b510      	push	{r4, lr}
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    3602:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3606:	2a0d      	cmp	r2, #13
    3608:	d155      	bne.n	36b6 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    360a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    360e:	2200      	movs	r2, #0
    3610:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3614:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3618:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    361c:	4a48      	ldr	r2, [pc, #288]	; (3740 <SystemInit+0x144>)
    361e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    3622:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3626:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    362a:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    362e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3632:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3636:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    363a:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    363e:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    3642:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3646:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    364a:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    364e:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    3652:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3656:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    365a:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    365e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    3662:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3666:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    366a:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    366e:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    3672:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3676:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    367a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    367e:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    3682:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3686:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    368a:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    368e:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    3692:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3696:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    369a:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    369e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    36a2:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    36a6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    36aa:	07db      	lsls	r3, r3, #31
    36ac:	d509      	bpl.n	36c2 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    36ae:	f06f 0301 	mvn.w	r3, #1
    36b2:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    36ba:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    36be:	2b0d      	cmp	r3, #13
    36c0:	d10c      	bne.n	36dc <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
    36c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    36ca:	b13b      	cbz	r3, 36dc <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    36cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    36d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    36d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36d8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    36dc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    36e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    36e4:	2a00      	cmp	r2, #0
    36e6:	db03      	blt.n	36f0 <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    36e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    36ec:	2b00      	cmp	r3, #0
    36ee:	da22      	bge.n	3736 <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    36f0:	4914      	ldr	r1, [pc, #80]	; (3744 <SystemInit+0x148>)
    36f2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    36f4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    36f8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    36fc:	2412      	movs	r4, #18
    nvmc_wait();
    36fe:	f7ff ff75 	bl	35ec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3702:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3706:	f7ff ff71 	bl	35ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    370a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    370e:	f7ff ff6d 	bl	35ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3712:	2300      	movs	r3, #0
    3714:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3718:	f7ff ff68 	bl	35ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    371c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3720:	4909      	ldr	r1, [pc, #36]	; (3748 <SystemInit+0x14c>)
    3722:	4b0a      	ldr	r3, [pc, #40]	; (374c <SystemInit+0x150>)
    3724:	68ca      	ldr	r2, [r1, #12]
    3726:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    372a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    372c:	60cb      	str	r3, [r1, #12]
    372e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3732:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3734:	e7fd      	b.n	3732 <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3736:	4b06      	ldr	r3, [pc, #24]	; (3750 <SystemInit+0x154>)
    3738:	4a06      	ldr	r2, [pc, #24]	; (3754 <SystemInit+0x158>)
    373a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    373c:	bd10      	pop	{r4, pc}
    373e:	bf00      	nop
    3740:	4000c000 	.word	0x4000c000
    3744:	4001e000 	.word	0x4001e000
    3748:	e000ed00 	.word	0xe000ed00
    374c:	05fa0004 	.word	0x05fa0004
    3750:	200000e8 	.word	0x200000e8
    3754:	03d09000 	.word	0x03d09000

00003758 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3758:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    375a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    375c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    375e:	fab2 f382 	clz	r3, r2
    3762:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    3766:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    3768:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    376a:	d014      	beq.n	3796 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    376c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3770:	fa05 f303 	lsl.w	r3, r5, r3
    3774:	ea22 0303 	bic.w	r3, r2, r3
    3778:	e850 6f00 	ldrex	r6, [r0]
    377c:	4296      	cmp	r6, r2
    377e:	d104      	bne.n	378a <nrfx_flag32_alloc+0x32>
    3780:	e840 3c00 	strex	ip, r3, [r0]
    3784:	f1bc 0f00 	cmp.w	ip, #0
    3788:	d1f6      	bne.n	3778 <nrfx_flag32_alloc+0x20>
    378a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    378e:	d1e5      	bne.n	375c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3790:	4802      	ldr	r0, [pc, #8]	; (379c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3792:	700c      	strb	r4, [r1, #0]
}
    3794:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3796:	4802      	ldr	r0, [pc, #8]	; (37a0 <nrfx_flag32_alloc+0x48>)
    3798:	e7fc      	b.n	3794 <nrfx_flag32_alloc+0x3c>
    379a:	bf00      	nop
    379c:	0bad0000 	.word	0x0bad0000
    37a0:	0bad0002 	.word	0x0bad0002

000037a4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    37a4:	6803      	ldr	r3, [r0, #0]
    37a6:	40cb      	lsrs	r3, r1
    37a8:	07db      	lsls	r3, r3, #31
{
    37aa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    37ac:	d415      	bmi.n	37da <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    37ae:	2301      	movs	r3, #1
    37b0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    37b4:	6803      	ldr	r3, [r0, #0]
    37b6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    37ba:	ea41 0203 	orr.w	r2, r1, r3
    37be:	e850 4f00 	ldrex	r4, [r0]
    37c2:	429c      	cmp	r4, r3
    37c4:	d104      	bne.n	37d0 <nrfx_flag32_free+0x2c>
    37c6:	e840 2c00 	strex	ip, r2, [r0]
    37ca:	f1bc 0f00 	cmp.w	ip, #0
    37ce:	d1f6      	bne.n	37be <nrfx_flag32_free+0x1a>
    37d0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    37d4:	d1ee      	bne.n	37b4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    37d6:	4802      	ldr	r0, [pc, #8]	; (37e0 <nrfx_flag32_free+0x3c>)
}
    37d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    37da:	4802      	ldr	r0, [pc, #8]	; (37e4 <nrfx_flag32_free+0x40>)
    37dc:	e7fc      	b.n	37d8 <nrfx_flag32_free+0x34>
    37de:	bf00      	nop
    37e0:	0bad0000 	.word	0x0bad0000
    37e4:	0bad0004 	.word	0x0bad0004

000037e8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    37e8:	4b05      	ldr	r3, [pc, #20]	; (3800 <nrfx_clock_init+0x18>)
    37ea:	791a      	ldrb	r2, [r3, #4]
    37ec:	b92a      	cbnz	r2, 37fa <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    37ee:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    37f0:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    37f2:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    37f4:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    37f6:	4803      	ldr	r0, [pc, #12]	; (3804 <nrfx_clock_init+0x1c>)
    37f8:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    37fa:	4803      	ldr	r0, [pc, #12]	; (3808 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	200004cc 	.word	0x200004cc
    3804:	0bad0000 	.word	0x0bad0000
    3808:	0bad000c 	.word	0x0bad000c

0000380c <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    380c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3810:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3814:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3818:	03c8      	lsls	r0, r1, #15
    381a:	d516      	bpl.n	384a <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    381c:	07d1      	lsls	r1, r2, #31
    381e:	d514      	bpl.n	384a <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3820:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    3824:	03d2      	lsls	r2, r2, #15
    3826:	d510      	bpl.n	384a <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    3828:	490a      	ldr	r1, [pc, #40]	; (3854 <nrfx_clock_calibration_start+0x48>)
    382a:	794a      	ldrb	r2, [r1, #5]
    382c:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3830:	b96a      	cbnz	r2, 384e <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3832:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    3836:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    383a:	4807      	ldr	r0, [pc, #28]	; (3858 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    383c:	2208      	movs	r2, #8
    383e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    3842:	2201      	movs	r2, #1
    3844:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3846:	611a      	str	r2, [r3, #16]
}
    3848:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    384a:	4804      	ldr	r0, [pc, #16]	; (385c <nrfx_clock_calibration_start+0x50>)
    384c:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    384e:	4804      	ldr	r0, [pc, #16]	; (3860 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	200004cc 	.word	0x200004cc
    3858:	0bad0000 	.word	0x0bad0000
    385c:	0bad0005 	.word	0x0bad0005
    3860:	0bad000b 	.word	0x0bad000b

00003864 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3868:	b510      	push	{r4, lr}
    386a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    386e:	b152      	cbz	r2, 3886 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3870:	2000      	movs	r0, #0
    3872:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    3876:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    387a:	2201      	movs	r2, #1
    387c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3880:	4b16      	ldr	r3, [pc, #88]	; (38dc <nrfx_power_clock_irq_handler+0x78>)
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    388a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    388e:	b15a      	cbz	r2, 38a8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3890:	2200      	movs	r2, #0
    3892:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3896:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    389a:	2202      	movs	r2, #2
    389c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    38a0:	4b0e      	ldr	r3, [pc, #56]	; (38dc <nrfx_power_clock_irq_handler+0x78>)
    38a2:	2001      	movs	r0, #1
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    38b0:	b192      	cbz	r2, 38d8 <nrfx_power_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    38b2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    38b6:	0712      	lsls	r2, r2, #28
    38b8:	d50e      	bpl.n	38d8 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38ba:	2200      	movs	r2, #0
    38bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    38c0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    38c4:	2108      	movs	r1, #8
    38c6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    38ca:	4b04      	ldr	r3, [pc, #16]	; (38dc <nrfx_power_clock_irq_handler+0x78>)
    38cc:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    38ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    38d2:	681b      	ldr	r3, [r3, #0]
    38d4:	2003      	movs	r0, #3
    38d6:	4718      	bx	r3
}
    38d8:	bd10      	pop	{r4, pc}
    38da:	bf00      	nop
    38dc:	200004cc 	.word	0x200004cc

000038e0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    38e0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    38e2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    38e6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    38e8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    38ea:	6002      	str	r2, [r0, #0]
}
    38ec:	4802      	ldr	r0, [pc, #8]	; (38f8 <nrf_gpio_pin_port_decode+0x18>)
    38ee:	bf18      	it	ne
    38f0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    38f4:	4770      	bx	lr
    38f6:	bf00      	nop
    38f8:	50000300 	.word	0x50000300

000038fc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    38fc:	4b03      	ldr	r3, [pc, #12]	; (390c <pin_in_use_by_te+0x10>)
    38fe:	3008      	adds	r0, #8
    3900:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3904:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3908:	4770      	bx	lr
    390a:	bf00      	nop
    390c:	200000ec 	.word	0x200000ec

00003910 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3910:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3912:	f100 0308 	add.w	r3, r0, #8
    3916:	4c0c      	ldr	r4, [pc, #48]	; (3948 <call_handler+0x38>)
    3918:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    391c:	05da      	lsls	r2, r3, #23
{
    391e:	4605      	mov	r5, r0
    3920:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3922:	d507      	bpl.n	3934 <call_handler+0x24>
    3924:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3928:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    392c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3930:	6852      	ldr	r2, [r2, #4]
    3932:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3934:	68a3      	ldr	r3, [r4, #8]
    3936:	b12b      	cbz	r3, 3944 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3938:	68e2      	ldr	r2, [r4, #12]
    393a:	4631      	mov	r1, r6
    393c:	4628      	mov	r0, r5
    }
}
    393e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3942:	4718      	bx	r3
}
    3944:	bd70      	pop	{r4, r5, r6, pc}
    3946:	bf00      	nop
    3948:	200000ec 	.word	0x200000ec

0000394c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    394c:	4a12      	ldr	r2, [pc, #72]	; (3998 <release_handler+0x4c>)
    394e:	3008      	adds	r0, #8
{
    3950:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3952:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3956:	05d9      	lsls	r1, r3, #23
    3958:	d51b      	bpl.n	3992 <release_handler+0x46>
    395a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    395e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3962:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3966:	f102 0410 	add.w	r4, r2, #16
    396a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    396c:	f834 3b02 	ldrh.w	r3, [r4], #2
    3970:	f413 7f80 	tst.w	r3, #256	; 0x100
    3974:	d003      	beq.n	397e <release_handler+0x32>
    3976:	f3c3 2343 	ubfx	r3, r3, #9, #4
    397a:	4299      	cmp	r1, r3
    397c:	d009      	beq.n	3992 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    397e:	3001      	adds	r0, #1
    3980:	282a      	cmp	r0, #42	; 0x2a
    3982:	d1f3      	bne.n	396c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3984:	2300      	movs	r3, #0
    3986:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    398a:	4804      	ldr	r0, [pc, #16]	; (399c <release_handler+0x50>)
}
    398c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    398e:	f7ff bf09 	b.w	37a4 <nrfx_flag32_free>
}
    3992:	bc10      	pop	{r4}
    3994:	4770      	bx	lr
    3996:	bf00      	nop
    3998:	200000ec 	.word	0x200000ec
    399c:	20000154 	.word	0x20000154

000039a0 <pin_handler_trigger_uninit>:
{
    39a0:	b538      	push	{r3, r4, r5, lr}
    39a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    39a4:	f7ff ffaa 	bl	38fc <pin_in_use_by_te>
    39a8:	4c09      	ldr	r4, [pc, #36]	; (39d0 <pin_handler_trigger_uninit+0x30>)
    39aa:	f102 0508 	add.w	r5, r2, #8
    39ae:	b140      	cbz	r0, 39c2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    39b0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    39b4:	4907      	ldr	r1, [pc, #28]	; (39d4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    39b6:	0b5b      	lsrs	r3, r3, #13
    39b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    39bc:	2000      	movs	r0, #0
    39be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    39c2:	4610      	mov	r0, r2
    39c4:	f7ff ffc2 	bl	394c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    39c8:	2300      	movs	r3, #0
    39ca:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    39ce:	bd38      	pop	{r3, r4, r5, pc}
    39d0:	200000ec 	.word	0x200000ec
    39d4:	40006000 	.word	0x40006000

000039d8 <nrfx_gpiote_input_configure>:
{
    39d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    39dc:	4604      	mov	r4, r0
    39de:	4617      	mov	r7, r2
    39e0:	461d      	mov	r5, r3
    if (p_input_config)
    39e2:	b321      	cbz	r1, 3a2e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    39e4:	4e4e      	ldr	r6, [pc, #312]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    39e6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    39ea:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    39ee:	079b      	lsls	r3, r3, #30
    39f0:	d506      	bpl.n	3a00 <nrfx_gpiote_input_configure+0x28>
    39f2:	f7ff ff83 	bl	38fc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    39f6:	b118      	cbz	r0, 3a00 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    39f8:	484a      	ldr	r0, [pc, #296]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
}
    39fa:	b004      	add	sp, #16
    39fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3a00:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3a02:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3a06:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3a0a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3a0e:	f10d 020f 	add.w	r2, sp, #15
    3a12:	460b      	mov	r3, r1
    3a14:	4620      	mov	r0, r4
    3a16:	f10d 010e 	add.w	r1, sp, #14
    3a1a:	f003 fb1d 	bl	7058 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3a1e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3a22:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3a26:	f043 0301 	orr.w	r3, r3, #1
    3a2a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    3a2e:	b197      	cbz	r7, 3a56 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a30:	4b3b      	ldr	r3, [pc, #236]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3a32:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3a34:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a36:	f104 0008 	add.w	r0, r4, #8
    3a3a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3a3e:	078f      	lsls	r7, r1, #30
    3a40:	d50c      	bpl.n	3a5c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    3a42:	2a00      	cmp	r2, #0
    3a44:	d1d8      	bne.n	39f8 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3a46:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3a4a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3a4e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3a52:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3a56:	bbcd      	cbnz	r5, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    return NRFX_SUCCESS;
    3a58:	4833      	ldr	r0, [pc, #204]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3a5a:	e7ce      	b.n	39fa <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3a5c:	f021 0120 	bic.w	r1, r1, #32
    3a60:	04c9      	lsls	r1, r1, #19
    3a62:	0cc9      	lsrs	r1, r1, #19
    3a64:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3a68:	2a00      	cmp	r2, #0
    3a6a:	d0ec      	beq.n	3a46 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    3a6c:	2e03      	cmp	r6, #3
    3a6e:	d8c3      	bhi.n	39f8 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3a70:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3a72:	b92e      	cbnz	r6, 3a80 <nrfx_gpiote_input_configure+0xa8>
    3a74:	4a2d      	ldr	r2, [pc, #180]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a76:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3a7a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3a7e:	e7e2      	b.n	3a46 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3a80:	00ba      	lsls	r2, r7, #2
    3a82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a86:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a8a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3a8e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3a92:	f02c 0c03 	bic.w	ip, ip, #3
    3a96:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a9a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3a9e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3aa2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3aa6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3aaa:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3aae:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3ab2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3ab6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3aba:	ea4c 0c0e 	orr.w	ip, ip, lr
    3abe:	f041 0120 	orr.w	r1, r1, #32
    3ac2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3ac6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3aca:	e7bc      	b.n	3a46 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3acc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3ad0:	4620      	mov	r0, r4
    3ad2:	f7ff ff3b 	bl	394c <release_handler>
    if (!handler)
    3ad6:	2e00      	cmp	r6, #0
    3ad8:	d0be      	beq.n	3a58 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3ada:	4d11      	ldr	r5, [pc, #68]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3adc:	682b      	ldr	r3, [r5, #0]
    3ade:	429e      	cmp	r6, r3
    3ae0:	d104      	bne.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ae2:	686b      	ldr	r3, [r5, #4]
    3ae4:	429f      	cmp	r7, r3
    3ae6:	d101      	bne.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ae8:	2200      	movs	r2, #0
    3aea:	e00a      	b.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3aec:	4810      	ldr	r0, [pc, #64]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3aee:	f10d 010f 	add.w	r1, sp, #15
    3af2:	f7ff fe31 	bl	3758 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3af6:	4b0c      	ldr	r3, [pc, #48]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3af8:	4298      	cmp	r0, r3
    3afa:	f47f af7e 	bne.w	39fa <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    3afe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3b02:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3b06:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b0a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3b0c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b0e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3b12:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b1a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3b1e:	e79b      	b.n	3a58 <nrfx_gpiote_input_configure+0x80>
    3b20:	200000ec 	.word	0x200000ec
    3b24:	0bad0004 	.word	0x0bad0004
    3b28:	0bad0000 	.word	0x0bad0000
    3b2c:	40006000 	.word	0x40006000
    3b30:	20000154 	.word	0x20000154

00003b34 <nrfx_gpiote_output_configure>:
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	4604      	mov	r4, r0
    3b38:	b085      	sub	sp, #20
    3b3a:	4615      	mov	r5, r2
    if (p_config)
    3b3c:	b319      	cbz	r1, 3b86 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b3e:	4e33      	ldr	r6, [pc, #204]	; (3c0c <nrfx_gpiote_output_configure+0xd8>)
    3b40:	f100 0708 	add.w	r7, r0, #8
    3b44:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3b48:	0793      	lsls	r3, r2, #30
    3b4a:	d403      	bmi.n	3b54 <nrfx_gpiote_output_configure+0x20>
    3b4c:	f7ff fed6 	bl	38fc <pin_in_use_by_te>
    3b50:	2800      	cmp	r0, #0
    3b52:	d158      	bne.n	3c06 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3b54:	f012 0f1c 	tst.w	r2, #28
    3b58:	d002      	beq.n	3b60 <nrfx_gpiote_output_configure+0x2c>
    3b5a:	784b      	ldrb	r3, [r1, #1]
    3b5c:	2b01      	cmp	r3, #1
    3b5e:	d052      	beq.n	3c06 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3b60:	2301      	movs	r3, #1
    3b62:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3b66:	2300      	movs	r3, #0
    3b68:	e9cd 1300 	strd	r1, r3, [sp]
    3b6c:	1c4a      	adds	r2, r1, #1
    3b6e:	1c8b      	adds	r3, r1, #2
    3b70:	4620      	mov	r0, r4
    3b72:	f10d 010f 	add.w	r1, sp, #15
    3b76:	f003 fa6f 	bl	7058 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3b7a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3b7e:	f043 0303 	orr.w	r3, r3, #3
    3b82:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3b86:	b915      	cbnz	r5, 3b8e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3b88:	4821      	ldr	r0, [pc, #132]	; (3c10 <nrfx_gpiote_output_configure+0xdc>)
}
    3b8a:	b005      	add	sp, #20
    3b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b8e:	4e1f      	ldr	r6, [pc, #124]	; (3c0c <nrfx_gpiote_output_configure+0xd8>)
    3b90:	f104 0708 	add.w	r7, r4, #8
    3b94:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3b98:	0783      	lsls	r3, r0, #30
    3b9a:	d534      	bpl.n	3c06 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3b9c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3ba0:	4661      	mov	r1, ip
    3ba2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3ba4:	f020 0020 	bic.w	r0, r0, #32
    3ba8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3bac:	04c0      	lsls	r0, r0, #19
    3bae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3bb2:	0cc0      	lsrs	r0, r0, #19
    3bb4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3bb8:	2300      	movs	r3, #0
    3bba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3bbe:	786a      	ldrb	r2, [r5, #1]
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d0e1      	beq.n	3b88 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3bc4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3bc8:	78ad      	ldrb	r5, [r5, #2]
    3bca:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3bce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3bd2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bd6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3bda:	0223      	lsls	r3, r4, #8
    3bdc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3be0:	0412      	lsls	r2, r2, #16
    3be2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3be6:	ea43 030e 	orr.w	r3, r3, lr
    3bea:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3bec:	052a      	lsls	r2, r5, #20
    3bee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3bf2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bf6:	4313      	orrs	r3, r2
    3bf8:	f040 0020 	orr.w	r0, r0, #32
    3bfc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3c00:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3c04:	e7c0      	b.n	3b88 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    3c06:	4803      	ldr	r0, [pc, #12]	; (3c14 <nrfx_gpiote_output_configure+0xe0>)
    3c08:	e7bf      	b.n	3b8a <nrfx_gpiote_output_configure+0x56>
    3c0a:	bf00      	nop
    3c0c:	200000ec 	.word	0x200000ec
    3c10:	0bad0000 	.word	0x0bad0000
    3c14:	0bad0004 	.word	0x0bad0004

00003c18 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3c18:	4b01      	ldr	r3, [pc, #4]	; (3c20 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3c1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3c1e:	4770      	bx	lr
    3c20:	200000ec 	.word	0x200000ec

00003c24 <nrfx_gpiote_channel_get>:
{
    3c24:	b508      	push	{r3, lr}
    3c26:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3c28:	f7ff fe68 	bl	38fc <pin_in_use_by_te>
    3c2c:	b138      	cbz	r0, 3c3e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c2e:	4b05      	ldr	r3, [pc, #20]	; (3c44 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3c30:	4805      	ldr	r0, [pc, #20]	; (3c48 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c32:	3208      	adds	r2, #8
    3c34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3c38:	0b5b      	lsrs	r3, r3, #13
    3c3a:	700b      	strb	r3, [r1, #0]
}
    3c3c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3c3e:	4803      	ldr	r0, [pc, #12]	; (3c4c <nrfx_gpiote_channel_get+0x28>)
    3c40:	e7fc      	b.n	3c3c <nrfx_gpiote_channel_get+0x18>
    3c42:	bf00      	nop
    3c44:	200000ec 	.word	0x200000ec
    3c48:	0bad0000 	.word	0x0bad0000
    3c4c:	0bad0004 	.word	0x0bad0004

00003c50 <nrfx_gpiote_init>:
{
    3c50:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3c52:	4c0f      	ldr	r4, [pc, #60]	; (3c90 <nrfx_gpiote_init+0x40>)
    3c54:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    3c58:	b9bd      	cbnz	r5, 3c8a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3c5a:	2254      	movs	r2, #84	; 0x54
    3c5c:	4629      	mov	r1, r5
    3c5e:	f104 0010 	add.w	r0, r4, #16
    3c62:	f002 fbbc 	bl	63de <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3c66:	2006      	movs	r0, #6
    3c68:	f7fd fe8e 	bl	1988 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c6c:	4b09      	ldr	r3, [pc, #36]	; (3c94 <nrfx_gpiote_init+0x44>)
    return err_code;
    3c6e:	480a      	ldr	r0, [pc, #40]	; (3c98 <nrfx_gpiote_init+0x48>)
    3c70:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3c74:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3c78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3c7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3c80:	2301      	movs	r3, #1
    3c82:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3c86:	66a3      	str	r3, [r4, #104]	; 0x68
}
    3c88:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3c8a:	4804      	ldr	r0, [pc, #16]	; (3c9c <nrfx_gpiote_init+0x4c>)
    3c8c:	e7fc      	b.n	3c88 <nrfx_gpiote_init+0x38>
    3c8e:	bf00      	nop
    3c90:	200000ec 	.word	0x200000ec
    3c94:	40006000 	.word	0x40006000
    3c98:	0bad0000 	.word	0x0bad0000
    3c9c:	0bad0005 	.word	0x0bad0005

00003ca0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3ca0:	4b03      	ldr	r3, [pc, #12]	; (3cb0 <nrfx_gpiote_is_init+0x10>)
    3ca2:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    3ca6:	3800      	subs	r0, #0
    3ca8:	bf18      	it	ne
    3caa:	2001      	movne	r0, #1
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop
    3cb0:	200000ec 	.word	0x200000ec

00003cb4 <nrfx_gpiote_channel_free>:
{
    3cb4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3cb6:	4801      	ldr	r0, [pc, #4]	; (3cbc <nrfx_gpiote_channel_free+0x8>)
    3cb8:	f7ff bd74 	b.w	37a4 <nrfx_flag32_free>
    3cbc:	20000150 	.word	0x20000150

00003cc0 <nrfx_gpiote_channel_alloc>:
{
    3cc0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3cc2:	4801      	ldr	r0, [pc, #4]	; (3cc8 <nrfx_gpiote_channel_alloc+0x8>)
    3cc4:	f7ff bd48 	b.w	3758 <nrfx_flag32_alloc>
    3cc8:	20000150 	.word	0x20000150

00003ccc <nrfx_gpiote_trigger_enable>:
{
    3ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3cce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3cd0:	f7ff fe14 	bl	38fc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cd4:	f104 0208 	add.w	r2, r4, #8
    3cd8:	4b1e      	ldr	r3, [pc, #120]	; (3d54 <nrfx_gpiote_trigger_enable+0x88>)
    3cda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3cde:	b1e8      	cbz	r0, 3d1c <nrfx_gpiote_trigger_enable+0x50>
    3ce0:	f013 0502 	ands.w	r5, r3, #2
    3ce4:	d11a      	bne.n	3d1c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ce6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3ce8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3cea:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3cee:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3cf2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3cf6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cfa:	6005      	str	r5, [r0, #0]
    3cfc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3cfe:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3d02:	f040 0001 	orr.w	r0, r0, #1
    3d06:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3d0a:	b129      	cbz	r1, 3d18 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3d0c:	2201      	movs	r2, #1
    3d0e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3d12:	4a11      	ldr	r2, [pc, #68]	; (3d58 <nrfx_gpiote_trigger_enable+0x8c>)
    3d14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3d18:	b003      	add	sp, #12
    3d1a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3d1c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3d20:	2b04      	cmp	r3, #4
    3d22:	d012      	beq.n	3d4a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3d24:	2b05      	cmp	r3, #5
    3d26:	d012      	beq.n	3d4e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3d28:	a801      	add	r0, sp, #4
    3d2a:	9401      	str	r4, [sp, #4]
    3d2c:	f7ff fdd8 	bl	38e0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3d30:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3d32:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3d36:	40d9      	lsrs	r1, r3
    3d38:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3d3c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3d3e:	4620      	mov	r0, r4
}
    3d40:	b003      	add	sp, #12
    3d42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3d46:	f003 b9ce 	b.w	70e6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3d4a:	2103      	movs	r1, #3
    3d4c:	e7f7      	b.n	3d3e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3d4e:	2102      	movs	r1, #2
    3d50:	e7f5      	b.n	3d3e <nrfx_gpiote_trigger_enable+0x72>
    3d52:	bf00      	nop
    3d54:	200000ec 	.word	0x200000ec
    3d58:	40006000 	.word	0x40006000

00003d5c <nrfx_gpiote_trigger_disable>:
{
    3d5c:	b508      	push	{r3, lr}
    3d5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d60:	f7ff fdcc 	bl	38fc <pin_in_use_by_te>
    3d64:	b1c0      	cbz	r0, 3d98 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d66:	f102 0108 	add.w	r1, r2, #8
    3d6a:	4b0e      	ldr	r3, [pc, #56]	; (3da4 <nrfx_gpiote_trigger_disable+0x48>)
    3d6c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d70:	0799      	lsls	r1, r3, #30
    3d72:	d411      	bmi.n	3d98 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d74:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3d76:	2201      	movs	r2, #1
    3d78:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3d7a:	009b      	lsls	r3, r3, #2
    3d7c:	490a      	ldr	r1, [pc, #40]	; (3da8 <nrfx_gpiote_trigger_disable+0x4c>)
    3d7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3d86:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d8a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3d8e:	f022 0203 	bic.w	r2, r2, #3
    3d92:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3d96:	bd08      	pop	{r3, pc}
    3d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3d9c:	2100      	movs	r1, #0
    3d9e:	4610      	mov	r0, r2
    3da0:	f003 b9a1 	b.w	70e6 <nrf_gpio_cfg_sense_set>
    3da4:	200000ec 	.word	0x200000ec
    3da8:	40006000 	.word	0x40006000

00003dac <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3dac:	4b0e      	ldr	r3, [pc, #56]	; (3de8 <nrfx_gpiote_pin_uninit+0x3c>)
    3dae:	f100 0208 	add.w	r2, r0, #8
{
    3db2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3db4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3db8:	07db      	lsls	r3, r3, #31
{
    3dba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3dbc:	d511      	bpl.n	3de2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3dbe:	f7ff ffcd 	bl	3d5c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3dc2:	4620      	mov	r0, r4
    3dc4:	f7ff fdec 	bl	39a0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3dc8:	a801      	add	r0, sp, #4
    3dca:	9401      	str	r4, [sp, #4]
    3dcc:	f7ff fd88 	bl	38e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3dd0:	9b01      	ldr	r3, [sp, #4]
    3dd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3dd6:	2202      	movs	r2, #2
    3dd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3ddc:	4803      	ldr	r0, [pc, #12]	; (3dec <nrfx_gpiote_pin_uninit+0x40>)
}
    3dde:	b002      	add	sp, #8
    3de0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3de2:	4803      	ldr	r0, [pc, #12]	; (3df0 <nrfx_gpiote_pin_uninit+0x44>)
    3de4:	e7fb      	b.n	3dde <nrfx_gpiote_pin_uninit+0x32>
    3de6:	bf00      	nop
    3de8:	200000ec 	.word	0x200000ec
    3dec:	0bad0000 	.word	0x0bad0000
    3df0:	0bad0004 	.word	0x0bad0004

00003df4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3df8:	4b64      	ldr	r3, [pc, #400]	; (3f8c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3dfa:	4865      	ldr	r0, [pc, #404]	; (3f90 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3dfc:	4965      	ldr	r1, [pc, #404]	; (3f94 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    3dfe:	2600      	movs	r6, #0
{
    3e00:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3e02:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e04:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e06:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3e08:	b135      	cbz	r5, 3e18 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3e0a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3e0e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e10:	bf1e      	ittt	ne
    3e12:	601c      	strne	r4, [r3, #0]
    3e14:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3e16:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e18:	3304      	adds	r3, #4
    3e1a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3e1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e20:	d1f1      	bne.n	3e06 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e22:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3f90 <nrfx_gpiote_irq_handler+0x19c>
    3e26:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	f000 8091 	beq.w	3f52 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    3e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3e34:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3e38:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3e3a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3e3e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3e42:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3e44:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3e48:	2700      	movs	r7, #0
            while (latch[i])
    3e4a:	f10d 0910 	add.w	r9, sp, #16
    3e4e:	017b      	lsls	r3, r7, #5
    3e50:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3e52:	f04f 0a01 	mov.w	sl, #1
    3e56:	e049      	b.n	3eec <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    3e58:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e5a:	4a4f      	ldr	r2, [pc, #316]	; (3f98 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3e5c:	fa94 f4a4 	rbit	r4, r4
    3e60:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3e64:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e66:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3e6a:	08e0      	lsrs	r0, r4, #3
    3e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3e70:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    3e72:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3e76:	fa0a fc02 	lsl.w	ip, sl, r2
    3e7a:	f819 2000 	ldrb.w	r2, [r9, r0]
    3e7e:	ea22 020c 	bic.w	r2, r2, ip
    3e82:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e86:	a803      	add	r0, sp, #12
    3e88:	f3c3 0582 	ubfx	r5, r3, #2, #3
    3e8c:	0899      	lsrs	r1, r3, #2
    3e8e:	f7ff fd27 	bl	38e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3e92:	9a03      	ldr	r2, [sp, #12]
    3e94:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    3e98:	074b      	lsls	r3, r1, #29
    3e9a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e9e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3ea0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3ea4:	d529      	bpl.n	3efa <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    3ea6:	4620      	mov	r0, r4
    3ea8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3eaa:	b2d5      	uxtb	r5, r2
    3eac:	f7ff fd30 	bl	3910 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3eb0:	a803      	add	r0, sp, #12
    3eb2:	9403      	str	r4, [sp, #12]
    3eb4:	f7ff fd14 	bl	38e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3eb8:	9b03      	ldr	r3, [sp, #12]
    3eba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3ebe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3ec2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3ec6:	429d      	cmp	r5, r3
    3ec8:	d107      	bne.n	3eda <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3eca:	2100      	movs	r1, #0
    3ecc:	4620      	mov	r0, r4
    3ece:	f003 f90a 	bl	70e6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3ed2:	4629      	mov	r1, r5
    3ed4:	4620      	mov	r0, r4
    3ed6:	f003 f906 	bl	70e6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3eda:	a803      	add	r0, sp, #12
    3edc:	9403      	str	r4, [sp, #12]
    3ede:	f7ff fcff 	bl	38e0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3ee2:	9b03      	ldr	r3, [sp, #12]
    3ee4:	fa0a f303 	lsl.w	r3, sl, r3
    3ee8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    3eec:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    3ef0:	2c00      	cmp	r4, #0
    3ef2:	d1b1      	bne.n	3e58 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3ef4:	b9cf      	cbnz	r7, 3f2a <nrfx_gpiote_irq_handler+0x136>
    3ef6:	2701      	movs	r7, #1
    3ef8:	e7a9      	b.n	3e4e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3efa:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3efc:	bf0c      	ite	eq
    3efe:	2103      	moveq	r1, #3
    3f00:	2102      	movne	r1, #2
    3f02:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f04:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3f06:	f003 f8ee 	bl	70e6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3f0a:	2d03      	cmp	r5, #3
    3f0c:	d004      	beq.n	3f18 <nrfx_gpiote_irq_handler+0x124>
    3f0e:	9a01      	ldr	r2, [sp, #4]
    3f10:	2a02      	cmp	r2, #2
    3f12:	d106      	bne.n	3f22 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f14:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f16:	d1e0      	bne.n	3eda <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    3f18:	4659      	mov	r1, fp
    3f1a:	4620      	mov	r0, r4
    3f1c:	f7ff fcf8 	bl	3910 <call_handler>
    3f20:	e7db      	b.n	3eda <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f22:	2a03      	cmp	r2, #3
    3f24:	d1d9      	bne.n	3eda <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f26:	2d02      	cmp	r5, #2
    3f28:	e7f5      	b.n	3f16 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f2a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    3f2e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3f32:	491a      	ldr	r1, [pc, #104]	; (3f9c <nrfx_gpiote_irq_handler+0x1a8>)
    3f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3f38:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3f3c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3f3e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3f42:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    3f46:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3f48:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3f4c:	4313      	orrs	r3, r2
    3f4e:	f47f af7b 	bne.w	3e48 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    3f52:	2401      	movs	r4, #1
    while (mask)
    3f54:	b916      	cbnz	r6, 3f5c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3f56:	b007      	add	sp, #28
    3f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3f5c:	fa96 f3a6 	rbit	r3, r6
    3f60:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3f64:	fa04 f203 	lsl.w	r2, r4, r3
    3f68:	009b      	lsls	r3, r3, #2
    3f6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3f72:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3f76:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3f7a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3f7e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3f82:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3f86:	f7ff fcc3 	bl	3910 <call_handler>
    3f8a:	e7e3      	b.n	3f54 <nrfx_gpiote_irq_handler+0x160>
    3f8c:	40006100 	.word	0x40006100
    3f90:	40006000 	.word	0x40006000
    3f94:	40006120 	.word	0x40006120
    3f98:	200000ec 	.word	0x200000ec
    3f9c:	50000300 	.word	0x50000300

00003fa0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3fa0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3fa2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3fa6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3fa8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3faa:	6002      	str	r2, [r0, #0]
}
    3fac:	4802      	ldr	r0, [pc, #8]	; (3fb8 <nrf_gpio_pin_port_decode+0x18>)
    3fae:	bf18      	it	ne
    3fb0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop
    3fb8:	50000300 	.word	0x50000300

00003fbc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    3fbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3fc0:	4e79      	ldr	r6, [pc, #484]	; (41a8 <nrfx_spim_init+0x1ec>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3fc2:	7905      	ldrb	r5, [r0, #4]
{
    3fc4:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3fc6:	eb06 1045 	add.w	r0, r6, r5, lsl #5
    3fca:	7f00      	ldrb	r0, [r0, #28]
    3fcc:	2800      	cmp	r0, #0
    3fce:	f040 80e6 	bne.w	419e <nrfx_spim_init+0x1e2>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    3fd2:	2d00      	cmp	r5, #0
    3fd4:	f040 80e5 	bne.w	41a2 <nrfx_spim_init+0x1e6>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    3fd8:	683c      	ldr	r4, [r7, #0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    3fda:	f891 c013 	ldrb.w	ip, [r1, #19]
        ((p_config->use_hw_ss) &&
    3fde:	f891 e011 	ldrb.w	lr, [r1, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    3fe2:	6888      	ldr	r0, [r1, #8]
    p_cb->p_context = p_context;
    3fe4:	e9c6 2300 	strd	r2, r3, [r6]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    3fe8:	790b      	ldrb	r3, [r1, #4]
    3fea:	7fb2      	ldrb	r2, [r6, #30]
    3fec:	ea4c 0343 	orr.w	r3, ip, r3, lsl #1
    3ff0:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    3ff4:	f003 0307 	and.w	r3, r3, #7
    3ff8:	f022 0207 	bic.w	r2, r2, #7
    3ffc:	4313      	orrs	r3, r2
    3ffe:	77b3      	strb	r3, [r6, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    4000:	78cb      	ldrb	r3, [r1, #3]
    4002:	77f3      	strb	r3, [r6, #31]
    if (!p_config->skip_gpio_cfg)
    4004:	f1bc 0f00 	cmp.w	ip, #0
    4008:	d15d      	bne.n	40c6 <nrfx_spim_init+0x10a>
    if (value == 0)
    400a:	7b0b      	ldrb	r3, [r1, #12]
                    : NRF_GPIO_PIN_S0S1;
    400c:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
    4010:	bf08      	it	eq
    4012:	2503      	moveq	r5, #3
    4014:	2b01      	cmp	r3, #1
        nrf_gpio_pin_write(p_config->sck_pin,
    4016:	7808      	ldrb	r0, [r1, #0]
    4018:	f200 80ab 	bhi.w	4172 <nrfx_spim_init+0x1b6>
        nrf_gpio_pin_clear(pin_number);
    401c:	f003 f87f 	bl	711e <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    4020:	780b      	ldrb	r3, [r1, #0]
    4022:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4024:	a801      	add	r0, sp, #4
    4026:	f7ff ffbb 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    402a:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    402c:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
    402e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4032:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
    4036:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    403a:	7848      	ldrb	r0, [r1, #1]
    403c:	28ff      	cmp	r0, #255	; 0xff
    403e:	d00d      	beq.n	405c <nrfx_spim_init+0xa0>
        nrf_gpio_pin_clear(pin_number);
    4040:	f003 f86d 	bl	711e <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    4044:	784b      	ldrb	r3, [r1, #1]
    4046:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4048:	a801      	add	r0, sp, #4
    404a:	f7ff ffa9 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    404e:	9b01      	ldr	r3, [sp, #4]
    4050:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4054:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4058:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    405c:	788b      	ldrb	r3, [r1, #2]
    405e:	2bff      	cmp	r3, #255	; 0xff
    4060:	d00c      	beq.n	407c <nrfx_spim_init+0xc0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4062:	a801      	add	r0, sp, #4
            nrf_gpio_cfg(p_config->miso_pin,
    4064:	f891 800e 	ldrb.w	r8, [r1, #14]
    4068:	9301      	str	r3, [sp, #4]
    406a:	f7ff ff99 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    406e:	9b01      	ldr	r3, [sp, #4]
    4070:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4074:	ea45 0288 	orr.w	r2, r5, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4078:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    407c:	78c8      	ldrb	r0, [r1, #3]
    407e:	28ff      	cmp	r0, #255	; 0xff
    4080:	d010      	beq.n	40a4 <nrfx_spim_init+0xe8>
    if (value == 0)
    4082:	790b      	ldrb	r3, [r1, #4]
    4084:	2b00      	cmp	r3, #0
    4086:	d077      	beq.n	4178 <nrfx_spim_init+0x1bc>
        nrf_gpio_pin_clear(pin_number);
    4088:	f003 f849 	bl	711e <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    408c:	78cb      	ldrb	r3, [r1, #3]
    408e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4090:	a801      	add	r0, sp, #4
    4092:	f7ff ff85 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4096:	9b01      	ldr	r3, [sp, #4]
    4098:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    409c:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    40a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    40a4:	7bc8      	ldrb	r0, [r1, #15]
    40a6:	28ff      	cmp	r0, #255	; 0xff
    40a8:	d00d      	beq.n	40c6 <nrfx_spim_init+0x10a>
        nrf_gpio_pin_set(pin_number);
    40aa:	f003 f82b 	bl	7104 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    40ae:	7bcb      	ldrb	r3, [r1, #15]
    40b0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40b2:	a801      	add	r0, sp, #4
    40b4:	f7ff ff74 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40b8:	9b01      	ldr	r3, [sp, #4]
    40ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    40be:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    40c2:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    40c6:	7d0b      	ldrb	r3, [r1, #20]
    40c8:	bb4b      	cbnz	r3, 411e <nrfx_spim_init+0x162>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    40ca:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    40cc:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    40ce:	2bff      	cmp	r3, #255	; 0xff
    40d0:	bf18      	it	ne
    40d2:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    40d4:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    40d6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    40da:	bf08      	it	eq
    40dc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    40e0:	2bff      	cmp	r3, #255	; 0xff
    40e2:	bf08      	it	eq
    40e4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
    40e8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    40ec:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    40f0:	793b      	ldrb	r3, [r7, #4]
    40f2:	b9a3      	cbnz	r3, 411e <nrfx_spim_init+0x162>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
    40f4:	78cb      	ldrb	r3, [r1, #3]
    40f6:	2bff      	cmp	r3, #255	; 0xff
    40f8:	d041      	beq.n	417e <nrfx_spim_init+0x1c2>
    40fa:	7c4a      	ldrb	r2, [r1, #17]
    40fc:	2a00      	cmp	r2, #0
    40fe:	d03e      	beq.n	417e <nrfx_spim_init+0x1c2>
                                    (p_config->ss_active_high == true
    4100:	7908      	ldrb	r0, [r1, #4]
                nrf_spim_csn_configure(p_spim,
    4102:	7c8a      	ldrb	r2, [r1, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    4104:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    4108:	f8c4 0568 	str.w	r0, [r4, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    410c:	f8c4 2564 	str.w	r2, [r4, #1380]	; 0x564
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    4110:	7bcb      	ldrb	r3, [r1, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
    4112:	2bff      	cmp	r3, #255	; 0xff
    4114:	bf08      	it	eq
    4116:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    411a:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    411e:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    4120:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    4124:	688b      	ldr	r3, [r1, #8]
    4126:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    412a:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    412c:	7b0a      	ldrb	r2, [r1, #12]
    412e:	3b00      	subs	r3, #0
    4130:	bf18      	it	ne
    4132:	2301      	movne	r3, #1
    switch (spi_mode)
    4134:	2a02      	cmp	r2, #2
    4136:	d02c      	beq.n	4192 <nrfx_spim_init+0x1d6>
    4138:	2a03      	cmp	r2, #3
    413a:	d02d      	beq.n	4198 <nrfx_spim_init+0x1dc>
    413c:	2a01      	cmp	r2, #1
    413e:	d101      	bne.n	4144 <nrfx_spim_init+0x188>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    4140:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    4144:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    4148:	798b      	ldrb	r3, [r1, #6]
    414a:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    414e:	2307      	movs	r3, #7
    4150:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    4154:	6833      	ldr	r3, [r6, #0]
    4156:	b123      	cbz	r3, 4162 <nrfx_spim_init+0x1a6>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4158:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    415a:	f340 3007 	sbfx	r0, r0, #12, #8
    415e:	f7fd fc13 	bl	1988 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    4162:	2300      	movs	r3, #0
    4164:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4166:	4811      	ldr	r0, [pc, #68]	; (41ac <nrfx_spim_init+0x1f0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4168:	2301      	movs	r3, #1
    416a:	7733      	strb	r3, [r6, #28]
}
    416c:	b002      	add	sp, #8
    416e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
    4172:	f002 ffc7 	bl	7104 <nrf_gpio_pin_set>
    4176:	e753      	b.n	4020 <nrfx_spim_init+0x64>
    4178:	f002 ffc4 	bl	7104 <nrf_gpio_pin_set>
    417c:	e786      	b.n	408c <nrfx_spim_init+0xd0>
    p_reg->PSEL.CSN = pin;
    417e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4182:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    4186:	2300      	movs	r3, #0
    4188:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    418c:	f8c4 3564 	str.w	r3, [r4, #1380]	; 0x564
}
    4190:	e7be      	b.n	4110 <nrfx_spim_init+0x154>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    4192:	f043 0304 	orr.w	r3, r3, #4
        break;
    4196:	e7d5      	b.n	4144 <nrfx_spim_init+0x188>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    4198:	f043 0306 	orr.w	r3, r3, #6
        break;
    419c:	e7d2      	b.n	4144 <nrfx_spim_init+0x188>
        return err_code;
    419e:	4804      	ldr	r0, [pc, #16]	; (41b0 <nrfx_spim_init+0x1f4>)
    41a0:	e7e4      	b.n	416c <nrfx_spim_init+0x1b0>
        return err_code;
    41a2:	4804      	ldr	r0, [pc, #16]	; (41b4 <nrfx_spim_init+0x1f8>)
    41a4:	e7e2      	b.n	416c <nrfx_spim_init+0x1b0>
    41a6:	bf00      	nop
    41a8:	200004d4 	.word	0x200004d4
    41ac:	0bad0000 	.word	0x0bad0000
    41b0:	0bad0005 	.word	0x0bad0005
    41b4:	0bad0003 	.word	0x0bad0003

000041b8 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    41b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    41bc:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    41be:	4d27      	ldr	r5, [pc, #156]	; (425c <nrfx_spim_uninit+0xa4>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    41c0:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    41c2:	015e      	lsls	r6, r3, #5
    41c4:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    41c8:	59ab      	ldr	r3, [r5, r6]
{
    41ca:	4607      	mov	r7, r0
    if (p_cb->handler)
    41cc:	b1cb      	cbz	r3, 4202 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    41ce:	f344 3007 	sbfx	r0, r4, #12, #8
    41d2:	f7fd fbe9 	bl	19a8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    41d6:	4b22      	ldr	r3, [pc, #136]	; (4260 <nrfx_spim_uninit+0xa8>)
    41d8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    41dc:	f898 301d 	ldrb.w	r3, [r8, #29]
    41e0:	b17b      	cbz	r3, 4202 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41e2:	2301      	movs	r3, #1
    41e4:	6163      	str	r3, [r4, #20]
    41e6:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    41ee:	b92b      	cbnz	r3, 41fc <nrfx_spim_uninit+0x44>
    41f0:	2001      	movs	r0, #1
    41f2:	f002 fe9d 	bl	6f30 <nrfx_busy_wait>
    41f6:	f1b8 0801 	subs.w	r8, r8, #1
    41fa:	d1f6      	bne.n	41ea <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
    41fc:	19ab      	adds	r3, r5, r6
    41fe:	2200      	movs	r2, #0
    4200:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    4202:	2300      	movs	r3, #0
    4204:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    4208:	19ab      	adds	r3, r5, r6
    420a:	7f9b      	ldrb	r3, [r3, #30]
    420c:	07db      	lsls	r3, r3, #31
    420e:	d41f      	bmi.n	4250 <nrfx_spim_uninit+0x98>
    return p_reg->PSEL.SCK;
    4210:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    4214:	f002 ff90 	bl	7138 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    4218:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    421c:	f002 ff8c 	bl	7138 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    4220:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    4224:	f002 ff88 	bl	7138 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    4228:	793b      	ldrb	r3, [r7, #4]
    422a:	b91b      	cbnz	r3, 4234 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
    422c:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    4230:	f002 ff82 	bl	7138 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    4234:	19ab      	adds	r3, r5, r6
    4236:	7fdb      	ldrb	r3, [r3, #31]
    4238:	2bff      	cmp	r3, #255	; 0xff
    423a:	d009      	beq.n	4250 <nrfx_spim_uninit+0x98>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    423c:	a801      	add	r0, sp, #4
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    423e:	9301      	str	r3, [sp, #4]
    4240:	f7ff feae 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4244:	9b01      	ldr	r3, [sp, #4]
    4246:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    424a:	2202      	movs	r2, #2
    424c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4250:	4435      	add	r5, r6
    4252:	2300      	movs	r3, #0
    4254:	772b      	strb	r3, [r5, #28]
}
    4256:	b002      	add	sp, #8
    4258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    425c:	200004d4 	.word	0x200004d4
    4260:	00080152 	.word	0x00080152

00004264 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    4264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4268:	4f36      	ldr	r7, [pc, #216]	; (4344 <nrfx_spim_xfer+0xe0>)
    426a:	7903      	ldrb	r3, [r0, #4]
    426c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    4270:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    4272:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    4276:	4681      	mov	r9, r0
    4278:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    427a:	015e      	lsls	r6, r3, #5
    427c:	2a00      	cmp	r2, #0
    427e:	d15f      	bne.n	4340 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    4280:	59ba      	ldr	r2, [r7, r6]
    4282:	b12a      	cbz	r2, 4290 <nrfx_spim_xfer+0x2c>
    4284:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    4288:	bf04      	itt	eq
    428a:	2201      	moveq	r2, #1
    428c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    4290:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4294:	eb07 0c06 	add.w	ip, r7, r6
    4298:	f10c 0c0c 	add.w	ip, ip, #12
    429c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    42a0:	2101      	movs	r1, #1
    42a2:	4640      	mov	r0, r8
    42a4:	f002 ff58 	bl	7158 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    42a8:	6829      	ldr	r1, [r5, #0]
    42aa:	b121      	cbz	r1, 42b6 <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    42ac:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    42b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    42b4:	d106      	bne.n	42c4 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    42b6:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    42b8:	b152      	cbz	r2, 42d0 <nrfx_spim_xfer+0x6c>
    42ba:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    42be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    42c2:	d005      	beq.n	42d0 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    42c4:	443e      	add	r6, r7
    42c6:	2300      	movs	r3, #0
        return err_code;
    42c8:	481f      	ldr	r0, [pc, #124]	; (4348 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    42ca:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    42cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    42d0:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    42d4:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    42d6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    42da:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    42dc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    42e0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42e4:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    42e6:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    42ee:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    42f2:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    42f6:	bf18      	it	ne
    42f8:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    42fa:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    42fe:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    4302:	bf18      	it	ne
    4304:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    4306:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    430a:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    430e:	bf04      	itt	eq
    4310:	2101      	moveq	r1, #1
    4312:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    4314:	59b9      	ldr	r1, [r7, r6]
    4316:	b949      	cbnz	r1, 432c <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    4318:	b912      	cbnz	r2, 4320 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    431a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    431e:	e7fb      	b.n	4318 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    4320:	2100      	movs	r1, #0
    4322:	4640      	mov	r0, r8
    4324:	f002 ff18 	bl	7158 <set_ss_pin_state>
    return err_code;
    4328:	4808      	ldr	r0, [pc, #32]	; (434c <nrfx_spim_xfer+0xe8>)
}
    432a:	e7cf      	b.n	42cc <nrfx_spim_xfer+0x68>
    if (!enable)
    432c:	f014 0f04 	tst.w	r4, #4
    4330:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    4334:	bf14      	ite	ne
    4336:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    433a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    433e:	e7f3      	b.n	4328 <nrfx_spim_xfer+0xc4>
        return err_code;
    4340:	4803      	ldr	r0, [pc, #12]	; (4350 <nrfx_spim_xfer+0xec>)
    4342:	e7c3      	b.n	42cc <nrfx_spim_xfer+0x68>
    4344:	200004d4 	.word	0x200004d4
    4348:	0bad000a 	.word	0x0bad000a
    434c:	0bad0000 	.word	0x0bad0000
    4350:	0bad000b 	.word	0x0bad000b

00004354 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4354:	4b0c      	ldr	r3, [pc, #48]	; (4388 <nrfx_spim_3_irq_handler+0x34>)
    4356:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    435a:	b570      	push	{r4, r5, r6, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    435c:	b192      	cbz	r2, 4384 <nrfx_spim_3_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    435e:	4c0b      	ldr	r4, [pc, #44]	; (438c <nrfx_spim_3_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4360:	2500      	movs	r5, #0
    4362:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    4366:	4629      	mov	r1, r5
    4368:	4620      	mov	r0, r4
    436a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    436e:	f002 fef3 	bl	7158 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    4372:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
    4376:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    4378:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    437a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    437e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    4382:	4718      	bx	r3
}
    4384:	bd70      	pop	{r4, r5, r6, pc}
    4386:	bf00      	nop
    4388:	4002f000 	.word	0x4002f000
    438c:	200004d4 	.word	0x200004d4

00004390 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    4390:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4392:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    4396:	b087      	sub	sp, #28
    4398:	4604      	mov	r4, r0
    439a:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    439c:	b1f3      	cbz	r3, 43dc <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    439e:	2300      	movs	r3, #0
    43a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    43a4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43a8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    43ac:	b9b3      	cbnz	r3, 43dc <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    43ae:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    43b0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    43b4:	2302      	movs	r3, #2
    43b6:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    43b8:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    43ba:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43be:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    43c2:	b11b      	cbz	r3, 43cc <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    43c4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    43c8:	059f      	lsls	r7, r3, #22
    43ca:	d402      	bmi.n	43d2 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43cc:	2301      	movs	r3, #1
    43ce:	6223      	str	r3, [r4, #32]
    43d0:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    43d2:	2301      	movs	r3, #1
    43d4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    43d8:	b007      	add	sp, #28
    43da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    43e0:	2b00      	cmp	r3, #0
    43e2:	d044      	beq.n	446e <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43e4:	2300      	movs	r3, #0
    43e6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    43ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    43ee:	6a2b      	ldr	r3, [r5, #32]
    43f0:	065e      	lsls	r6, r3, #25
    43f2:	d40a      	bmi.n	440a <twim_irq_handler+0x7a>
    43f4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    43f8:	b93b      	cbnz	r3, 440a <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    43fa:	4629      	mov	r1, r5
    43fc:	4620      	mov	r0, r4
    43fe:	f002 febb 	bl	7178 <xfer_completeness_check>
    4402:	f080 0001 	eor.w	r0, r0, #1
    4406:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    440a:	6a2b      	ldr	r3, [r5, #32]
    440c:	f013 0c04 	ands.w	ip, r3, #4
    4410:	d13e      	bne.n	4490 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    4412:	f105 070c 	add.w	r7, r5, #12
    4416:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4418:	ae01      	add	r6, sp, #4
    441a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    441c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    4426:	6033      	str	r3, [r6, #0]
    4428:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    442c:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    4430:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    4434:	f1be 0f00 	cmp.w	lr, #0
    4438:	d002      	beq.n	4440 <twim_irq_handler+0xb0>
    443a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    443e:	b33b      	cbz	r3, 4490 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    4440:	2300      	movs	r3, #0
    4442:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    4446:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4448:	4b2e      	ldr	r3, [pc, #184]	; (4504 <twim_irq_handler+0x174>)
    444a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    444e:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4452:	2b00      	cmp	r3, #0
    4454:	ea4f 3214 	mov.w	r2, r4, lsr #12
    4458:	db1a      	blt.n	4490 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    445a:	f002 011f 	and.w	r1, r2, #31
    445e:	095b      	lsrs	r3, r3, #5
    4460:	2201      	movs	r2, #1
    4462:	408a      	lsls	r2, r1
    4464:	3360      	adds	r3, #96	; 0x60
    4466:	4928      	ldr	r1, [pc, #160]	; (4508 <twim_irq_handler+0x178>)
    4468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    446c:	e010      	b.n	4490 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    446e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4472:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    4476:	7b2b      	ldrb	r3, [r5, #12]
    4478:	bb23      	cbnz	r3, 44c4 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    447a:	f105 070c 	add.w	r7, r5, #12
    447e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4480:	ae01      	add	r6, sp, #4
    4482:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    4488:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    448c:	2b00      	cmp	r3, #0
    448e:	d0d8      	beq.n	4442 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    4490:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4494:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4498:	0798      	lsls	r0, r3, #30
    449a:	d525      	bpl.n	44e8 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    449c:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    449e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    44a2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    44a6:	b90b      	cbnz	r3, 44ac <twim_irq_handler+0x11c>
        p_cb->busy = false;
    44a8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    44ac:	6a2b      	ldr	r3, [r5, #32]
    44ae:	075b      	lsls	r3, r3, #29
    44b0:	d503      	bpl.n	44ba <twim_irq_handler+0x12a>
    44b2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    44b6:	2b00      	cmp	r3, #0
    44b8:	d08e      	beq.n	43d8 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    44ba:	e9d5 3100 	ldrd	r3, r1, [r5]
    44be:	4668      	mov	r0, sp
    44c0:	4798      	blx	r3
    44c2:	e789      	b.n	43d8 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    44c4:	f44f 7300 	mov.w	r3, #512	; 0x200
    44c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    44cc:	f240 2302 	movw	r3, #514	; 0x202
    44d0:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    44d2:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    44d6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    44da:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    44dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44e0:	2301      	movs	r3, #1
    44e2:	60a3      	str	r3, [r4, #8]
    44e4:	6223      	str	r3, [r4, #32]
            return;
    44e6:	e777      	b.n	43d8 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    44e8:	0759      	lsls	r1, r3, #29
    44ea:	d501      	bpl.n	44f0 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    44ec:	2302      	movs	r3, #2
    44ee:	e7d6      	b.n	449e <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    44f0:	07da      	lsls	r2, r3, #31
    44f2:	d501      	bpl.n	44f8 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    44f4:	2303      	movs	r3, #3
    44f6:	e7d2      	b.n	449e <twim_irq_handler+0x10e>
    else if (p_cb->error)
    44f8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    44fc:	2b00      	cmp	r3, #0
    44fe:	d0ce      	beq.n	449e <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    4500:	2304      	movs	r3, #4
    4502:	e7cc      	b.n	449e <twim_irq_handler+0x10e>
    4504:	019c0202 	.word	0x019c0202
    4508:	e000e100 	.word	0xe000e100

0000450c <nrfx_twim_init>:
{
    450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4510:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4512:	4d2b      	ldr	r5, [pc, #172]	; (45c0 <nrfx_twim_init+0xb4>)
    4514:	f04f 0c34 	mov.w	ip, #52	; 0x34
    4518:	fb0c fc06 	mul.w	ip, ip, r6
    451c:	eb05 040c 	add.w	r4, r5, ip
    4520:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    4524:	2f00      	cmp	r7, #0
    4526:	d149      	bne.n	45bc <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4528:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    452a:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    452c:	7b4b      	ldrb	r3, [r1, #13]
    452e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4532:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
    4534:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
    4538:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    453a:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
    453e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    4542:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4546:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    454a:	b1cb      	cbz	r3, 4580 <nrfx_twim_init+0x74>
    454c:	f1bc 0f00 	cmp.w	ip, #0
    4550:	d105      	bne.n	455e <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    4552:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    4556:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    455a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    455e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    4560:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    4564:	b11a      	cbz	r2, 456e <nrfx_twim_init+0x62>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    4566:	f340 3007 	sbfx	r0, r0, #12, #8
    456a:	f7fd fa0d 	bl	1988 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    456e:	2334      	movs	r3, #52	; 0x34
    4570:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    4574:	4813      	ldr	r0, [pc, #76]	; (45c4 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4576:	2301      	movs	r3, #1
    4578:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    4580:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    4582:	4b11      	ldr	r3, [pc, #68]	; (45c8 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    4584:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    4588:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    458a:	2c01      	cmp	r4, #1
    458c:	bf18      	it	ne
    458e:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4592:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
    4596:	bf08      	it	eq
    4598:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    459a:	f240 6e0c 	movw	lr, #1548	; 0x60c
    459e:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    45a2:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    45a4:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    45a8:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    45aa:	2c01      	cmp	r4, #1
    45ac:	bf18      	it	ne
    45ae:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    45b2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    45b6:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    45ba:	e7c7      	b.n	454c <nrfx_twim_init+0x40>
        return err_code;
    45bc:	4803      	ldr	r0, [pc, #12]	; (45cc <nrfx_twim_init+0xc0>)
    45be:	e7dd      	b.n	457c <nrfx_twim_init+0x70>
    45c0:	200004f4 	.word	0x200004f4
    45c4:	0bad0000 	.word	0x0bad0000
    45c8:	50000300 	.word	0x50000300
    45cc:	0bad0005 	.word	0x0bad0005

000045d0 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    45d0:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    45d2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    45d4:	2106      	movs	r1, #6
    45d6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    45da:	4b04      	ldr	r3, [pc, #16]	; (45ec <nrfx_twim_enable+0x1c>)
    45dc:	2134      	movs	r1, #52	; 0x34
    45de:	fb01 3302 	mla	r3, r1, r2, r3
    45e2:	2202      	movs	r2, #2
    45e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    45e8:	4770      	bx	lr
    45ea:	bf00      	nop
    45ec:	200004f4 	.word	0x200004f4

000045f0 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    45f0:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    45f2:	4b0c      	ldr	r3, [pc, #48]	; (4624 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    45f4:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    45f6:	2034      	movs	r0, #52	; 0x34
    45f8:	fb00 3301 	mla	r3, r0, r1, r3
    45fc:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    45fe:	480a      	ldr	r0, [pc, #40]	; (4628 <nrfx_twim_disable+0x38>)
    4600:	6099      	str	r1, [r3, #8]
    4602:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4606:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    460a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    460e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4612:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4616:	2201      	movs	r2, #1
    4618:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    461c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	200004f4 	.word	0x200004f4
    4628:	019c0202 	.word	0x019c0202

0000462c <nrfx_twim_xfer>:
{
    462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    4630:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 4904 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4634:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    4638:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    463a:	2334      	movs	r3, #52	; 0x34
    463c:	fb03 c30e 	mla	r3, r3, lr, ip
{
    4640:	4617      	mov	r7, r2
    p_cb->error = false;
    4642:	2200      	movs	r2, #0
    4644:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    4648:	684b      	ldr	r3, [r1, #4]
{
    464a:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    464c:	b14b      	cbz	r3, 4662 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    464e:	68cb      	ldr	r3, [r1, #12]
    4650:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    4654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4658:	d003      	beq.n	4662 <nrfx_twim_xfer+0x36>
        return err_code;
    465a:	4eab      	ldr	r6, [pc, #684]	; (4908 <nrfx_twim_xfer+0x2dc>)
}
    465c:	4630      	mov	r0, r6
    465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    4662:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    4664:	4ba9      	ldr	r3, [pc, #676]	; (490c <nrfx_twim_xfer+0x2e0>)
    4666:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    466a:	fb06 c60e 	mla	r6, r6, lr, ip
    466e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    4672:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    4676:	b123      	cbz	r3, 4682 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4678:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    467a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    467e:	4ea4      	ldr	r6, [pc, #656]	; (4910 <nrfx_twim_xfer+0x2e4>)
    4680:	e7ec      	b.n	465c <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    4682:	f017 0f14 	tst.w	r7, #20
    4686:	bf0c      	ite	eq
    4688:	2301      	moveq	r3, #1
    468a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    468c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    4690:	46a9      	mov	r9, r5
    4692:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    4696:	f106 080c 	add.w	r8, r6, #12
    469a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    469e:	f8d9 3000 	ldr.w	r3, [r9]
    46a2:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    46a6:	f3c7 1300 	ubfx	r3, r7, #4, #1
    46aa:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    46ae:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    46b0:	786b      	ldrb	r3, [r5, #1]
    46b2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46b6:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    46ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    46be:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    46c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    46c6:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    46ca:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    46ce:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    46d2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    46d6:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    46da:	bf18      	it	ne
    46dc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    46de:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    46e2:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    46e6:	bf18      	it	ne
    46e8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    46ea:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    46ee:	782a      	ldrb	r2, [r5, #0]
    46f0:	2a03      	cmp	r2, #3
    46f2:	f200 80b5 	bhi.w	4860 <nrfx_twim_xfer+0x234>
    46f6:	e8df f002 	tbb	[pc, r2]
    46fa:	a084      	.short	0xa084
    46fc:	0269      	.short	0x0269
    46fe:	692b      	ldr	r3, [r5, #16]
    4700:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    4704:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    4708:	d1a7      	bne.n	465a <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    470a:	f44f 7180 	mov.w	r1, #256	; 0x100
    470e:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4712:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4714:	6869      	ldr	r1, [r5, #4]
    4716:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    471a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    471e:	2100      	movs	r1, #0
    4720:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    4724:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4728:	2001      	movs	r0, #1
    472a:	6220      	str	r0, [r4, #32]
    472c:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    472e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    4732:	2800      	cmp	r0, #0
    4734:	d0fb      	beq.n	472e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4736:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    473a:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    473e:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4740:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4744:	2334      	movs	r3, #52	; 0x34
    4746:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    474a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    474e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4752:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    4754:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    4756:	4e6f      	ldr	r6, [pc, #444]	; (4914 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    4758:	0739      	lsls	r1, r7, #28
    475a:	d406      	bmi.n	476a <nrfx_twim_xfer+0x13e>
    475c:	2a03      	cmp	r2, #3
    475e:	d004      	beq.n	476a <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4760:	2201      	movs	r2, #1
    4762:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    4764:	686b      	ldr	r3, [r5, #4]
    4766:	b903      	cbnz	r3, 476a <nrfx_twim_xfer+0x13e>
    4768:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    476a:	2334      	movs	r3, #52	; 0x34
    476c:	fb03 f30e 	mul.w	r3, r3, lr
    4770:	eb0c 0103 	add.w	r1, ip, r3
    4774:	f85c 2003 	ldr.w	r2, [ip, r3]
    4778:	2a00      	cmp	r2, #0
    477a:	d174      	bne.n	4866 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    477c:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    477e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4782:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4786:	2800      	cmp	r0, #0
    4788:	f040 8088 	bne.w	489c <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    478c:	3b00      	subs	r3, #0
    478e:	bf18      	it	ne
    4790:	2301      	movne	r3, #1
    4792:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4796:	2800      	cmp	r0, #0
    4798:	f000 8086 	beq.w	48a8 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    479c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    47a0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47a4:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    47a8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    47ac:	b115      	cbz	r5, 47b4 <nrfx_twim_xfer+0x188>
    47ae:	f410 7f00 	tst.w	r0, #512	; 0x200
    47b2:	d104      	bne.n	47be <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    47b4:	6221      	str	r1, [r4, #32]
    47b6:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    47b8:	2d00      	cmp	r5, #0
    47ba:	d0e0      	beq.n	477e <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    47bc:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    47be:	05c0      	lsls	r0, r0, #23
    47c0:	d572      	bpl.n	48a8 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47c2:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    47c6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    47ca:	e7d8      	b.n	477e <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    47cc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    47ce:	68e9      	ldr	r1, [r5, #12]
    47d0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    47d4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    47d8:	692b      	ldr	r3, [r5, #16]
    47da:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    47de:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    47e2:	f47f af3a 	bne.w	465a <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    47e6:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    47e8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    47ec:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    47f0:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    47f4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    47f8:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    47fa:	fb03 c30e 	mla	r3, r3, lr, ip
    47fe:	2102      	movs	r1, #2
    4800:	e012      	b.n	4828 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4802:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4804:	68e9      	ldr	r1, [r5, #12]
    4806:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    480a:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    480e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    4812:	f04f 0334 	mov.w	r3, #52	; 0x34
    4816:	d00b      	beq.n	4830 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    4818:	f44f 7180 	mov.w	r1, #256	; 0x100
    481c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4820:	fb03 c30e 	mla	r3, r3, lr, ip
    4824:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4828:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    482a:	2301      	movs	r3, #1
    482c:	6223      	str	r3, [r4, #32]
    482e:	e791      	b.n	4754 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    4830:	f44f 7100 	mov.w	r1, #512	; 0x200
    4834:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    4838:	e7df      	b.n	47fa <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    483a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    483c:	68e9      	ldr	r1, [r5, #12]
    483e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4842:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    4846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    484a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    484e:	2334      	movs	r3, #52	; 0x34
    4850:	fb03 c30e 	mla	r3, r3, lr, ip
    4854:	2102      	movs	r1, #2
    4856:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4858:	2301      	movs	r3, #1
    485a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    485c:	2300      	movs	r3, #0
    485e:	e77a      	b.n	4756 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    4860:	4e2d      	ldr	r6, [pc, #180]	; (4918 <nrfx_twim_xfer+0x2ec>)
    4862:	2308      	movs	r3, #8
    4864:	e778      	b.n	4758 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    4866:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    4868:	bf44      	itt	mi
    486a:	2300      	movmi	r3, #0
    486c:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    486e:	067b      	lsls	r3, r7, #25
    4870:	d406      	bmi.n	4880 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    4872:	2334      	movs	r3, #52	; 0x34
    4874:	fb03 c30e 	mla	r3, r3, lr, ip
    4878:	689a      	ldr	r2, [r3, #8]
    487a:	f042 0202 	orr.w	r2, r2, #2
    487e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    4880:	2334      	movs	r3, #52	; 0x34
    4882:	fb03 cc0e 	mla	ip, r3, lr, ip
    4886:	f8dc 3008 	ldr.w	r3, [ip, #8]
    488a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    488e:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4892:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    4896:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    489a:	e6df      	b.n	465c <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    489c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    48a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    48a4:	2301      	movs	r3, #1
    48a6:	e774      	b.n	4792 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    48a8:	2b00      	cmp	r3, #0
    48aa:	f43f af68 	beq.w	477e <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    48ae:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    48b0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    48b4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    48b8:	fb01 c20e 	mla	r2, r1, lr, ip
    48bc:	2000      	movs	r0, #0
    48be:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    48c2:	b18b      	cbz	r3, 48e8 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    48c4:	4a15      	ldr	r2, [pc, #84]	; (491c <nrfx_twim_xfer+0x2f0>)
    48c6:	4e16      	ldr	r6, [pc, #88]	; (4920 <nrfx_twim_xfer+0x2f4>)
    48c8:	f013 0f01 	tst.w	r3, #1
    48cc:	bf18      	it	ne
    48ce:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    48d0:	f013 0f02 	tst.w	r3, #2
    48d4:	f102 0201 	add.w	r2, r2, #1
    48d8:	bf18      	it	ne
    48da:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    48dc:	f013 0f04 	tst.w	r3, #4
    48e0:	4b10      	ldr	r3, [pc, #64]	; (4924 <nrfx_twim_xfer+0x2f8>)
    48e2:	bf18      	it	ne
    48e4:	461e      	movne	r6, r3
    48e6:	e6b9      	b.n	465c <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    48e8:	067b      	lsls	r3, r7, #25
    48ea:	f53f aeb7 	bmi.w	465c <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    48ee:	fb0e c101 	mla	r1, lr, r1, ip
    48f2:	4620      	mov	r0, r4
    48f4:	f002 fc40 	bl	7178 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    48f8:	4b09      	ldr	r3, [pc, #36]	; (4920 <nrfx_twim_xfer+0x2f4>)
    48fa:	2800      	cmp	r0, #0
    48fc:	bf08      	it	eq
    48fe:	461e      	moveq	r6, r3
    4900:	e6ac      	b.n	465c <nrfx_twim_xfer+0x30>
    4902:	bf00      	nop
    4904:	200004f4 	.word	0x200004f4
    4908:	0bad000a 	.word	0x0bad000a
    490c:	019c0202 	.word	0x019c0202
    4910:	0bad000b 	.word	0x0bad000b
    4914:	0bad0000 	.word	0x0bad0000
    4918:	0bad0004 	.word	0x0bad0004
    491c:	0bae0000 	.word	0x0bae0000
    4920:	0bad0001 	.word	0x0bad0001
    4924:	0bae0002 	.word	0x0bae0002

00004928 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    4928:	4901      	ldr	r1, [pc, #4]	; (4930 <nrfx_twim_0_irq_handler+0x8>)
    492a:	4802      	ldr	r0, [pc, #8]	; (4934 <nrfx_twim_0_irq_handler+0xc>)
    492c:	f7ff bd30 	b.w	4390 <twim_irq_handler>
    4930:	200004f4 	.word	0x200004f4
    4934:	40003000 	.word	0x40003000

00004938 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    4938:	4902      	ldr	r1, [pc, #8]	; (4944 <nrfx_twim_1_irq_handler+0xc>)
    493a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    493e:	f7ff bd27 	b.w	4390 <twim_irq_handler>
    4942:	bf00      	nop
    4944:	20000528 	.word	0x20000528

00004948 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4948:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    494a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    494e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4950:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4952:	6002      	str	r2, [r0, #0]
}
    4954:	4802      	ldr	r0, [pc, #8]	; (4960 <nrf_gpio_pin_port_decode+0x18>)
    4956:	bf18      	it	ne
    4958:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	50000300 	.word	0x50000300

00004964 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4966:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4968:	f002 fc36 	bl	71d8 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    496c:	4608      	mov	r0, r1
    496e:	f002 fc33 	bl	71d8 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4972:	a801      	add	r0, sp, #4
    4974:	9601      	str	r6, [sp, #4]
    4976:	f7ff ffe7 	bl	4948 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    497a:	9b01      	ldr	r3, [sp, #4]
    497c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    4980:	460c      	mov	r4, r1
    4982:	f240 610d 	movw	r1, #1549	; 0x60d
    4986:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    498a:	a801      	add	r0, sp, #4
    498c:	9401      	str	r4, [sp, #4]
    498e:	f7ff ffdb 	bl	4948 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4992:	9b01      	ldr	r3, [sp, #4]
    4994:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4998:	2509      	movs	r5, #9
    499a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    499e:	2004      	movs	r0, #4
    49a0:	f002 fac6 	bl	6f30 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    49a4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49a6:	a801      	add	r0, sp, #4
    49a8:	9401      	str	r4, [sp, #4]
    49aa:	f7ff ffcd 	bl	4948 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49ae:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    49b0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49b4:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    49b6:	07db      	lsls	r3, r3, #31
    49b8:	d415      	bmi.n	49e6 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49ba:	a801      	add	r0, sp, #4
    49bc:	9601      	str	r6, [sp, #4]
    49be:	f7ff ffc3 	bl	4948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    49c2:	9b01      	ldr	r3, [sp, #4]
    49c4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    49c8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    49cc:	2004      	movs	r0, #4
    49ce:	f002 faaf 	bl	6f30 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    49d2:	4630      	mov	r0, r6
    49d4:	f002 fc00 	bl	71d8 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    49d8:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    49da:	2004      	movs	r0, #4
    49dc:	f002 faa8 	bl	6f30 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    49e0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    49e4:	d1df      	bne.n	49a6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49e6:	a801      	add	r0, sp, #4
    49e8:	9401      	str	r4, [sp, #4]
    49ea:	f7ff ffad 	bl	4948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    49ee:	9a01      	ldr	r2, [sp, #4]
    49f0:	2301      	movs	r3, #1
    49f2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    49f4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    49f8:	2004      	movs	r0, #4
    49fa:	f002 fa99 	bl	6f30 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    49fe:	4620      	mov	r0, r4
    4a00:	f002 fbea 	bl	71d8 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    4a04:	2004      	movs	r0, #4
    4a06:	f002 fa93 	bl	6f30 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a0a:	a801      	add	r0, sp, #4
    4a0c:	9401      	str	r4, [sp, #4]
    4a0e:	f7ff ff9b 	bl	4948 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4a12:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4a14:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4a18:	4803      	ldr	r0, [pc, #12]	; (4a28 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4a1a:	40d3      	lsrs	r3, r2
    4a1c:	f003 0301 	and.w	r3, r3, #1
    4a20:	1ac0      	subs	r0, r0, r3
    4a22:	b003      	add	sp, #12
    4a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a26:	bf00      	nop
    4a28:	0bad0001 	.word	0x0bad0001

00004a2c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a2c:	4b0e      	ldr	r3, [pc, #56]	; (4a68 <z_sys_init_run_level+0x3c>)
{
    4a2e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4a34:	3001      	adds	r0, #1
    4a36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4a3a:	42a6      	cmp	r6, r4
    4a3c:	d800      	bhi.n	4a40 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4a3e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4a40:	e9d4 3500 	ldrd	r3, r5, [r4]
    4a44:	4628      	mov	r0, r5
    4a46:	4798      	blx	r3
		if (dev != NULL) {
    4a48:	b165      	cbz	r5, 4a64 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4a4a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4a4c:	b130      	cbz	r0, 4a5c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4a4e:	2800      	cmp	r0, #0
    4a50:	bfb8      	it	lt
    4a52:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4a54:	28ff      	cmp	r0, #255	; 0xff
    4a56:	bfa8      	it	ge
    4a58:	20ff      	movge	r0, #255	; 0xff
    4a5a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4a5c:	785a      	ldrb	r2, [r3, #1]
    4a5e:	f042 0201 	orr.w	r2, r2, #1
    4a62:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a64:	3408      	adds	r4, #8
    4a66:	e7e8      	b.n	4a3a <z_sys_init_run_level+0xe>
    4a68:	00007b38 	.word	0x00007b38

00004a6c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4a6c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4a6e:	4605      	mov	r5, r0
    4a70:	b910      	cbnz	r0, 4a78 <z_impl_device_get_binding+0xc>
		return NULL;
    4a72:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4a74:	4620      	mov	r0, r4
    4a76:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4a78:	7803      	ldrb	r3, [r0, #0]
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d0f9      	beq.n	4a72 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a7e:	4c0e      	ldr	r4, [pc, #56]	; (4ab8 <z_impl_device_get_binding+0x4c>)
    4a80:	4e0e      	ldr	r6, [pc, #56]	; (4abc <z_impl_device_get_binding+0x50>)
    4a82:	42b4      	cmp	r4, r6
    4a84:	d108      	bne.n	4a98 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a86:	4c0c      	ldr	r4, [pc, #48]	; (4ab8 <z_impl_device_get_binding+0x4c>)
    4a88:	42b4      	cmp	r4, r6
    4a8a:	d0f2      	beq.n	4a72 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a8c:	4620      	mov	r0, r4
    4a8e:	f002 fbb1 	bl	71f4 <z_device_is_ready>
    4a92:	b950      	cbnz	r0, 4aaa <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a94:	3418      	adds	r4, #24
    4a96:	e7f7      	b.n	4a88 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    4a98:	4620      	mov	r0, r4
    4a9a:	f002 fbab 	bl	71f4 <z_device_is_ready>
    4a9e:	b110      	cbz	r0, 4aa6 <z_impl_device_get_binding+0x3a>
    4aa0:	6823      	ldr	r3, [r4, #0]
    4aa2:	42ab      	cmp	r3, r5
    4aa4:	d0e6      	beq.n	4a74 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4aa6:	3418      	adds	r4, #24
    4aa8:	e7eb      	b.n	4a82 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4aaa:	6821      	ldr	r1, [r4, #0]
    4aac:	4628      	mov	r0, r5
    4aae:	f001 fc7f 	bl	63b0 <strcmp>
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d1ee      	bne.n	4a94 <z_impl_device_get_binding+0x28>
    4ab6:	e7dd      	b.n	4a74 <z_impl_device_get_binding+0x8>
    4ab8:	0000763c 	.word	0x0000763c
    4abc:	0000772c 	.word	0x0000772c

00004ac0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4ac0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4ac2:	4b0a      	ldr	r3, [pc, #40]	; (4aec <bg_thread_main+0x2c>)
    4ac4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4ac6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4ac8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4aca:	f7ff ffaf 	bl	4a2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4ace:	f001 f917 	bl	5d00 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4ad2:	2003      	movs	r0, #3
    4ad4:	f7ff ffaa 	bl	4a2c <z_sys_init_run_level>

	z_init_static_threads();
    4ad8:	f000 f906 	bl	4ce8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4adc:	f7fb fd56 	bl	58c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4ae0:	4a03      	ldr	r2, [pc, #12]	; (4af0 <bg_thread_main+0x30>)
    4ae2:	7b13      	ldrb	r3, [r2, #12]
    4ae4:	f023 0301 	bic.w	r3, r3, #1
    4ae8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4aea:	bd08      	pop	{r3, pc}
    4aec:	2000061f 	.word	0x2000061f
    4af0:	20000258 	.word	0x20000258

00004af4 <z_bss_zero>:
{
    4af4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4af6:	4803      	ldr	r0, [pc, #12]	; (4b04 <z_bss_zero+0x10>)
    4af8:	4a03      	ldr	r2, [pc, #12]	; (4b08 <z_bss_zero+0x14>)
    4afa:	2100      	movs	r1, #0
    4afc:	1a12      	subs	r2, r2, r0
    4afe:	f002 fbaa 	bl	7256 <z_early_memset>
}
    4b02:	bd08      	pop	{r3, pc}
    4b04:	200001c8 	.word	0x200001c8
    4b08:	20000620 	.word	0x20000620

00004b0c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4b0c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    4b0e:	4e14      	ldr	r6, [pc, #80]	; (4b60 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b10:	4d14      	ldr	r5, [pc, #80]	; (4b64 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    4b12:	4915      	ldr	r1, [pc, #84]	; (4b68 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    4b14:	2370      	movs	r3, #112	; 0x70
{
    4b16:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    4b18:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    4b1c:	2201      	movs	r2, #1
    4b1e:	2300      	movs	r3, #0
    4b20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4b24:	220f      	movs	r2, #15
    4b26:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4b2a:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b2c:	2318      	movs	r3, #24
    4b2e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    4b32:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    4b36:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4b38:	fb02 1100 	mla	r1, r2, r0, r1
    4b3c:	4b0b      	ldr	r3, [pc, #44]	; (4b6c <z_init_cpu+0x60>)
    4b3e:	9500      	str	r5, [sp, #0]
    4b40:	4630      	mov	r0, r6
    4b42:	f000 f87b 	bl	4c3c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b46:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b48:	4809      	ldr	r0, [pc, #36]	; (4b70 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    4b4a:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b4c:	3401      	adds	r4, #1
    4b4e:	f023 0304 	bic.w	r3, r3, #4
    4b52:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    4b56:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4b58:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4b5a:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4b5c:	b006      	add	sp, #24
    4b5e:	bd70      	pop	{r4, r5, r6, pc}
    4b60:	200001e8 	.word	0x200001e8
    4b64:	2000055c 	.word	0x2000055c
    4b68:	20000a20 	.word	0x20000a20
    4b6c:	00004da1 	.word	0x00004da1
    4b70:	20000b60 	.word	0x20000b60

00004b74 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4b74:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4b76:	4b2a      	ldr	r3, [pc, #168]	; (4c20 <z_cstart+0xac>)
    4b78:	b0a2      	sub	sp, #136	; 0x88
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4b7a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4b7e:	4d29      	ldr	r5, [pc, #164]	; (4c24 <z_cstart+0xb0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4b80:	4e29      	ldr	r6, [pc, #164]	; (4c28 <z_cstart+0xb4>)
    4b82:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4b84:	4f29      	ldr	r7, [pc, #164]	; (4c2c <z_cstart+0xb8>)
    4b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4b8a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4b8c:	2400      	movs	r4, #0
    4b8e:	23e0      	movs	r3, #224	; 0xe0
    4b90:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4b94:	77ec      	strb	r4, [r5, #31]
    4b96:	762c      	strb	r4, [r5, #24]
    4b98:	766c      	strb	r4, [r5, #25]
    4b9a:	76ac      	strb	r4, [r5, #26]
    4b9c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4ba0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ba2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4ba6:	626b      	str	r3, [r5, #36]	; 0x24
    4ba8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4bac:	f7fd f8e2 	bl	1d74 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4bb0:	f7fc fecc 	bl	194c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bb8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4bba:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    4bbc:	f240 1301 	movw	r3, #257	; 0x101
    4bc0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4bc4:	ab06      	add	r3, sp, #24
    4bc6:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
    4bc8:	941f      	str	r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4bca:	f002 fb12 	bl	71f2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4bce:	4620      	mov	r0, r4
    4bd0:	f7ff ff2c 	bl	4a2c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4bd4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4bd6:	4d16      	ldr	r5, [pc, #88]	; (4c30 <z_cstart+0xbc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4bd8:	f7ff ff28 	bl	4a2c <z_sys_init_run_level>
	z_sched_init();
    4bdc:	f000 fd5a 	bl	5694 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4be0:	4b14      	ldr	r3, [pc, #80]	; (4c34 <z_cstart+0xc0>)
	_kernel.ready_q.cache = &z_main_thread;
    4be2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4be4:	9305      	str	r3, [sp, #20]
    4be6:	2301      	movs	r3, #1
    4be8:	4913      	ldr	r1, [pc, #76]	; (4c38 <z_cstart+0xc4>)
    4bea:	9400      	str	r4, [sp, #0]
    4bec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4bf4:	463b      	mov	r3, r7
    4bf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4bfa:	4628      	mov	r0, r5
    4bfc:	f000 f81e 	bl	4c3c <z_setup_new_thread>
    4c00:	7b6a      	ldrb	r2, [r5, #13]
    4c02:	4606      	mov	r6, r0
    4c04:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4c08:	4628      	mov	r0, r5
    4c0a:	736a      	strb	r2, [r5, #13]
    4c0c:	f002 fbc9 	bl	73a2 <z_ready_thread>
	z_init_cpu(0);
    4c10:	4620      	mov	r0, r4
    4c12:	f7ff ff7b 	bl	4b0c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c16:	463a      	mov	r2, r7
    4c18:	4631      	mov	r1, r6
    4c1a:	4628      	mov	r0, r5
    4c1c:	f7fc ff90 	bl	1b40 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4c20:	20001360 	.word	0x20001360
    4c24:	e000ed00 	.word	0xe000ed00
    4c28:	2000055c 	.word	0x2000055c
    4c2c:	00004ac1 	.word	0x00004ac1
    4c30:	20000258 	.word	0x20000258
    4c34:	00007f26 	.word	0x00007f26
    4c38:	20000620 	.word	0x20000620

00004c3c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4c3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4c3e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4c40:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c42:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    4c44:	2604      	movs	r6, #4
    4c46:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4c48:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
    4c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    4c4e:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c50:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4c54:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
    4c58:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
    4c5a:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
    4c5e:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4c60:	e9c0 5506 	strd	r5, r5, [r0, #24]

	thread_base->sched_locked = 0U;
    4c64:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c66:	9202      	str	r2, [sp, #8]
    4c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4c6a:	9201      	str	r2, [sp, #4]
    4c6c:	9a08      	ldr	r2, [sp, #32]
    4c6e:	9200      	str	r2, [sp, #0]
    4c70:	4632      	mov	r2, r6
{
    4c72:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c74:	f7fc ff48 	bl	1b08 <arch_new_thread>
	if (!_current) {
    4c78:	4b04      	ldr	r3, [pc, #16]	; (4c8c <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
    4c7a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4c7c:	689b      	ldr	r3, [r3, #8]
    4c7e:	b103      	cbz	r3, 4c82 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
    4c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	return stack_ptr;
    4c82:	6663      	str	r3, [r4, #100]	; 0x64
}
    4c84:	4630      	mov	r0, r6
    4c86:	b004      	add	sp, #16
    4c88:	bd70      	pop	{r4, r5, r6, pc}
    4c8a:	bf00      	nop
    4c8c:	2000055c 	.word	0x2000055c

00004c90 <z_impl_k_thread_create>:
{
    4c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c92:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4c94:	2700      	movs	r7, #0
    4c96:	9705      	str	r7, [sp, #20]
    4c98:	9f10      	ldr	r7, [sp, #64]	; 0x40
    4c9a:	9704      	str	r7, [sp, #16]
    4c9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4c9e:	9703      	str	r7, [sp, #12]
    4ca0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4ca2:	9702      	str	r7, [sp, #8]
{
    4ca4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4ca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4caa:	9701      	str	r7, [sp, #4]
    4cac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4cae:	9700      	str	r7, [sp, #0]
{
    4cb0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4cb2:	f7ff ffc3 	bl	4c3c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4cb6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    4cba:	bf08      	it	eq
    4cbc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4cc0:	d005      	beq.n	4cce <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4cc2:	ea55 0306 	orrs.w	r3, r5, r6
    4cc6:	d105      	bne.n	4cd4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4cc8:	4620      	mov	r0, r4
    4cca:	f000 fbdd 	bl	5488 <z_sched_start>
}
    4cce:	4620      	mov	r0, r4
    4cd0:	b007      	add	sp, #28
    4cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4cd4:	4903      	ldr	r1, [pc, #12]	; (4ce4 <z_impl_k_thread_create+0x54>)
    4cd6:	4632      	mov	r2, r6
    4cd8:	462b      	mov	r3, r5
    4cda:	f104 0018 	add.w	r0, r4, #24
    4cde:	f000 fe63 	bl	59a8 <z_add_timeout>
    4ce2:	e7f4      	b.n	4cce <z_impl_k_thread_create+0x3e>
    4ce4:	000073c3 	.word	0x000073c3

00004ce8 <z_init_static_threads>:
{
    4ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cec:	4c29      	ldr	r4, [pc, #164]	; (4d94 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4cee:	4d2a      	ldr	r5, [pc, #168]	; (4d98 <z_init_static_threads+0xb0>)
{
    4cf0:	b087      	sub	sp, #28
    4cf2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4cf4:	42ae      	cmp	r6, r5
    4cf6:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4cfa:	d30f      	bcc.n	4d1c <z_init_static_threads+0x34>
	k_sched_lock();
    4cfc:	f000 fade 	bl	52bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4d00:	4c24      	ldr	r4, [pc, #144]	; (4d94 <z_init_static_threads+0xac>)
    4d02:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4d9c <z_init_static_threads+0xb4>
    4d06:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4d0a:	f240 37e7 	movw	r7, #999	; 0x3e7
    4d0e:	42ac      	cmp	r4, r5
    4d10:	d320      	bcc.n	4d54 <z_init_static_threads+0x6c>
}
    4d12:	b007      	add	sp, #28
    4d14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4d18:	f000 bca0 	b.w	565c <k_sched_unlock>
		z_setup_new_thread(
    4d1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4d20:	9305      	str	r3, [sp, #20]
    4d22:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4d26:	9304      	str	r3, [sp, #16]
    4d28:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4d2c:	9303      	str	r3, [sp, #12]
    4d2e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4d32:	9302      	str	r3, [sp, #8]
    4d34:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4d38:	9301      	str	r3, [sp, #4]
    4d3a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4d3e:	9300      	str	r3, [sp, #0]
    4d40:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4d44:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4d48:	f7ff ff78 	bl	4c3c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4d4c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4d50:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4d52:	e7ce      	b.n	4cf2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4d56:	1c5a      	adds	r2, r3, #1
    4d58:	d00d      	beq.n	4d76 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4d5e:	2100      	movs	r1, #0
    4d60:	4638      	mov	r0, r7
    4d62:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d66:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4d6a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d6e:	d104      	bne.n	4d7a <z_init_static_threads+0x92>
	z_sched_start(thread);
    4d70:	4640      	mov	r0, r8
    4d72:	f000 fb89 	bl	5488 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4d76:	3430      	adds	r4, #48	; 0x30
    4d78:	e7c9      	b.n	4d0e <z_init_static_threads+0x26>
    4d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4d7e:	2300      	movs	r3, #0
    4d80:	f7fb fa0e 	bl	1a0 <__aeabi_uldivmod>
    4d84:	4602      	mov	r2, r0
    4d86:	460b      	mov	r3, r1
    4d88:	f108 0018 	add.w	r0, r8, #24
    4d8c:	4649      	mov	r1, r9
    4d8e:	f000 fe0b 	bl	59a8 <z_add_timeout>
    4d92:	e7f0      	b.n	4d76 <z_init_static_threads+0x8e>
    4d94:	2000018c 	.word	0x2000018c
    4d98:	2000018c 	.word	0x2000018c
    4d9c:	000073c3 	.word	0x000073c3

00004da0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4da0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4da2:	4c0b      	ldr	r4, [pc, #44]	; (4dd0 <idle+0x30>)
	return !z_sys_post_kernel;
    4da4:	4d0b      	ldr	r5, [pc, #44]	; (4dd4 <idle+0x34>)
	__asm__ volatile(
    4da6:	f04f 0220 	mov.w	r2, #32
    4daa:	f3ef 8311 	mrs	r3, BASEPRI
    4dae:	f382 8812 	msr	BASEPRI_MAX, r2
    4db2:	f3bf 8f6f 	isb	sy
    4db6:	f002 fbb0 	bl	751a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4dba:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4dbc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4dbe:	b913      	cbnz	r3, 4dc6 <idle+0x26>
	arch_cpu_idle();
    4dc0:	f7fc fdca 	bl	1958 <arch_cpu_idle>
}
    4dc4:	e7ef      	b.n	4da6 <idle+0x6>
    4dc6:	f7fc fcf9 	bl	17bc <pm_system_suspend>
    4dca:	2800      	cmp	r0, #0
    4dcc:	d1eb      	bne.n	4da6 <idle+0x6>
    4dce:	e7f7      	b.n	4dc0 <idle+0x20>
    4dd0:	2000055c 	.word	0x2000055c
    4dd4:	2000061f 	.word	0x2000061f

00004dd8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4ddc:	4604      	mov	r4, r0
    4dde:	4617      	mov	r7, r2
    4de0:	461e      	mov	r6, r3
    4de2:	f04f 0320 	mov.w	r3, #32
    4de6:	f3ef 8811 	mrs	r8, BASEPRI
    4dea:	f383 8812 	msr	BASEPRI_MAX, r3
    4dee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4df2:	68c3      	ldr	r3, [r0, #12]
    4df4:	4a32      	ldr	r2, [pc, #200]	; (4ec0 <z_impl_k_mutex_lock+0xe8>)
    4df6:	b16b      	cbz	r3, 4e14 <z_impl_k_mutex_lock+0x3c>
    4df8:	6880      	ldr	r0, [r0, #8]
    4dfa:	6891      	ldr	r1, [r2, #8]
    4dfc:	4288      	cmp	r0, r1
    4dfe:	d019      	beq.n	4e34 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4e00:	ea57 0306 	orrs.w	r3, r7, r6
    4e04:	d118      	bne.n	4e38 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4e06:	f388 8811 	msr	BASEPRI, r8
    4e0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4e0e:	f06f 000f 	mvn.w	r0, #15
    4e12:	e00c      	b.n	4e2e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4e14:	6891      	ldr	r1, [r2, #8]
    4e16:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4e1a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4e1c:	3301      	adds	r3, #1
    4e1e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4e20:	6893      	ldr	r3, [r2, #8]
    4e22:	60a3      	str	r3, [r4, #8]
    4e24:	f388 8811 	msr	BASEPRI, r8
    4e28:	f3bf 8f6f 	isb	sy
		return 0;
    4e2c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4e2e:	b002      	add	sp, #8
    4e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4e34:	6921      	ldr	r1, [r4, #16]
    4e36:	e7f0      	b.n	4e1a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4e38:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4e3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4e40:	4299      	cmp	r1, r3
    4e42:	bfa8      	it	ge
    4e44:	4619      	movge	r1, r3
    4e46:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4e4a:	4291      	cmp	r1, r2
    4e4c:	bfb8      	it	lt
    4e4e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4e50:	428b      	cmp	r3, r1
    4e52:	dd2e      	ble.n	4eb2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4e54:	f002 fa15 	bl	7282 <adjust_owner_prio.isra.0>
    4e58:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4e5a:	e9cd 7600 	strd	r7, r6, [sp]
    4e5e:	4819      	ldr	r0, [pc, #100]	; (4ec4 <z_impl_k_mutex_lock+0xec>)
    4e60:	4622      	mov	r2, r4
    4e62:	4641      	mov	r1, r8
    4e64:	f000 fb6c 	bl	5540 <z_pend_curr>
	if (got_mutex == 0) {
    4e68:	2800      	cmp	r0, #0
    4e6a:	d0e0      	beq.n	4e2e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4e6c:	f04f 0320 	mov.w	r3, #32
    4e70:	f3ef 8611 	mrs	r6, BASEPRI
    4e74:	f383 8812 	msr	BASEPRI_MAX, r3
    4e78:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4e7c:	6823      	ldr	r3, [r4, #0]
    4e7e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e80:	429c      	cmp	r4, r3
    4e82:	d00a      	beq.n	4e9a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4e84:	b14b      	cbz	r3, 4e9a <z_impl_k_mutex_lock+0xc2>
    4e86:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4e8a:	4299      	cmp	r1, r3
    4e8c:	bfa8      	it	ge
    4e8e:	4619      	movge	r1, r3
    4e90:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4e94:	4299      	cmp	r1, r3
    4e96:	bfb8      	it	lt
    4e98:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4e9a:	68a0      	ldr	r0, [r4, #8]
    4e9c:	f002 f9f1 	bl	7282 <adjust_owner_prio.isra.0>
    4ea0:	b900      	cbnz	r0, 4ea4 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    4ea2:	b145      	cbz	r5, 4eb6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4ea4:	4807      	ldr	r0, [pc, #28]	; (4ec4 <z_impl_k_mutex_lock+0xec>)
    4ea6:	4631      	mov	r1, r6
    4ea8:	f000 f9f6 	bl	5298 <z_reschedule>
	return -EAGAIN;
    4eac:	f06f 000a 	mvn.w	r0, #10
    4eb0:	e7bd      	b.n	4e2e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4eb2:	2500      	movs	r5, #0
    4eb4:	e7d1      	b.n	4e5a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    4eb6:	f386 8811 	msr	BASEPRI, r6
    4eba:	f3bf 8f6f 	isb	sy
    4ebe:	e7f5      	b.n	4eac <z_impl_k_mutex_lock+0xd4>
    4ec0:	2000055c 	.word	0x2000055c
    4ec4:	20000620 	.word	0x20000620

00004ec8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4ec8:	6883      	ldr	r3, [r0, #8]
{
    4eca:	b570      	push	{r4, r5, r6, lr}
    4ecc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4ece:	b36b      	cbz	r3, 4f2c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4ed0:	4a19      	ldr	r2, [pc, #100]	; (4f38 <z_impl_k_mutex_unlock+0x70>)
    4ed2:	6892      	ldr	r2, [r2, #8]
    4ed4:	4293      	cmp	r3, r2
    4ed6:	d12c      	bne.n	4f32 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4ed8:	68c3      	ldr	r3, [r0, #12]
    4eda:	2b01      	cmp	r3, #1
    4edc:	d903      	bls.n	4ee6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4ede:	3b01      	subs	r3, #1
    4ee0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4ee2:	2000      	movs	r0, #0
}
    4ee4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    4ee6:	f04f 0320 	mov.w	r3, #32
    4eea:	f3ef 8511 	mrs	r5, BASEPRI
    4eee:	f383 8812 	msr	BASEPRI_MAX, r3
    4ef2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4ef6:	6901      	ldr	r1, [r0, #16]
    4ef8:	6880      	ldr	r0, [r0, #8]
    4efa:	f002 f9c2 	bl	7282 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4efe:	4620      	mov	r0, r4
    4f00:	f002 fac0 	bl	7484 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4f04:	2600      	movs	r6, #0
    4f06:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4f08:	b150      	cbz	r0, 4f20 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    4f0a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4f0e:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4f10:	66c6      	str	r6, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
    4f12:	f002 fa46 	bl	73a2 <z_ready_thread>
		z_reschedule(&lock, key);
    4f16:	4809      	ldr	r0, [pc, #36]	; (4f3c <z_impl_k_mutex_unlock+0x74>)
    4f18:	4629      	mov	r1, r5
    4f1a:	f000 f9bd 	bl	5298 <z_reschedule>
    4f1e:	e7e0      	b.n	4ee2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    4f20:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4f22:	f385 8811 	msr	BASEPRI, r5
    4f26:	f3bf 8f6f 	isb	sy
    4f2a:	e7da      	b.n	4ee2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    4f2c:	f06f 0015 	mvn.w	r0, #21
    4f30:	e7d8      	b.n	4ee4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    4f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f36:	e7d5      	b.n	4ee4 <z_impl_k_mutex_unlock+0x1c>
    4f38:	2000055c 	.word	0x2000055c
    4f3c:	20000620 	.word	0x20000620

00004f40 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4f40:	b538      	push	{r3, r4, r5, lr}
    4f42:	4604      	mov	r4, r0
	__asm__ volatile(
    4f44:	f04f 0320 	mov.w	r3, #32
    4f48:	f3ef 8511 	mrs	r5, BASEPRI
    4f4c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4f54:	f002 fa96 	bl	7484 <z_unpend_first_thread>

	if (thread != NULL) {
    4f58:	b148      	cbz	r0, 4f6e <z_impl_k_sem_give+0x2e>
    4f5a:	2200      	movs	r2, #0
    4f5c:	66c2      	str	r2, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4f5e:	f002 fa20 	bl	73a2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4f62:	4629      	mov	r1, r5
    4f64:	4805      	ldr	r0, [pc, #20]	; (4f7c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4f6a:	f000 b995 	b.w	5298 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4f6e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4f72:	429a      	cmp	r2, r3
    4f74:	bf18      	it	ne
    4f76:	3301      	addne	r3, #1
    4f78:	60a3      	str	r3, [r4, #8]
}
    4f7a:	e7f2      	b.n	4f62 <z_impl_k_sem_give+0x22>
    4f7c:	20000620 	.word	0x20000620

00004f80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4f80:	b513      	push	{r0, r1, r4, lr}
    4f82:	f04f 0420 	mov.w	r4, #32
    4f86:	f3ef 8111 	mrs	r1, BASEPRI
    4f8a:	f384 8812 	msr	BASEPRI_MAX, r4
    4f8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4f92:	6884      	ldr	r4, [r0, #8]
    4f94:	b144      	cbz	r4, 4fa8 <z_impl_k_sem_take+0x28>
		sem->count--;
    4f96:	3c01      	subs	r4, #1
    4f98:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4f9a:	f381 8811 	msr	BASEPRI, r1
    4f9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4fa2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4fa4:	b002      	add	sp, #8
    4fa6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4fa8:	ea52 0403 	orrs.w	r4, r2, r3
    4fac:	d106      	bne.n	4fbc <z_impl_k_sem_take+0x3c>
    4fae:	f381 8811 	msr	BASEPRI, r1
    4fb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4fb6:	f06f 000f 	mvn.w	r0, #15
    4fba:	e7f3      	b.n	4fa4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4fbc:	e9cd 2300 	strd	r2, r3, [sp]
    4fc0:	4602      	mov	r2, r0
    4fc2:	4802      	ldr	r0, [pc, #8]	; (4fcc <z_impl_k_sem_take+0x4c>)
    4fc4:	f000 fabc 	bl	5540 <z_pend_curr>
	return ret;
    4fc8:	e7ec      	b.n	4fa4 <z_impl_k_sem_take+0x24>
    4fca:	bf00      	nop
    4fcc:	20000620 	.word	0x20000620

00004fd0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    4fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    4fd4:	4e45      	ldr	r6, [pc, #276]	; (50ec <work_queue_main+0x11c>)
    4fd6:	b085      	sub	sp, #20
    4fd8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    4fda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4fde:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    4fe2:	f04f 0320 	mov.w	r3, #32
    4fe6:	f3ef 8711 	mrs	r7, BASEPRI
    4fea:	f383 8812 	msr	BASEPRI_MAX, r3
    4fee:	f3bf 8f6f 	isb	sy
    4ff2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4ff4:	b98d      	cbnz	r5, 501a <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    4ff6:	2102      	movs	r1, #2
    4ff8:	f104 0088 	add.w	r0, r4, #136	; 0x88
    4ffc:	f002 f95c 	bl	72b8 <flag_test_and_clear>
    5000:	2800      	cmp	r0, #0
    5002:	d132      	bne.n	506a <work_queue_main+0x9a>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    5004:	2300      	movs	r3, #0
    5006:	e9cd 8900 	strd	r8, r9, [sp]
    500a:	9302      	str	r3, [sp, #8]
    500c:	f104 0278 	add.w	r2, r4, #120	; 0x78
    5010:	4639      	mov	r1, r7
    5012:	4837      	ldr	r0, [pc, #220]	; (50f0 <work_queue_main+0x120>)
    5014:	f000 fc52 	bl	58bc <z_sched_wait>
			continue;
    5018:	e7e3      	b.n	4fe2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    501a:	6f62      	ldr	r2, [r4, #116]	; 0x74
	return node->next;
    501c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    501e:	6723      	str	r3, [r4, #112]	; 0x70
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5020:	4295      	cmp	r5, r2
    5022:	d100      	bne.n	5026 <work_queue_main+0x56>
	list->tail = node;
    5024:	6763      	str	r3, [r4, #116]	; 0x74
	*flagp |= BIT(bit);
    5026:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    502a:	f043 0302 	orr.w	r3, r3, #2
    502e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp &= ~BIT(bit);
    5032:	68eb      	ldr	r3, [r5, #12]
    5034:	f023 0304 	bic.w	r3, r3, #4
    5038:	f043 0301 	orr.w	r3, r3, #1
    503c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    503e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    5040:	f387 8811 	msr	BASEPRI, r7
    5044:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    5048:	4628      	mov	r0, r5
    504a:	4798      	blx	r3
	__asm__ volatile(
    504c:	f04f 0320 	mov.w	r3, #32
    5050:	f3ef 8b11 	mrs	fp, BASEPRI
    5054:	f383 8812 	msr	BASEPRI_MAX, r3
    5058:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    505c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    505e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5060:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5064:	d40b      	bmi.n	507e <work_queue_main+0xae>
	*flagp &= ~BIT(bit);
    5066:	60ea      	str	r2, [r5, #12]
    5068:	e00e      	b.n	5088 <work_queue_main+0xb8>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    506a:	f104 0580 	add.w	r5, r4, #128	; 0x80
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    506e:	2200      	movs	r2, #0
    5070:	2101      	movs	r1, #1
    5072:	4628      	mov	r0, r5
    5074:	f002 fa1e 	bl	74b4 <z_sched_wake>
    5078:	2800      	cmp	r0, #0
    507a:	d1f8      	bne.n	506e <work_queue_main+0x9e>
    507c:	e7c2      	b.n	5004 <work_queue_main+0x34>
	return list->head;
    507e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    5080:	f023 0303 	bic.w	r3, r3, #3
    5084:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5086:	b970      	cbnz	r0, 50a6 <work_queue_main+0xd6>
	*flagp &= ~BIT(bit);
    5088:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    508c:	f023 0302 	bic.w	r3, r3, #2
    5090:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	__asm__ volatile(
    5094:	f38b 8811 	msr	BASEPRI, fp
    5098:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    509c:	05d8      	lsls	r0, r3, #23
    509e:	d4a0      	bmi.n	4fe2 <work_queue_main+0x12>
	z_impl_k_yield();
    50a0:	f000 fb04 	bl	56ac <z_impl_k_yield>
}
    50a4:	e79d      	b.n	4fe2 <work_queue_main+0x12>
	return node->next;
    50a6:	2700      	movs	r7, #0
    50a8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    50ac:	463b      	mov	r3, r7
		if (wc->work == work) {
    50ae:	6842      	ldr	r2, [r0, #4]
    50b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    50b2:	4601      	mov	r1, r0
		if (wc->work == work) {
    50b4:	d10c      	bne.n	50d0 <work_queue_main+0x100>
	return node->next;
    50b6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    50b8:	b997      	cbnz	r7, 50e0 <work_queue_main+0x110>
    50ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    50bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    50be:	4282      	cmp	r2, r0
    50c0:	d100      	bne.n	50c4 <work_queue_main+0xf4>
	list->tail = node;
    50c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    50c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    50c8:	f7ff ff3a 	bl	4f40 <z_impl_k_sem_give>
}
    50cc:	4639      	mov	r1, r7
    50ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    50d0:	f1ba 0f00 	cmp.w	sl, #0
    50d4:	d0d8      	beq.n	5088 <work_queue_main+0xb8>
	return node->next;
    50d6:	4650      	mov	r0, sl
    50d8:	460f      	mov	r7, r1
    50da:	f8da a000 	ldr.w	sl, [sl]
    50de:	e7e6      	b.n	50ae <work_queue_main+0xde>
	return list->tail;
    50e0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    50e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    50e4:	4290      	cmp	r0, r2
	list->tail = node;
    50e6:	bf08      	it	eq
    50e8:	6077      	streq	r7, [r6, #4]
}
    50ea:	e7eb      	b.n	50c4 <work_queue_main+0xf4>
    50ec:	20000584 	.word	0x20000584
    50f0:	20000620 	.word	0x20000620

000050f4 <submit_to_queue_locked>:
{
    50f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    50f6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    50f8:	079a      	lsls	r2, r3, #30
{
    50fa:	4604      	mov	r4, r0
    50fc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    50fe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    5102:	d41f      	bmi.n	5144 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    5104:	075f      	lsls	r7, r3, #29
    5106:	d41f      	bmi.n	5148 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    5108:	680a      	ldr	r2, [r1, #0]
    510a:	b90a      	cbnz	r2, 5110 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    510c:	6882      	ldr	r2, [r0, #8]
    510e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5110:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    5112:	bf44      	itt	mi
    5114:	68a3      	ldrmi	r3, [r4, #8]
    5116:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    5118:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    511a:	bf4c      	ite	mi
    511c:	2502      	movmi	r5, #2
		ret = 1;
    511e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    5120:	b36f      	cbz	r7, 517e <submit_to_queue_locked+0x8a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5122:	4b1a      	ldr	r3, [pc, #104]	; (518c <submit_to_queue_locked+0x98>)
    5124:	689b      	ldr	r3, [r3, #8]
    5126:	42bb      	cmp	r3, r7
    5128:	d111      	bne.n	514e <submit_to_queue_locked+0x5a>
    512a:	f002 f898 	bl	725e <k_is_in_isr>
    512e:	f080 0001 	eor.w	r0, r0, #1
    5132:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    5134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5138:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    513a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    513e:	d521      	bpl.n	5184 <submit_to_queue_locked+0x90>
	} else if (draining && !chained) {
    5140:	b13a      	cbz	r2, 5152 <submit_to_queue_locked+0x5e>
    5142:	b940      	cbnz	r0, 5156 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    5144:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    5148:	2300      	movs	r3, #0
    514a:	6033      	str	r3, [r6, #0]
	return ret;
    514c:	e012      	b.n	5174 <submit_to_queue_locked+0x80>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    514e:	2000      	movs	r0, #0
    5150:	e7f0      	b.n	5134 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    5152:	071b      	lsls	r3, r3, #28
    5154:	d4f6      	bmi.n	5144 <submit_to_queue_locked+0x50>
	parent->next = child;
    5156:	2300      	movs	r3, #0
    5158:	6023      	str	r3, [r4, #0]
	return list->tail;
    515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
Z_GENLIST_APPEND(slist, snode)
    515c:	b963      	cbnz	r3, 5178 <submit_to_queue_locked+0x84>
	list->head = node;
    515e:	e9c7 441c 	strd	r4, r4, [r7, #112]	; 0x70
		(void)notify_queue_locked(queue);
    5162:	4638      	mov	r0, r7
    5164:	f002 f8b3 	bl	72ce <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    5168:	68e3      	ldr	r3, [r4, #12]
    516a:	f043 0304 	orr.w	r3, r3, #4
    516e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    5170:	6833      	ldr	r3, [r6, #0]
    5172:	60a3      	str	r3, [r4, #8]
}
    5174:	4628      	mov	r0, r5
    5176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5178:	601c      	str	r4, [r3, #0]
	list->tail = node;
    517a:	677c      	str	r4, [r7, #116]	; 0x74
}
    517c:	e7f1      	b.n	5162 <submit_to_queue_locked+0x6e>
		return -EINVAL;
    517e:	f06f 0515 	mvn.w	r5, #21
    5182:	e7e1      	b.n	5148 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    5184:	f06f 0512 	mvn.w	r5, #18
    5188:	e7de      	b.n	5148 <submit_to_queue_locked+0x54>
    518a:	bf00      	nop
    518c:	2000055c 	.word	0x2000055c

00005190 <k_work_submit>:
{
    5190:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    5192:	4801      	ldr	r0, [pc, #4]	; (5198 <k_work_submit+0x8>)
    5194:	f002 b8b6 	b.w	7304 <k_work_submit_to_queue>
    5198:	200002d0 	.word	0x200002d0

0000519c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    519c:	b5f0      	push	{r4, r5, r6, r7, lr}
    519e:	b089      	sub	sp, #36	; 0x24
    51a0:	4604      	mov	r4, r0
	list->head = NULL;
    51a2:	2000      	movs	r0, #0
	list->tail = NULL;
    51a4:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
    51a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    51aa:	f104 0078 	add.w	r0, r4, #120	; 0x78
	list->tail = (sys_dnode_t *)list;
    51ae:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    51b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    51b6:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    51ba:	b31d      	cbz	r5, 5204 <k_work_queue_start+0x68>
    51bc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    51be:	2800      	cmp	r0, #0
    51c0:	f240 1001 	movw	r0, #257	; 0x101
    51c4:	bf08      	it	eq
    51c6:	2001      	moveq	r0, #1
	*flagp = flags;
    51c8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    51cc:	2000      	movs	r0, #0
    51ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    51d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    51d6:	e9cd 3003 	strd	r3, r0, [sp, #12]
    51da:	e9cd 0001 	strd	r0, r0, [sp, #4]
    51de:	e9cd 6706 	strd	r6, r7, [sp, #24]
    51e2:	4b09      	ldr	r3, [pc, #36]	; (5208 <k_work_queue_start+0x6c>)
    51e4:	9400      	str	r4, [sp, #0]
    51e6:	4620      	mov	r0, r4
    51e8:	f7ff fd52 	bl	4c90 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    51ec:	b125      	cbz	r5, 51f8 <k_work_queue_start+0x5c>
    51ee:	6829      	ldr	r1, [r5, #0]
    51f0:	b111      	cbz	r1, 51f8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    51f2:	4620      	mov	r0, r4
    51f4:	f002 f839 	bl	726a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    51f8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    51fa:	b009      	add	sp, #36	; 0x24
    51fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5200:	f002 b836 	b.w	7270 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5204:	2001      	movs	r0, #1
    5206:	e7df      	b.n	51c8 <k_work_queue_start+0x2c>
    5208:	00004fd1 	.word	0x00004fd1

0000520c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    520c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    520e:	4d07      	ldr	r5, [pc, #28]	; (522c <z_reset_time_slice+0x20>)
    5210:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5212:	b154      	cbz	r4, 522a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5214:	f7fe f9d2 	bl	35bc <sys_clock_elapsed>
    5218:	4b05      	ldr	r3, [pc, #20]	; (5230 <z_reset_time_slice+0x24>)
    521a:	4404      	add	r4, r0
    521c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    521e:	6828      	ldr	r0, [r5, #0]
    5220:	2100      	movs	r1, #0
	}
}
    5222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5226:	f002 b988 	b.w	753a <z_set_timeout_expiry>
}
    522a:	bd38      	pop	{r3, r4, r5, pc}
    522c:	20000594 	.word	0x20000594
    5230:	2000055c 	.word	0x2000055c

00005234 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5236:	4604      	mov	r4, r0
    5238:	460d      	mov	r5, r1
	__asm__ volatile(
    523a:	f04f 0320 	mov.w	r3, #32
    523e:	f3ef 8711 	mrs	r7, BASEPRI
    5242:	f383 8812 	msr	BASEPRI_MAX, r3
    5246:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    524a:	4e10      	ldr	r6, [pc, #64]	; (528c <k_sched_time_slice_set+0x58>)
    524c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    524e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5252:	f240 30e7 	movw	r0, #999	; 0x3e7
    5256:	6131      	str	r1, [r6, #16]
    5258:	2300      	movs	r3, #0
    525a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    525e:	fbe4 010c 	umlal	r0, r1, r4, ip
    5262:	f7fa ff9d 	bl	1a0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5266:	2c00      	cmp	r4, #0
    5268:	4b09      	ldr	r3, [pc, #36]	; (5290 <k_sched_time_slice_set+0x5c>)
    526a:	dc0a      	bgt.n	5282 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    526c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    526e:	4b09      	ldr	r3, [pc, #36]	; (5294 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5270:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    5272:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5274:	f7ff ffca 	bl	520c <z_reset_time_slice>
	__asm__ volatile(
    5278:	f387 8811 	msr	BASEPRI, r7
    527c:	f3bf 8f6f 	isb	sy
	}
}
    5280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5282:	2802      	cmp	r0, #2
    5284:	bfb8      	it	lt
    5286:	2002      	movlt	r0, #2
    5288:	e7f0      	b.n	526c <k_sched_time_slice_set+0x38>
    528a:	bf00      	nop
    528c:	2000055c 	.word	0x2000055c
    5290:	20000594 	.word	0x20000594
    5294:	20000590 	.word	0x20000590

00005298 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5298:	b949      	cbnz	r1, 52ae <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    529a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    529e:	b930      	cbnz	r0, 52ae <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    52a0:	4b05      	ldr	r3, [pc, #20]	; (52b8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    52a2:	69da      	ldr	r2, [r3, #28]
    52a4:	689b      	ldr	r3, [r3, #8]
    52a6:	429a      	cmp	r2, r3
    52a8:	d001      	beq.n	52ae <z_reschedule+0x16>
	ret = arch_swap(key);
    52aa:	f7fc bbdf 	b.w	1a6c <arch_swap>
    52ae:	f381 8811 	msr	BASEPRI, r1
    52b2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    52b6:	4770      	bx	lr
    52b8:	2000055c 	.word	0x2000055c

000052bc <k_sched_lock>:
	__asm__ volatile(
    52bc:	f04f 0320 	mov.w	r3, #32
    52c0:	f3ef 8111 	mrs	r1, BASEPRI
    52c4:	f383 8812 	msr	BASEPRI_MAX, r3
    52c8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    52cc:	4b04      	ldr	r3, [pc, #16]	; (52e0 <k_sched_lock+0x24>)
    52ce:	689a      	ldr	r2, [r3, #8]
    52d0:	7bd3      	ldrb	r3, [r2, #15]
    52d2:	3b01      	subs	r3, #1
    52d4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    52d6:	f381 8811 	msr	BASEPRI, r1
    52da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    52de:	4770      	bx	lr
    52e0:	2000055c 	.word	0x2000055c

000052e4 <update_cache>:
{
    52e4:	b538      	push	{r3, r4, r5, lr}
    52e6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    52e8:	480c      	ldr	r0, [pc, #48]	; (531c <update_cache+0x38>)
    52ea:	4d0d      	ldr	r5, [pc, #52]	; (5320 <update_cache+0x3c>)
    52ec:	f002 f853 	bl	7396 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    52f0:	4604      	mov	r4, r0
    52f2:	b900      	cbnz	r0, 52f6 <update_cache+0x12>
    52f4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    52f6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    52f8:	b94a      	cbnz	r2, 530e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    52fa:	7b5a      	ldrb	r2, [r3, #13]
    52fc:	06d2      	lsls	r2, r2, #27
    52fe:	d106      	bne.n	530e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5300:	69a2      	ldr	r2, [r4, #24]
    5302:	b922      	cbnz	r2, 530e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5304:	89da      	ldrh	r2, [r3, #14]
    5306:	2a7f      	cmp	r2, #127	; 0x7f
    5308:	d901      	bls.n	530e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    530a:	61eb      	str	r3, [r5, #28]
}
    530c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    530e:	429c      	cmp	r4, r3
    5310:	d002      	beq.n	5318 <update_cache+0x34>
			z_reset_time_slice(thread);
    5312:	4620      	mov	r0, r4
    5314:	f7ff ff7a 	bl	520c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5318:	61ec      	str	r4, [r5, #28]
}
    531a:	e7f7      	b.n	530c <update_cache+0x28>
    531c:	2000057c 	.word	0x2000057c
    5320:	2000055c 	.word	0x2000055c

00005324 <move_thread_to_end_of_prio_q>:
{
    5324:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5326:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    532a:	7b43      	ldrb	r3, [r0, #13]
    532c:	2a00      	cmp	r2, #0
{
    532e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5330:	da04      	bge.n	533c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5336:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5338:	f001 fff5 	bl	7326 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    533c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    533e:	4a15      	ldr	r2, [pc, #84]	; (5394 <move_thread_to_end_of_prio_q+0x70>)
    5340:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5344:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5346:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    534a:	f102 0520 	add.w	r5, r2, #32
    534e:	42ab      	cmp	r3, r5
    5350:	d01b      	beq.n	538a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5352:	b1d3      	cbz	r3, 538a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    5354:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5358:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    535c:	4286      	cmp	r6, r0
    535e:	d00f      	beq.n	5380 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5360:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5362:	2800      	cmp	r0, #0
    5364:	dd0c      	ble.n	5380 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5366:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5368:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    536c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    536e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5370:	6890      	ldr	r0, [r2, #8]
    5372:	1a43      	subs	r3, r0, r1
    5374:	4258      	negs	r0, r3
}
    5376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    537a:	4158      	adcs	r0, r3
    537c:	f7ff bfb2 	b.w	52e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5380:	42a3      	cmp	r3, r4
    5382:	d002      	beq.n	538a <move_thread_to_end_of_prio_q+0x66>
    5384:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5386:	2b00      	cmp	r3, #0
    5388:	d1e6      	bne.n	5358 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    538a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    538e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5390:	6251      	str	r1, [r2, #36]	; 0x24
}
    5392:	e7ed      	b.n	5370 <move_thread_to_end_of_prio_q+0x4c>
    5394:	2000055c 	.word	0x2000055c

00005398 <z_time_slice>:
{
    5398:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    539a:	f04f 0320 	mov.w	r3, #32
    539e:	f3ef 8511 	mrs	r5, BASEPRI
    53a2:	f383 8812 	msr	BASEPRI_MAX, r3
    53a6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    53aa:	4b17      	ldr	r3, [pc, #92]	; (5408 <z_time_slice+0x70>)
    53ac:	4a17      	ldr	r2, [pc, #92]	; (540c <z_time_slice+0x74>)
    53ae:	689c      	ldr	r4, [r3, #8]
    53b0:	6811      	ldr	r1, [r2, #0]
    53b2:	428c      	cmp	r4, r1
    53b4:	d107      	bne.n	53c6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    53b6:	4620      	mov	r0, r4
    53b8:	f7ff ff28 	bl	520c <z_reset_time_slice>
	__asm__ volatile(
    53bc:	f385 8811 	msr	BASEPRI, r5
    53c0:	f3bf 8f6f 	isb	sy
}
    53c4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    53c6:	2100      	movs	r1, #0
    53c8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    53ca:	4a11      	ldr	r2, [pc, #68]	; (5410 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    53cc:	6812      	ldr	r2, [r2, #0]
    53ce:	b1c2      	cbz	r2, 5402 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    53d0:	89e2      	ldrh	r2, [r4, #14]
    53d2:	2a7f      	cmp	r2, #127	; 0x7f
    53d4:	d815      	bhi.n	5402 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    53d6:	7b62      	ldrb	r2, [r4, #13]
    53d8:	06d2      	lsls	r2, r2, #27
    53da:	d112      	bne.n	5402 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    53dc:	4a0d      	ldr	r2, [pc, #52]	; (5414 <z_time_slice+0x7c>)
    53de:	f994 100e 	ldrsb.w	r1, [r4, #14]
    53e2:	6812      	ldr	r2, [r2, #0]
    53e4:	4291      	cmp	r1, r2
    53e6:	db0c      	blt.n	5402 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    53e8:	4a0b      	ldr	r2, [pc, #44]	; (5418 <z_time_slice+0x80>)
    53ea:	4294      	cmp	r4, r2
    53ec:	d009      	beq.n	5402 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    53ee:	691a      	ldr	r2, [r3, #16]
    53f0:	4282      	cmp	r2, r0
    53f2:	dc03      	bgt.n	53fc <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    53f4:	4620      	mov	r0, r4
    53f6:	f7ff ff95 	bl	5324 <move_thread_to_end_of_prio_q>
    53fa:	e7dc      	b.n	53b6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    53fc:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    53fe:	611a      	str	r2, [r3, #16]
    5400:	e7dc      	b.n	53bc <z_time_slice+0x24>
    5402:	2200      	movs	r2, #0
    5404:	e7fb      	b.n	53fe <z_time_slice+0x66>
    5406:	bf00      	nop
    5408:	2000055c 	.word	0x2000055c
    540c:	2000058c 	.word	0x2000058c
    5410:	20000594 	.word	0x20000594
    5414:	20000590 	.word	0x20000590
    5418:	200001e8 	.word	0x200001e8

0000541c <ready_thread>:
{
    541c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    541e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5422:	7b43      	ldrb	r3, [r0, #13]
    5424:	2a00      	cmp	r2, #0
    5426:	db2a      	blt.n	547e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5428:	06da      	lsls	r2, r3, #27
    542a:	d128      	bne.n	547e <ready_thread+0x62>
    542c:	6982      	ldr	r2, [r0, #24]
    542e:	bb32      	cbnz	r2, 547e <ready_thread+0x62>
	return list->head == list;
    5430:	4a14      	ldr	r2, [pc, #80]	; (5484 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5432:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5436:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5438:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    543c:	f102 0520 	add.w	r5, r2, #32
    5440:	42ab      	cmp	r3, r5
    5442:	d017      	beq.n	5474 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5444:	b1b3      	cbz	r3, 5474 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    5446:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    544a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    544e:	428e      	cmp	r6, r1
    5450:	d00b      	beq.n	546a <ready_thread+0x4e>
		return b2 - b1;
    5452:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5454:	2900      	cmp	r1, #0
    5456:	dd08      	ble.n	546a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5458:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    545a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    545e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5460:	6058      	str	r0, [r3, #4]
}
    5462:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5464:	2000      	movs	r0, #0
    5466:	f7ff bf3d 	b.w	52e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    546a:	42a3      	cmp	r3, r4
    546c:	d002      	beq.n	5474 <ready_thread+0x58>
    546e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5470:	2b00      	cmp	r3, #0
    5472:	d1ea      	bne.n	544a <ready_thread+0x2e>
	node->prev = tail;
    5474:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5478:	6020      	str	r0, [r4, #0]
	list->tail = node;
    547a:	6250      	str	r0, [r2, #36]	; 0x24
}
    547c:	e7f1      	b.n	5462 <ready_thread+0x46>
}
    547e:	bc70      	pop	{r4, r5, r6}
    5480:	4770      	bx	lr
    5482:	bf00      	nop
    5484:	2000055c 	.word	0x2000055c

00005488 <z_sched_start>:
{
    5488:	b510      	push	{r4, lr}
	__asm__ volatile(
    548a:	f04f 0220 	mov.w	r2, #32
    548e:	f3ef 8411 	mrs	r4, BASEPRI
    5492:	f382 8812 	msr	BASEPRI_MAX, r2
    5496:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    549a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    549c:	0751      	lsls	r1, r2, #29
    549e:	d404      	bmi.n	54aa <z_sched_start+0x22>
	__asm__ volatile(
    54a0:	f384 8811 	msr	BASEPRI, r4
    54a4:	f3bf 8f6f 	isb	sy
}
    54a8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    54aa:	f022 0204 	bic.w	r2, r2, #4
    54ae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    54b0:	f7ff ffb4 	bl	541c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    54b4:	4621      	mov	r1, r4
    54b6:	4802      	ldr	r0, [pc, #8]	; (54c0 <z_sched_start+0x38>)
}
    54b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    54bc:	f7ff beec 	b.w	5298 <z_reschedule>
    54c0:	20000620 	.word	0x20000620

000054c4 <unready_thread>:
{
    54c4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    54c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    54ca:	7b43      	ldrb	r3, [r0, #13]
    54cc:	2a00      	cmp	r2, #0
{
    54ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    54d0:	da04      	bge.n	54dc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    54d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    54d8:	f001 ff25 	bl	7326 <sys_dlist_remove>
	update_cache(thread == _current);
    54dc:	4b04      	ldr	r3, [pc, #16]	; (54f0 <unready_thread+0x2c>)
    54de:	6898      	ldr	r0, [r3, #8]
    54e0:	1a43      	subs	r3, r0, r1
    54e2:	4258      	negs	r0, r3
    54e4:	4158      	adcs	r0, r3
}
    54e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    54ea:	f7ff befb 	b.w	52e4 <update_cache>
    54ee:	bf00      	nop
    54f0:	2000055c 	.word	0x2000055c

000054f4 <pend>:
{
    54f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54f8:	4606      	mov	r6, r0
    54fa:	4615      	mov	r5, r2
    54fc:	461c      	mov	r4, r3
	__asm__ volatile(
    54fe:	f04f 0320 	mov.w	r3, #32
    5502:	f3ef 8711 	mrs	r7, BASEPRI
    5506:	f383 8812 	msr	BASEPRI_MAX, r3
    550a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    550e:	f001 ff7a 	bl	7406 <add_to_waitq_locked>
	__asm__ volatile(
    5512:	f387 8811 	msr	BASEPRI, r7
    5516:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    551a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    551e:	bf08      	it	eq
    5520:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5524:	d008      	beq.n	5538 <pend+0x44>
    5526:	462a      	mov	r2, r5
    5528:	4623      	mov	r3, r4
    552a:	f106 0018 	add.w	r0, r6, #24
    552e:	4903      	ldr	r1, [pc, #12]	; (553c <pend+0x48>)
}
    5530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5534:	f000 ba38 	b.w	59a8 <z_add_timeout>
    5538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    553c:	000073c3 	.word	0x000073c3

00005540 <z_pend_curr>:
{
    5540:	b510      	push	{r4, lr}
	pending_current = _current;
    5542:	4b07      	ldr	r3, [pc, #28]	; (5560 <z_pend_curr+0x20>)
    5544:	6898      	ldr	r0, [r3, #8]
    5546:	4b07      	ldr	r3, [pc, #28]	; (5564 <z_pend_curr+0x24>)
{
    5548:	460c      	mov	r4, r1
	pending_current = _current;
    554a:	6018      	str	r0, [r3, #0]
{
    554c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    554e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5552:	f7ff ffcf 	bl	54f4 <pend>
    5556:	4620      	mov	r0, r4
}
    5558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    555c:	f7fc ba86 	b.w	1a6c <arch_swap>
    5560:	2000055c 	.word	0x2000055c
    5564:	2000058c 	.word	0x2000058c

00005568 <z_set_prio>:
{
    5568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    556a:	4604      	mov	r4, r0
	__asm__ volatile(
    556c:	f04f 0320 	mov.w	r3, #32
    5570:	f3ef 8611 	mrs	r6, BASEPRI
    5574:	f383 8812 	msr	BASEPRI_MAX, r3
    5578:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    557c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    557e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5580:	b249      	sxtb	r1, r1
    5582:	d133      	bne.n	55ec <z_set_prio+0x84>
		if (need_sched) {
    5584:	6982      	ldr	r2, [r0, #24]
    5586:	bb8a      	cbnz	r2, 55ec <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    558c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    558e:	f001 feca 	bl	7326 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5592:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5594:	4a17      	ldr	r2, [pc, #92]	; (55f4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5596:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5598:	f063 037f 	orn	r3, r3, #127	; 0x7f
    559c:	7343      	strb	r3, [r0, #13]
    559e:	4610      	mov	r0, r2
    55a0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55a4:	4283      	cmp	r3, r0
    55a6:	d01b      	beq.n	55e0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    55a8:	b1d3      	cbz	r3, 55e0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    55aa:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    55ac:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    55b0:	42a9      	cmp	r1, r5
    55b2:	d010      	beq.n	55d6 <z_set_prio+0x6e>
		return b2 - b1;
    55b4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    55b6:	2d00      	cmp	r5, #0
    55b8:	dd0d      	ble.n	55d6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    55ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    55bc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    55c0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    55c2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    55c4:	2001      	movs	r0, #1
    55c6:	f7ff fe8d 	bl	52e4 <update_cache>
    55ca:	2001      	movs	r0, #1
	__asm__ volatile(
    55cc:	f386 8811 	msr	BASEPRI, r6
    55d0:	f3bf 8f6f 	isb	sy
}
    55d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    55d6:	42bb      	cmp	r3, r7
    55d8:	d002      	beq.n	55e0 <z_set_prio+0x78>
    55da:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    55dc:	2b00      	cmp	r3, #0
    55de:	d1e5      	bne.n	55ac <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    55e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    55e2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    55e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    55e8:	6254      	str	r4, [r2, #36]	; 0x24
}
    55ea:	e7eb      	b.n	55c4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    55ec:	73a1      	strb	r1, [r4, #14]
    55ee:	2000      	movs	r0, #0
    55f0:	e7ec      	b.n	55cc <z_set_prio+0x64>
    55f2:	bf00      	nop
    55f4:	2000055c 	.word	0x2000055c

000055f8 <z_impl_k_thread_suspend>:
{
    55f8:	b570      	push	{r4, r5, r6, lr}
    55fa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    55fc:	3018      	adds	r0, #24
    55fe:	f001 ff76 	bl	74ee <z_abort_timeout>
	__asm__ volatile(
    5602:	f04f 0320 	mov.w	r3, #32
    5606:	f3ef 8611 	mrs	r6, BASEPRI
    560a:	f383 8812 	msr	BASEPRI_MAX, r3
    560e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5612:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5616:	7b63      	ldrb	r3, [r4, #13]
    5618:	2a00      	cmp	r2, #0
    561a:	da05      	bge.n	5628 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    561c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5620:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5622:	4620      	mov	r0, r4
    5624:	f001 fe7f 	bl	7326 <sys_dlist_remove>
		update_cache(thread == _current);
    5628:	4d0b      	ldr	r5, [pc, #44]	; (5658 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    562a:	7b63      	ldrb	r3, [r4, #13]
    562c:	68a8      	ldr	r0, [r5, #8]
    562e:	f043 0310 	orr.w	r3, r3, #16
    5632:	7363      	strb	r3, [r4, #13]
    5634:	1b03      	subs	r3, r0, r4
    5636:	4258      	negs	r0, r3
    5638:	4158      	adcs	r0, r3
    563a:	f7ff fe53 	bl	52e4 <update_cache>
	__asm__ volatile(
    563e:	f386 8811 	msr	BASEPRI, r6
    5642:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5646:	68ab      	ldr	r3, [r5, #8]
    5648:	42a3      	cmp	r3, r4
    564a:	d103      	bne.n	5654 <z_impl_k_thread_suspend+0x5c>
}
    564c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5650:	f001 be97 	b.w	7382 <z_reschedule_unlocked>
}
    5654:	bd70      	pop	{r4, r5, r6, pc}
    5656:	bf00      	nop
    5658:	2000055c 	.word	0x2000055c

0000565c <k_sched_unlock>:
{
    565c:	b510      	push	{r4, lr}
	__asm__ volatile(
    565e:	f04f 0320 	mov.w	r3, #32
    5662:	f3ef 8411 	mrs	r4, BASEPRI
    5666:	f383 8812 	msr	BASEPRI_MAX, r3
    566a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    566e:	4b08      	ldr	r3, [pc, #32]	; (5690 <k_sched_unlock+0x34>)
    5670:	689a      	ldr	r2, [r3, #8]
    5672:	7bd3      	ldrb	r3, [r2, #15]
    5674:	3301      	adds	r3, #1
    5676:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5678:	2000      	movs	r0, #0
    567a:	f7ff fe33 	bl	52e4 <update_cache>
	__asm__ volatile(
    567e:	f384 8811 	msr	BASEPRI, r4
    5682:	f3bf 8f6f 	isb	sy
}
    5686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    568a:	f001 be7a 	b.w	7382 <z_reschedule_unlocked>
    568e:	bf00      	nop
    5690:	2000055c 	.word	0x2000055c

00005694 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5694:	4b04      	ldr	r3, [pc, #16]	; (56a8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5696:	2100      	movs	r1, #0
    5698:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    569c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    56a0:	4608      	mov	r0, r1
    56a2:	f7ff bdc7 	b.w	5234 <k_sched_time_slice_set>
    56a6:	bf00      	nop
    56a8:	2000055c 	.word	0x2000055c

000056ac <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    56ae:	f04f 0320 	mov.w	r3, #32
    56b2:	f3ef 8511 	mrs	r5, BASEPRI
    56b6:	f383 8812 	msr	BASEPRI_MAX, r3
    56ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    56be:	491a      	ldr	r1, [pc, #104]	; (5728 <z_impl_k_yield+0x7c>)
    56c0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    56c2:	7b43      	ldrb	r3, [r0, #13]
    56c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    56c8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    56ca:	f001 fe2c 	bl	7326 <sys_dlist_remove>
	}
	queue_thread(_current);
    56ce:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    56d0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    56d2:	4608      	mov	r0, r1
    56d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    56d8:	735a      	strb	r2, [r3, #13]
    56da:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56de:	4282      	cmp	r2, r0
    56e0:	d01c      	beq.n	571c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56e2:	b1da      	cbz	r2, 571c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    56e4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    56e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    56ea:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    56ee:	42a6      	cmp	r6, r4
    56f0:	d00f      	beq.n	5712 <z_impl_k_yield+0x66>
		return b2 - b1;
    56f2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    56f4:	2c00      	cmp	r4, #0
    56f6:	dd0c      	ble.n	5712 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    56f8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    56fa:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    56fe:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5700:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5702:	2001      	movs	r0, #1
    5704:	f7ff fdee 	bl	52e4 <update_cache>
    5708:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    570a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    570e:	f7fc b9ad 	b.w	1a6c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5712:	42ba      	cmp	r2, r7
    5714:	d002      	beq.n	571c <z_impl_k_yield+0x70>
    5716:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5718:	2a00      	cmp	r2, #0
    571a:	d1e6      	bne.n	56ea <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    571c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    571e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5722:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5724:	624b      	str	r3, [r1, #36]	; 0x24
}
    5726:	e7ec      	b.n	5702 <z_impl_k_yield+0x56>
    5728:	2000055c 	.word	0x2000055c

0000572c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    572c:	ea50 0301 	orrs.w	r3, r0, r1
{
    5730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5734:	4605      	mov	r5, r0
    5736:	460e      	mov	r6, r1
	if (ticks == 0) {
    5738:	d103      	bne.n	5742 <z_tick_sleep+0x16>
	z_impl_k_yield();
    573a:	f7ff ffb7 	bl	56ac <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    573e:	2000      	movs	r0, #0
    5740:	e033      	b.n	57aa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5742:	f06f 0401 	mvn.w	r4, #1
    5746:	1a24      	subs	r4, r4, r0
    5748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    574c:	eb63 0301 	sbc.w	r3, r3, r1
    5750:	2c01      	cmp	r4, #1
    5752:	f173 0300 	sbcs.w	r3, r3, #0
    5756:	da02      	bge.n	575e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5758:	f001 ff09 	bl	756e <sys_clock_tick_get_32>
    575c:	1944      	adds	r4, r0, r5
    575e:	f04f 0320 	mov.w	r3, #32
    5762:	f3ef 8811 	mrs	r8, BASEPRI
    5766:	f383 8812 	msr	BASEPRI_MAX, r3
    576a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    576e:	4f10      	ldr	r7, [pc, #64]	; (57b0 <z_tick_sleep+0x84>)
    5770:	4b10      	ldr	r3, [pc, #64]	; (57b4 <z_tick_sleep+0x88>)
    5772:	68b8      	ldr	r0, [r7, #8]
    5774:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5776:	f7ff fea5 	bl	54c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    577a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    577c:	490e      	ldr	r1, [pc, #56]	; (57b8 <z_tick_sleep+0x8c>)
    577e:	462a      	mov	r2, r5
    5780:	4633      	mov	r3, r6
    5782:	3018      	adds	r0, #24
    5784:	f000 f910 	bl	59a8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5788:	68ba      	ldr	r2, [r7, #8]
    578a:	7b53      	ldrb	r3, [r2, #13]
    578c:	f043 0310 	orr.w	r3, r3, #16
    5790:	7353      	strb	r3, [r2, #13]
    5792:	4640      	mov	r0, r8
    5794:	f7fc f96a 	bl	1a6c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5798:	f001 fee9 	bl	756e <sys_clock_tick_get_32>
    579c:	1a20      	subs	r0, r4, r0
    579e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    57a2:	2801      	cmp	r0, #1
    57a4:	f173 0300 	sbcs.w	r3, r3, #0
    57a8:	dbc9      	blt.n	573e <z_tick_sleep+0x12>
}
    57aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57ae:	bf00      	nop
    57b0:	2000055c 	.word	0x2000055c
    57b4:	2000058c 	.word	0x2000058c
    57b8:	000073c3 	.word	0x000073c3

000057bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    57bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    57c0:	bf08      	it	eq
    57c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    57c6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    57c8:	d106      	bne.n	57d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    57ca:	4b08      	ldr	r3, [pc, #32]	; (57ec <z_impl_k_sleep+0x30>)
    57cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    57ce:	f7ff ff13 	bl	55f8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    57d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    57d6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    57d8:	f7ff ffa8 	bl	572c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    57dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    57e0:	fb80 0303 	smull	r0, r3, r0, r3
    57e4:	0bc0      	lsrs	r0, r0, #15
    57e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    57ea:	e7f4      	b.n	57d6 <z_impl_k_sleep+0x1a>
    57ec:	2000055c 	.word	0x2000055c

000057f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    57f0:	4b01      	ldr	r3, [pc, #4]	; (57f8 <z_impl_z_current_get+0x8>)
    57f2:	6898      	ldr	r0, [r3, #8]
    57f4:	4770      	bx	lr
    57f6:	bf00      	nop
    57f8:	2000055c 	.word	0x2000055c

000057fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    57fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5800:	4604      	mov	r4, r0
    5802:	f04f 0320 	mov.w	r3, #32
    5806:	f3ef 8611 	mrs	r6, BASEPRI
    580a:	f383 8812 	msr	BASEPRI_MAX, r3
    580e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5812:	7b03      	ldrb	r3, [r0, #12]
    5814:	07d9      	lsls	r1, r3, #31
    5816:	d50b      	bpl.n	5830 <z_thread_abort+0x34>
	__asm__ volatile(
    5818:	f386 8811 	msr	BASEPRI, r6
    581c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5820:	4040      	eors	r0, r0
    5822:	f380 8811 	msr	BASEPRI, r0
    5826:	f04f 0004 	mov.w	r0, #4
    582a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5830:	7b43      	ldrb	r3, [r0, #13]
    5832:	071a      	lsls	r2, r3, #28
    5834:	d504      	bpl.n	5840 <z_thread_abort+0x44>
    5836:	f386 8811 	msr	BASEPRI, r6
    583a:	f3bf 8f6f 	isb	sy
    583e:	e7f5      	b.n	582c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5840:	f023 0220 	bic.w	r2, r3, #32
    5844:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5848:	09d2      	lsrs	r2, r2, #7
    584a:	d120      	bne.n	588e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    584c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    584e:	68a3      	ldr	r3, [r4, #8]
    5850:	b113      	cbz	r3, 5858 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5852:	4620      	mov	r0, r4
    5854:	f001 fd6f 	bl	7336 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5858:	f104 0018 	add.w	r0, r4, #24
    585c:	f001 fe47 	bl	74ee <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5860:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5864:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5868:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    586a:	42bd      	cmp	r5, r7
    586c:	d000      	beq.n	5870 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    586e:	b9b5      	cbnz	r5, 589e <z_thread_abort+0xa2>
		update_cache(1);
    5870:	2001      	movs	r0, #1
    5872:	f7ff fd37 	bl	52e4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5876:	4b10      	ldr	r3, [pc, #64]	; (58b8 <z_thread_abort+0xbc>)
    5878:	689b      	ldr	r3, [r3, #8]
    587a:	42a3      	cmp	r3, r4
    587c:	d1db      	bne.n	5836 <z_thread_abort+0x3a>
    587e:	f3ef 8305 	mrs	r3, IPSR
    5882:	2b00      	cmp	r3, #0
    5884:	d1d7      	bne.n	5836 <z_thread_abort+0x3a>
    5886:	4630      	mov	r0, r6
    5888:	f7fc f8f0 	bl	1a6c <arch_swap>
	return ret;
    588c:	e7d3      	b.n	5836 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    588e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5892:	f043 0308 	orr.w	r3, r3, #8
    5896:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5898:	f001 fd45 	bl	7326 <sys_dlist_remove>
}
    589c:	e7d7      	b.n	584e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    589e:	4628      	mov	r0, r5
    58a0:	f001 fd49 	bl	7336 <unpend_thread_no_timeout>
    58a4:	f105 0018 	add.w	r0, r5, #24
    58a8:	f001 fe21 	bl	74ee <z_abort_timeout>
    58ac:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
		ready_thread(thread);
    58b0:	4628      	mov	r0, r5
    58b2:	f7ff fdb3 	bl	541c <ready_thread>
    58b6:	e7d7      	b.n	5868 <z_thread_abort+0x6c>
    58b8:	2000055c 	.word	0x2000055c

000058bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    58bc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    58be:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    58c2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    58c4:	e9cd 6700 	strd	r6, r7, [sp]
    58c8:	f7ff fe3a 	bl	5540 <z_pend_curr>

	if (data != NULL) {
    58cc:	b11c      	cbz	r4, 58d6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    58ce:	4b03      	ldr	r3, [pc, #12]	; (58dc <z_sched_wait+0x20>)
    58d0:	689b      	ldr	r3, [r3, #8]
    58d2:	695b      	ldr	r3, [r3, #20]
    58d4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    58d6:	b002      	add	sp, #8
    58d8:	bdd0      	pop	{r4, r6, r7, pc}
    58da:	bf00      	nop
    58dc:	2000055c 	.word	0x2000055c

000058e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    58e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    58e2:	4806      	ldr	r0, [pc, #24]	; (58fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    58e4:	4a06      	ldr	r2, [pc, #24]	; (5900 <z_data_copy+0x20>)
    58e6:	4907      	ldr	r1, [pc, #28]	; (5904 <z_data_copy+0x24>)
    58e8:	1a12      	subs	r2, r2, r0
    58ea:	f001 fcb6 	bl	725a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    58ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    58f2:	4a05      	ldr	r2, [pc, #20]	; (5908 <z_data_copy+0x28>)
    58f4:	4905      	ldr	r1, [pc, #20]	; (590c <z_data_copy+0x2c>)
    58f6:	4806      	ldr	r0, [pc, #24]	; (5910 <z_data_copy+0x30>)
    58f8:	f001 bcaf 	b.w	725a <z_early_memcpy>
    58fc:	20000000 	.word	0x20000000
    5900:	200001c8 	.word	0x200001c8
    5904:	00007f7c 	.word	0x00007f7c
    5908:	00000000 	.word	0x00000000
    590c:	00007f7c 	.word	0x00007f7c
    5910:	20000000 	.word	0x20000000

00005914 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5914:	4b03      	ldr	r3, [pc, #12]	; (5924 <elapsed+0x10>)
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	b90b      	cbnz	r3, 591e <elapsed+0xa>
    591a:	f7fd be4f 	b.w	35bc <sys_clock_elapsed>
}
    591e:	2000      	movs	r0, #0
    5920:	4770      	bx	lr
    5922:	bf00      	nop
    5924:	20000598 	.word	0x20000598

00005928 <next_timeout>:
	return list->head == list;
    5928:	4b10      	ldr	r3, [pc, #64]	; (596c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    592a:	b510      	push	{r4, lr}
    592c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    592e:	429c      	cmp	r4, r3
    5930:	bf08      	it	eq
    5932:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5934:	f7ff ffee 	bl	5914 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5938:	b1a4      	cbz	r4, 5964 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    593a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    593e:	1a1b      	subs	r3, r3, r0
    5940:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5948:	f170 0200 	sbcs.w	r2, r0, #0
    594c:	da0a      	bge.n	5964 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    594e:	2800      	cmp	r0, #0
    5950:	bfac      	ite	ge
    5952:	4618      	movge	r0, r3
    5954:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5956:	4b06      	ldr	r3, [pc, #24]	; (5970 <next_timeout+0x48>)
    5958:	691b      	ldr	r3, [r3, #16]
    595a:	b113      	cbz	r3, 5962 <next_timeout+0x3a>
    595c:	4298      	cmp	r0, r3
    595e:	bfa8      	it	ge
    5960:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5962:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5964:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5968:	e7f5      	b.n	5956 <next_timeout+0x2e>
    596a:	bf00      	nop
    596c:	2000015c 	.word	0x2000015c
    5970:	2000055c 	.word	0x2000055c

00005974 <remove_timeout>:
{
    5974:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5976:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5978:	b168      	cbz	r0, 5996 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    597a:	4a0a      	ldr	r2, [pc, #40]	; (59a4 <remove_timeout+0x30>)
    597c:	6852      	ldr	r2, [r2, #4]
    597e:	4290      	cmp	r0, r2
    5980:	d009      	beq.n	5996 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5982:	b143      	cbz	r3, 5996 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5984:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5988:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    598c:	1912      	adds	r2, r2, r4
    598e:	eb41 0105 	adc.w	r1, r1, r5
    5992:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5996:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5998:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    599a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    599c:	2300      	movs	r3, #0
	node->prev = NULL;
    599e:	e9c0 3300 	strd	r3, r3, [r0]
}
    59a2:	bd30      	pop	{r4, r5, pc}
    59a4:	2000015c 	.word	0x2000015c

000059a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59ac:	bf08      	it	eq
    59ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    59b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59b4:	4604      	mov	r4, r0
    59b6:	461f      	mov	r7, r3
    59b8:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59ba:	d067      	beq.n	5a8c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    59bc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    59be:	f04f 0320 	mov.w	r3, #32
    59c2:	f3ef 8611 	mrs	r6, BASEPRI
    59c6:	f383 8812 	msr	BASEPRI_MAX, r3
    59ca:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    59ce:	f06f 0201 	mvn.w	r2, #1
    59d2:	1b53      	subs	r3, r2, r5
    59d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    59d8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    59dc:	2b00      	cmp	r3, #0
    59de:	db1b      	blt.n	5a18 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    59e0:	4b2b      	ldr	r3, [pc, #172]	; (5a90 <z_add_timeout+0xe8>)
    59e2:	e9d3 1300 	ldrd	r1, r3, [r3]
    59e6:	1a52      	subs	r2, r2, r1
    59e8:	eb6c 0303 	sbc.w	r3, ip, r3
    59ec:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    59ee:	eb63 0307 	sbc.w	r3, r3, r7
    59f2:	2d01      	cmp	r5, #1
    59f4:	f173 0200 	sbcs.w	r2, r3, #0
    59f8:	bfbc      	itt	lt
    59fa:	2501      	movlt	r5, #1
    59fc:	2300      	movlt	r3, #0
    59fe:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5a02:	4824      	ldr	r0, [pc, #144]	; (5a94 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5a04:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a08:	4283      	cmp	r3, r0
    5a0a:	d118      	bne.n	5a3e <z_add_timeout+0x96>
	node->prev = tail;
    5a0c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5a10:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5a14:	6044      	str	r4, [r0, #4]
}
    5a16:	e026      	b.n	5a66 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5a18:	f7ff ff7c 	bl	5914 <elapsed>
    5a1c:	3501      	adds	r5, #1
    5a1e:	f147 0700 	adc.w	r7, r7, #0
    5a22:	182d      	adds	r5, r5, r0
    5a24:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5a28:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5a2c:	e7e9      	b.n	5a02 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5a2e:	1a52      	subs	r2, r2, r1
    5a30:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5a34:	459c      	cmp	ip, r3
    5a36:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5a3a:	d0e7      	beq.n	5a0c <z_add_timeout+0x64>
    5a3c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d0e4      	beq.n	5a0c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5a42:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5a46:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5a4a:	428a      	cmp	r2, r1
    5a4c:	eb75 0e07 	sbcs.w	lr, r5, r7
    5a50:	daed      	bge.n	5a2e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5a52:	1a8a      	subs	r2, r1, r2
    5a54:	eb67 0505 	sbc.w	r5, r7, r5
    5a58:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5a5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5a5e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5a62:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5a64:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5a66:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a68:	4283      	cmp	r3, r0
    5a6a:	d00b      	beq.n	5a84 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5a6c:	429c      	cmp	r4, r3
    5a6e:	d109      	bne.n	5a84 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5a70:	f7ff ff5a 	bl	5928 <next_timeout>

			if (next_time == 0 ||
    5a74:	b118      	cbz	r0, 5a7e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5a76:	4b08      	ldr	r3, [pc, #32]	; (5a98 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5a78:	691b      	ldr	r3, [r3, #16]
    5a7a:	4283      	cmp	r3, r0
    5a7c:	d002      	beq.n	5a84 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5a7e:	2100      	movs	r1, #0
    5a80:	f7fd fd6a 	bl	3558 <sys_clock_set_timeout>
	__asm__ volatile(
    5a84:	f386 8811 	msr	BASEPRI, r6
    5a88:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a8e:	bf00      	nop
    5a90:	200002c8 	.word	0x200002c8
    5a94:	2000015c 	.word	0x2000015c
    5a98:	2000055c 	.word	0x2000055c

00005a9c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5aa0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5aa2:	f7ff fc79 	bl	5398 <z_time_slice>
	__asm__ volatile(
    5aa6:	f04f 0320 	mov.w	r3, #32
    5aaa:	f3ef 8511 	mrs	r5, BASEPRI
    5aae:	f383 8812 	msr	BASEPRI_MAX, r3
    5ab2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5ab6:	4f24      	ldr	r7, [pc, #144]	; (5b48 <sys_clock_announce+0xac>)
	return list->head == list;
    5ab8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5b4c <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5abc:	4e24      	ldr	r6, [pc, #144]	; (5b50 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
    5abe:	603c      	str	r4, [r7, #0]
    5ac0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5ac4:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ac6:	4540      	cmp	r0, r8
		curr_tick += dt;
    5ac8:	e9d6 2e00 	ldrd	r2, lr, [r6]
    5acc:	ea4f 71e3 	mov.w	r1, r3, asr #31
    5ad0:	d00b      	beq.n	5aea <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5ad2:	b150      	cbz	r0, 5aea <sys_clock_announce+0x4e>
    5ad4:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    5ad8:	42a3      	cmp	r3, r4
    5ada:	eb71 090c 	sbcs.w	r9, r1, ip
    5ade:	da16      	bge.n	5b0e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5ae0:	1ae4      	subs	r4, r4, r3
    5ae2:	eb6c 0c01 	sbc.w	ip, ip, r1
    5ae6:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5aea:	189b      	adds	r3, r3, r2
    5aec:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    5af0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5af2:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    5af6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5af8:	f7ff ff16 	bl	5928 <next_timeout>
    5afc:	4621      	mov	r1, r4
    5afe:	f7fd fd2b 	bl	3558 <sys_clock_set_timeout>
	__asm__ volatile(
    5b02:	f385 8811 	msr	BASEPRI, r5
    5b06:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5b0e:	18a2      	adds	r2, r4, r2
    5b10:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
    5b14:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    5b18:	2300      	movs	r3, #0
    5b1a:	2200      	movs	r2, #0
    5b1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    5b20:	f7ff ff28 	bl	5974 <remove_timeout>
    5b24:	f385 8811 	msr	BASEPRI, r5
    5b28:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5b2c:	6883      	ldr	r3, [r0, #8]
    5b2e:	4798      	blx	r3
	__asm__ volatile(
    5b30:	f04f 0320 	mov.w	r3, #32
    5b34:	f3ef 8511 	mrs	r5, BASEPRI
    5b38:	f383 8812 	msr	BASEPRI_MAX, r3
    5b3c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    5b40:	683b      	ldr	r3, [r7, #0]
    5b42:	1b1b      	subs	r3, r3, r4
    5b44:	603b      	str	r3, [r7, #0]
    5b46:	e7bb      	b.n	5ac0 <sys_clock_announce+0x24>
    5b48:	20000598 	.word	0x20000598
    5b4c:	2000015c 	.word	0x2000015c
    5b50:	200002c8 	.word	0x200002c8

00005b54 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5b54:	b510      	push	{r4, lr}
    5b56:	f04f 0320 	mov.w	r3, #32
    5b5a:	f3ef 8411 	mrs	r4, BASEPRI
    5b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b62:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    5b66:	f7ff fed5 	bl	5914 <elapsed>
    5b6a:	4b06      	ldr	r3, [pc, #24]	; (5b84 <sys_clock_tick_get+0x30>)
    5b6c:	4601      	mov	r1, r0
    5b6e:	e9d3 0300 	ldrd	r0, r3, [r3]
    5b72:	1808      	adds	r0, r1, r0
    5b74:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    5b78:	f384 8811 	msr	BASEPRI, r4
    5b7c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5b80:	bd10      	pop	{r4, pc}
    5b82:	bf00      	nop
    5b84:	200002c8 	.word	0x200002c8

00005b88 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5b88:	b570      	push	{r4, r5, r6, lr}
    5b8a:	4604      	mov	r4, r0
	__asm__ volatile(
    5b8c:	f04f 0320 	mov.w	r3, #32
    5b90:	f3ef 8511 	mrs	r5, BASEPRI
    5b94:	f383 8812 	msr	BASEPRI_MAX, r3
    5b98:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5b9c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5ba0:	3301      	adds	r3, #1
    5ba2:	f142 0200 	adc.w	r2, r2, #0
    5ba6:	2b02      	cmp	r3, #2
    5ba8:	f172 0300 	sbcs.w	r3, r2, #0
    5bac:	d322      	bcc.n	5bf4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    5bae:	f001 fce2 	bl	7576 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    5bb2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    5bb6:	3001      	adds	r0, #1
    5bb8:	f141 0100 	adc.w	r1, r1, #0
    5bbc:	18c0      	adds	r0, r0, r3
    5bbe:	eb41 0102 	adc.w	r1, r1, r2
    5bc2:	2801      	cmp	r0, #1
    5bc4:	f171 0300 	sbcs.w	r3, r1, #0
    5bc8:	db32      	blt.n	5c30 <z_timer_expiration_handler+0xa8>
    5bca:	f001 fcd4 	bl	7576 <z_impl_k_uptime_ticks>
    5bce:	3001      	adds	r0, #1
    5bd0:	f141 0300 	adc.w	r3, r1, #0
    5bd4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    5bd8:	1880      	adds	r0, r0, r2
    5bda:	f06f 0201 	mvn.w	r2, #1
    5bde:	eb43 0301 	adc.w	r3, r3, r1
    5be2:	1a12      	subs	r2, r2, r0
    5be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5be8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5bec:	491a      	ldr	r1, [pc, #104]	; (5c58 <z_timer_expiration_handler+0xd0>)
    5bee:	4620      	mov	r0, r4
    5bf0:	f7ff feda 	bl	59a8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    5bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5bf6:	3301      	adds	r3, #1
    5bf8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5bfa:	6a23      	ldr	r3, [r4, #32]
    5bfc:	b173      	cbz	r3, 5c1c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    5bfe:	f385 8811 	msr	BASEPRI, r5
    5c02:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5c06:	6a23      	ldr	r3, [r4, #32]
    5c08:	4620      	mov	r0, r4
    5c0a:	4798      	blx	r3
	__asm__ volatile(
    5c0c:	f04f 0320 	mov.w	r3, #32
    5c10:	f3ef 8511 	mrs	r5, BASEPRI
    5c14:	f383 8812 	msr	BASEPRI_MAX, r3
    5c18:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5c1c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c20:	42a6      	cmp	r6, r4
    5c22:	d000      	beq.n	5c26 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5c24:	b94e      	cbnz	r6, 5c3a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    5c26:	f385 8811 	msr	BASEPRI, r5
    5c2a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5c2e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    5c30:	f06f 0201 	mvn.w	r2, #1
    5c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c38:	e7d8      	b.n	5bec <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    5c3a:	4630      	mov	r0, r6
    5c3c:	f001 fb85 	bl	734a <z_unpend_thread_no_timeout>
    5c40:	2300      	movs	r3, #0
    5c42:	66f3      	str	r3, [r6, #108]	; 0x6c
    5c44:	f385 8811 	msr	BASEPRI, r5
    5c48:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5c4c:	4630      	mov	r0, r6
}
    5c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5c52:	f001 bba6 	b.w	73a2 <z_ready_thread>
    5c56:	bf00      	nop
    5c58:	00005b89 	.word	0x00005b89

00005c5c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c60:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5c66:	bf08      	it	eq
    5c68:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    5c6c:	4606      	mov	r6, r0
    5c6e:	461c      	mov	r4, r3
    5c70:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5c74:	4689      	mov	r9, r1
    5c76:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c78:	d03e      	beq.n	5cf8 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5c7e:	bf08      	it	eq
    5c80:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5c84:	4615      	mov	r5, r2
    5c86:	4607      	mov	r7, r0
    5c88:	d014      	beq.n	5cb4 <z_impl_k_timer_start+0x58>
    5c8a:	ea50 0302 	orrs.w	r3, r0, r2
    5c8e:	d011      	beq.n	5cb4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    5c90:	f06f 0301 	mvn.w	r3, #1
    5c94:	1a9b      	subs	r3, r3, r2
    5c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c9a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	da08      	bge.n	5cb4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    5ca2:	2a02      	cmp	r2, #2
    5ca4:	f170 0300 	sbcs.w	r3, r0, #0
    5ca8:	bfbc      	itt	lt
    5caa:	2502      	movlt	r5, #2
    5cac:	2700      	movlt	r7, #0
    5cae:	3d01      	subs	r5, #1
    5cb0:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5cb4:	f06f 0301 	mvn.w	r3, #1
    5cb8:	1a5b      	subs	r3, r3, r1
    5cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5cbe:	eb63 0304 	sbc.w	r3, r3, r4
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	da09      	bge.n	5cda <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5cc6:	2901      	cmp	r1, #1
    5cc8:	f174 0300 	sbcs.w	r3, r4, #0
    5ccc:	bfbc      	itt	lt
    5cce:	2101      	movlt	r1, #1
    5cd0:	2400      	movlt	r4, #0
    5cd2:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    5cd6:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5cda:	4630      	mov	r0, r6
    5cdc:	f001 fc07 	bl	74ee <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5ce0:	2300      	movs	r3, #0
    5ce2:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5ce4:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5ce8:	464a      	mov	r2, r9
    5cea:	4643      	mov	r3, r8
    5cec:	4630      	mov	r0, r6
    5cee:	4903      	ldr	r1, [pc, #12]	; (5cfc <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5cf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5cf4:	f7ff be58 	b.w	59a8 <z_add_timeout>
}
    5cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cfc:	00005b89 	.word	0x00005b89

00005d00 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5d00:	4a02      	ldr	r2, [pc, #8]	; (5d0c <boot_banner+0xc>)
    5d02:	4903      	ldr	r1, [pc, #12]	; (5d10 <boot_banner+0x10>)
    5d04:	4803      	ldr	r0, [pc, #12]	; (5d14 <boot_banner+0x14>)
    5d06:	f000 b8a8 	b.w	5e5a <printk>
    5d0a:	bf00      	nop
    5d0c:	00007f72 	.word	0x00007f72
    5d10:	00007f2b 	.word	0x00007f2b
    5d14:	00007f4c 	.word	0x00007f4c

00005d18 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    5d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    5d1a:	4b09      	ldr	r3, [pc, #36]	; (5d40 <k_sys_work_q_init+0x28>)
    5d1c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    5d1e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    5d20:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    5d22:	9300      	str	r3, [sp, #0]
    5d24:	4907      	ldr	r1, [pc, #28]	; (5d44 <k_sys_work_q_init+0x2c>)
    5d26:	4808      	ldr	r0, [pc, #32]	; (5d48 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    5d28:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    5d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5d34:	f7ff fa32 	bl	519c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5d38:	4620      	mov	r0, r4
    5d3a:	b004      	add	sp, #16
    5d3c:	bd10      	pop	{r4, pc}
    5d3e:	bf00      	nop
    5d40:	00007f73 	.word	0x00007f73
    5d44:	20001360 	.word	0x20001360
    5d48:	200002d0 	.word	0x200002d0

00005d4c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5d4c:	4770      	bx	lr

00005d4e <gpio_pin_configure.constprop.0.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    5d4e:	b430      	push	{r4, r5}
	struct gpio_driver_data *data =
    5d50:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    5d52:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5d54:	2301      	movs	r3, #1
    5d56:	fa03 f201 	lsl.w	r2, r3, r1
    5d5a:	6823      	ldr	r3, [r4, #0]
    5d5c:	ea23 0302 	bic.w	r3, r3, r2
    5d60:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    5d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5d66:	682b      	ldr	r3, [r5, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
    5d68:	bc30      	pop	{r4, r5}
    5d6a:	4718      	bx	r3

00005d6c <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5d6c:	2301      	movs	r3, #1
    5d6e:	fa03 f101 	lsl.w	r1, r3, r1
    5d72:	6903      	ldr	r3, [r0, #16]
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    5d78:	bf18      	it	ne
    5d7a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    5d7e:	b112      	cbz	r2, 5d86 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    5d80:	6883      	ldr	r3, [r0, #8]
    5d82:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5d84:	4718      	bx	r3
    5d86:	6883      	ldr	r3, [r0, #8]
    5d88:	691b      	ldr	r3, [r3, #16]
    5d8a:	e7fb      	b.n	5d84 <gpio_pin_set.isra.0+0x18>

00005d8c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    5d8c:	4601      	mov	r1, r0
    5d8e:	f240 30e7 	movw	r0, #999	; 0x3e7
    5d92:	b508      	push	{r3, lr}
    5d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d98:	2300      	movs	r3, #0
    5d9a:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    5d9e:	1449      	asrs	r1, r1, #17
    5da0:	f7fa f9fe 	bl	1a0 <__aeabi_uldivmod>
}
    5da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    5da8:	f7ff bd08 	b.w	57bc <z_impl_k_sleep>

00005dac <display_openAperture>:
    x1 = x1 + 40;
    5dac:	3028      	adds	r0, #40	; 0x28
{
    5dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    x2 = x2 + 40;
    5db0:	3228      	adds	r2, #40	; 0x28
    y2 = y2 + 53;
    5db2:	3335      	adds	r3, #53	; 0x35
    y1 = y1 + 53;
    5db4:	3135      	adds	r1, #53	; 0x35
    x1 = x1 + 40;
    5db6:	b287      	uxth	r7, r0
	display_command(0x2A); // Set X limits    	
    5db8:	202a      	movs	r0, #42	; 0x2a
    x2 = x2 + 40;
    5dba:	b296      	uxth	r6, r2
    y1 = y1 + 53;
    5dbc:	b28d      	uxth	r5, r1
    y2 = y2 + 53;
    5dbe:	b29c      	uxth	r4, r3
	display_command(0x2A); // Set X limits    	
    5dc0:	f7fa fca2 	bl	708 <display_command>
    display_data(x1>>8);
    5dc4:	0a38      	lsrs	r0, r7, #8
    5dc6:	f7fa fcb7 	bl	738 <display_data>
    display_data(x1&0xff);        
    5dca:	b2f8      	uxtb	r0, r7
    5dcc:	f7fa fcb4 	bl	738 <display_data>
    display_data(x2>>8);
    5dd0:	0a30      	lsrs	r0, r6, #8
    5dd2:	f7fa fcb1 	bl	738 <display_data>
    display_data(x2&0xff);
    5dd6:	b2f0      	uxtb	r0, r6
    5dd8:	f7fa fcae 	bl	738 <display_data>
    display_command(0x2B);// Set Y limits
    5ddc:	202b      	movs	r0, #43	; 0x2b
    5dde:	f7fa fc93 	bl	708 <display_command>
    display_data(y1>>8);
    5de2:	0a28      	lsrs	r0, r5, #8
    5de4:	f7fa fca8 	bl	738 <display_data>
    display_data(y1&0xff);        
    5de8:	b2e8      	uxtb	r0, r5
    5dea:	f7fa fca5 	bl	738 <display_data>
    display_data(y2>>8);
    5dee:	0a20      	lsrs	r0, r4, #8
    5df0:	f7fa fca2 	bl	738 <display_data>
    display_data(y2&0xff);    
    5df4:	b2e0      	uxtb	r0, r4
    5df6:	f7fa fc9f 	bl	738 <display_data>
}
    5dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    display_command(0x2c); // put display in to data write mode
    5dfe:	202c      	movs	r0, #44	; 0x2c
    5e00:	f7fa bc82 	b.w	708 <display_command>

00005e04 <display_RGBToWord>:
uint16_t display_RGBToWord(uint16_t R, uint16_t G, uint16_t B)
{
    uint16_t rvalue = 0;
    rvalue += G >> 5;
    rvalue += (G & (0b111)) << 13;
    rvalue += (R >> 3) << 8;
    5e04:	08c3      	lsrs	r3, r0, #3
    rvalue += G >> 5;
    5e06:	0948      	lsrs	r0, r1, #5
    rvalue += (B >> 3) << 3;
    5e08:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    5e0c:	08d2      	lsrs	r2, r2, #3
    5e0e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    5e12:	eb00 3041 	add.w	r0, r0, r1, lsl #13
    return rvalue;
}
    5e16:	b280      	uxth	r0, r0
    5e18:	4770      	bx	lr

00005e1a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5e1a:	4603      	mov	r3, r0
    5e1c:	b158      	cbz	r0, 5e36 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5e1e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5e20:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5e24:	2a01      	cmp	r2, #1
    5e26:	d003      	beq.n	5e30 <sys_notify_validate+0x16>
    5e28:	2a03      	cmp	r2, #3
    5e2a:	d104      	bne.n	5e36 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5e2c:	6802      	ldr	r2, [r0, #0]
    5e2e:	b112      	cbz	r2, 5e36 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5e30:	2000      	movs	r0, #0
    5e32:	6098      	str	r0, [r3, #8]
    5e34:	4770      	bx	lr
		return -EINVAL;
    5e36:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5e3a:	4770      	bx	lr

00005e3c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5e3c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5e3e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5e40:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5e44:	2a03      	cmp	r2, #3
    5e46:	f04f 0200 	mov.w	r2, #0
{
    5e4a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5e4c:	bf0c      	ite	eq
    5e4e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    5e50:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5e52:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5e54:	4770      	bx	lr

00005e56 <arch_printk_char_out>:
}
    5e56:	2000      	movs	r0, #0
    5e58:	4770      	bx	lr

00005e5a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5e5a:	b40f      	push	{r0, r1, r2, r3}
    5e5c:	b507      	push	{r0, r1, r2, lr}
    5e5e:	a904      	add	r1, sp, #16
    5e60:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5e64:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5e66:	f7fa ff87 	bl	d78 <vprintk>

	va_end(ap);
}
    5e6a:	b003      	add	sp, #12
    5e6c:	f85d eb04 	ldr.w	lr, [sp], #4
    5e70:	b004      	add	sp, #16
    5e72:	4770      	bx	lr

00005e74 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5e74:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5e76:	f013 0307 	ands.w	r3, r3, #7
    5e7a:	d105      	bne.n	5e88 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5e7c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5e7e:	2b00      	cmp	r3, #0
    5e80:	bf0c      	ite	eq
    5e82:	2000      	moveq	r0, #0
    5e84:	2003      	movne	r0, #3
    5e86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5e88:	2b02      	cmp	r3, #2
    5e8a:	d105      	bne.n	5e98 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5e8c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    5e8e:	2b00      	cmp	r3, #0
    5e90:	bf14      	ite	ne
    5e92:	2000      	movne	r0, #0
    5e94:	2004      	moveq	r0, #4
    5e96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5e98:	2b01      	cmp	r3, #1
    5e9a:	d105      	bne.n	5ea8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5e9c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	bf0c      	ite	eq
    5ea2:	2000      	moveq	r0, #0
    5ea4:	2005      	movne	r0, #5
    5ea6:	4770      	bx	lr
	int evt = EVT_NOP;
    5ea8:	2000      	movs	r0, #0
}
    5eaa:	4770      	bx	lr

00005eac <notify_one>:
{
    5eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5eb0:	460d      	mov	r5, r1
    5eb2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5eb4:	4619      	mov	r1, r3
    5eb6:	1d28      	adds	r0, r5, #4
{
    5eb8:	4690      	mov	r8, r2
    5eba:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5ebc:	f7ff ffbe 	bl	5e3c <sys_notify_finalize>
	if (cb) {
    5ec0:	4604      	mov	r4, r0
    5ec2:	b138      	cbz	r0, 5ed4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5ec4:	4633      	mov	r3, r6
    5ec6:	4642      	mov	r2, r8
    5ec8:	4629      	mov	r1, r5
    5eca:	4638      	mov	r0, r7
    5ecc:	46a4      	mov	ip, r4
}
    5ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5ed2:	4760      	bx	ip
}
    5ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005ed8 <transition_complete>:
{
    5ed8:	b410      	push	{r4}
	__asm__ volatile(
    5eda:	f04f 0420 	mov.w	r4, #32
    5ede:	f3ef 8211 	mrs	r2, BASEPRI
    5ee2:	f384 8812 	msr	BASEPRI_MAX, r4
    5ee6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5eea:	6141      	str	r1, [r0, #20]
}
    5eec:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5eee:	2101      	movs	r1, #1
    5ef0:	f7fa bf50 	b.w	d94 <process_event>

00005ef4 <validate_args>:
{
    5ef4:	b510      	push	{r4, lr}
    5ef6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5ef8:	b140      	cbz	r0, 5f0c <validate_args+0x18>
    5efa:	b139      	cbz	r1, 5f0c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5efc:	1d08      	adds	r0, r1, #4
    5efe:	f7ff ff8c 	bl	5e1a <sys_notify_validate>
	if ((rv == 0)
    5f02:	b928      	cbnz	r0, 5f10 <validate_args+0x1c>
	    && ((cli->notify.flags
    5f04:	68a3      	ldr	r3, [r4, #8]
    5f06:	f033 0303 	bics.w	r3, r3, #3
    5f0a:	d001      	beq.n	5f10 <validate_args+0x1c>
		rv = -EINVAL;
    5f0c:	f06f 0015 	mvn.w	r0, #21
}
    5f10:	bd10      	pop	{r4, pc}

00005f12 <onoff_manager_init>:
{
    5f12:	b538      	push	{r3, r4, r5, lr}
    5f14:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5f16:	4605      	mov	r5, r0
    5f18:	b158      	cbz	r0, 5f32 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5f1a:	b151      	cbz	r1, 5f32 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5f1c:	680b      	ldr	r3, [r1, #0]
    5f1e:	b143      	cbz	r3, 5f32 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5f20:	684b      	ldr	r3, [r1, #4]
    5f22:	b133      	cbz	r3, 5f32 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5f24:	221c      	movs	r2, #28
    5f26:	2100      	movs	r1, #0
    5f28:	f000 fa59 	bl	63de <memset>
    5f2c:	612c      	str	r4, [r5, #16]
	return 0;
    5f2e:	2000      	movs	r0, #0
}
    5f30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5f32:	f06f 0015 	mvn.w	r0, #21
    5f36:	e7fb      	b.n	5f30 <onoff_manager_init+0x1e>

00005f38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5f38:	b570      	push	{r4, r5, r6, lr}
    5f3a:	4604      	mov	r4, r0
    5f3c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5f3e:	f7ff ffd9 	bl	5ef4 <validate_args>

	if (rv < 0) {
    5f42:	1e05      	subs	r5, r0, #0
    5f44:	db31      	blt.n	5faa <onoff_request+0x72>
    5f46:	f04f 0320 	mov.w	r3, #32
    5f4a:	f3ef 8111 	mrs	r1, BASEPRI
    5f4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5f56:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5f58:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5f5a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5f5e:	42ab      	cmp	r3, r5
    5f60:	f000 0207 	and.w	r2, r0, #7
    5f64:	d02e      	beq.n	5fc4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5f66:	2a02      	cmp	r2, #2
    5f68:	d10e      	bne.n	5f88 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5f6a:	3301      	adds	r3, #1
    5f6c:	8363      	strh	r3, [r4, #26]
	rv = state;
    5f6e:	4615      	mov	r5, r2
		notify = true;
    5f70:	2301      	movs	r3, #1
	__asm__ volatile(
    5f72:	f381 8811 	msr	BASEPRI, r1
    5f76:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5f7a:	b1b3      	cbz	r3, 5faa <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5f7c:	2300      	movs	r3, #0
    5f7e:	4631      	mov	r1, r6
    5f80:	4620      	mov	r0, r4
    5f82:	f7ff ff93 	bl	5eac <notify_one>
    5f86:	e010      	b.n	5faa <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5f88:	0783      	lsls	r3, r0, #30
    5f8a:	d001      	beq.n	5f90 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5f8c:	2a06      	cmp	r2, #6
    5f8e:	d10e      	bne.n	5fae <onoff_request+0x76>
	parent->next = child;
    5f90:	2300      	movs	r3, #0
    5f92:	6033      	str	r3, [r6, #0]
	return list->tail;
    5f94:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5f96:	b993      	cbnz	r3, 5fbe <onoff_request+0x86>
	list->head = node;
    5f98:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5f9c:	4615      	mov	r5, r2
    5f9e:	b962      	cbnz	r2, 5fba <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5fa0:	460a      	mov	r2, r1
    5fa2:	4620      	mov	r0, r4
    5fa4:	2102      	movs	r1, #2
    5fa6:	f7fa fef5 	bl	d94 <process_event>
		}
	}

	return rv;
}
    5faa:	4628      	mov	r0, r5
    5fac:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5fae:	2a05      	cmp	r2, #5
    5fb0:	bf0c      	ite	eq
    5fb2:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    5fb6:	f06f 0504 	mvnne.w	r5, #4
    5fba:	2300      	movs	r3, #0
    5fbc:	e7d9      	b.n	5f72 <onoff_request+0x3a>
	parent->next = child;
    5fbe:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5fc0:	6066      	str	r6, [r4, #4]
}
    5fc2:	e7eb      	b.n	5f9c <onoff_request+0x64>
		rv = -EAGAIN;
    5fc4:	f06f 050a 	mvn.w	r5, #10
    5fc8:	e7f7      	b.n	5fba <onoff_request+0x82>

00005fca <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    5fca:	b510      	push	{r4, lr}
	__asm__ volatile(
    5fcc:	f04f 0320 	mov.w	r3, #32
    5fd0:	f3ef 8211 	mrs	r2, BASEPRI
    5fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    5fd8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5fdc:	8b04      	ldrh	r4, [r0, #24]
    5fde:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    5fe2:	2c02      	cmp	r4, #2
    5fe4:	d00a      	beq.n	5ffc <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    5fe6:	2c01      	cmp	r4, #1
    5fe8:	bf0c      	ite	eq
    5fea:	f06f 0004 	mvneq.w	r0, #4
    5fee:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    5ff2:	f382 8811 	msr	BASEPRI, r2
    5ff6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    5ffa:	e008      	b.n	600e <onoff_release+0x44>
	mgr->refs -= 1U;
    5ffc:	8b43      	ldrh	r3, [r0, #26]
    5ffe:	3b01      	subs	r3, #1
    6000:	b29b      	uxth	r3, r3
    6002:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6004:	b923      	cbnz	r3, 6010 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6006:	4621      	mov	r1, r4
    6008:	f7fa fec4 	bl	d94 <process_event>
	int rv = state;
    600c:	4620      	mov	r0, r4
}
    600e:	bd10      	pop	{r4, pc}
	int rv = state;
    6010:	4620      	mov	r0, r4
    6012:	e7ee      	b.n	5ff2 <onoff_release+0x28>

00006014 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6014:	4604      	mov	r4, r0
    6016:	b508      	push	{r3, lr}
    6018:	4608      	mov	r0, r1
    601a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    601c:	461a      	mov	r2, r3
    601e:	47a0      	blx	r4
	return z_impl_z_current_get();
    6020:	f7ff fbe6 	bl	57f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6024:	f7fb fedc 	bl	1de0 <z_impl_k_thread_abort>

00006028 <encode_uint>:
{
    6028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    602c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    602e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6030:	2b6f      	cmp	r3, #111	; 0x6f
{
    6032:	4680      	mov	r8, r0
    6034:	460f      	mov	r7, r1
    6036:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6038:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    603c:	d029      	beq.n	6092 <encode_uint+0x6a>
    603e:	d824      	bhi.n	608a <encode_uint+0x62>
		return 16;
    6040:	2b58      	cmp	r3, #88	; 0x58
    6042:	bf14      	ite	ne
    6044:	260a      	movne	r6, #10
    6046:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6048:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    604c:	4632      	mov	r2, r6
    604e:	2300      	movs	r3, #0
    6050:	4640      	mov	r0, r8
    6052:	4639      	mov	r1, r7
    6054:	f7fa f8a4 	bl	1a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6058:	2a09      	cmp	r2, #9
    605a:	b2d4      	uxtb	r4, r2
    605c:	d81e      	bhi.n	609c <encode_uint+0x74>
    605e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6060:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6062:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6064:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6068:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    606c:	d301      	bcc.n	6072 <encode_uint+0x4a>
    606e:	45d1      	cmp	r9, sl
    6070:	d811      	bhi.n	6096 <encode_uint+0x6e>
	if (conv->flag_hash) {
    6072:	782b      	ldrb	r3, [r5, #0]
    6074:	069b      	lsls	r3, r3, #26
    6076:	d505      	bpl.n	6084 <encode_uint+0x5c>
		if (radix == 8) {
    6078:	2e08      	cmp	r6, #8
    607a:	d115      	bne.n	60a8 <encode_uint+0x80>
			conv->altform_0 = true;
    607c:	78ab      	ldrb	r3, [r5, #2]
    607e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6082:	70ab      	strb	r3, [r5, #2]
}
    6084:	4648      	mov	r0, r9
    6086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    608a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    608e:	2b70      	cmp	r3, #112	; 0x70
    6090:	e7d7      	b.n	6042 <encode_uint+0x1a>
	switch (specifier) {
    6092:	2608      	movs	r6, #8
    6094:	e7d8      	b.n	6048 <encode_uint+0x20>
		value /= radix;
    6096:	4680      	mov	r8, r0
    6098:	460f      	mov	r7, r1
    609a:	e7d7      	b.n	604c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    609c:	f1bb 0f19 	cmp.w	fp, #25
    60a0:	bf94      	ite	ls
    60a2:	3437      	addls	r4, #55	; 0x37
    60a4:	3457      	addhi	r4, #87	; 0x57
    60a6:	e7db      	b.n	6060 <encode_uint+0x38>
		} else if (radix == 16) {
    60a8:	2e10      	cmp	r6, #16
    60aa:	d1eb      	bne.n	6084 <encode_uint+0x5c>
			conv->altform_0c = true;
    60ac:	78ab      	ldrb	r3, [r5, #2]
    60ae:	f043 0310 	orr.w	r3, r3, #16
    60b2:	e7e6      	b.n	6082 <encode_uint+0x5a>

000060b4 <outs>:
{
    60b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60b8:	4607      	mov	r7, r0
    60ba:	4688      	mov	r8, r1
    60bc:	4615      	mov	r5, r2
    60be:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    60c0:	4614      	mov	r4, r2
    60c2:	42b4      	cmp	r4, r6
    60c4:	eba4 0005 	sub.w	r0, r4, r5
    60c8:	d302      	bcc.n	60d0 <outs+0x1c>
    60ca:	b93e      	cbnz	r6, 60dc <outs+0x28>
    60cc:	7823      	ldrb	r3, [r4, #0]
    60ce:	b12b      	cbz	r3, 60dc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    60d0:	f814 0b01 	ldrb.w	r0, [r4], #1
    60d4:	4641      	mov	r1, r8
    60d6:	47b8      	blx	r7
		if (rc < 0) {
    60d8:	2800      	cmp	r0, #0
    60da:	daf2      	bge.n	60c2 <outs+0xe>
}
    60dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000060e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    60e0:	4770      	bx	lr

000060e2 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    60e2:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    60e4:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    60e8:	46a4      	mov	ip, r4

  return ret;
}
    60ea:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    60ec:	4760      	bx	ip

000060ee <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
    60ee:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
    60f0:	6804      	ldr	r4, [r0, #0]
    60f2:	6880      	ldr	r0, [r0, #8]
    60f4:	46a4      	mov	ip, r4

  return ret;
}
    60f6:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    60f8:	4760      	bx	ip

000060fa <lis2mdl_mag_user_offset_set>:
  * @param  buff  buffer that contains data to write
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_user_offset_set(stmdev_ctx_t *ctx, int16_t *val)
{
    60fa:	b507      	push	{r0, r1, r2, lr}
  uint8_t buff[6];
  int32_t ret;

  buff[1] = (uint8_t)((uint16_t)val[0] / 256U);
    60fc:	880b      	ldrh	r3, [r1, #0]
    60fe:	f9b1 2000 	ldrsh.w	r2, [r1]
  buff[0] = (uint8_t)((uint16_t)val[0] - (buff[1] * 256U));
    6102:	f88d 2000 	strb.w	r2, [sp]
  buff[1] = (uint8_t)((uint16_t)val[0] / 256U);
    6106:	0a1b      	lsrs	r3, r3, #8
    6108:	f88d 3001 	strb.w	r3, [sp, #1]
  buff[3] = (uint8_t)((uint16_t)val[1] / 256U);
    610c:	884b      	ldrh	r3, [r1, #2]
    610e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  buff[2] = (uint8_t)((uint16_t)val[1] - (buff[3] * 256U));
    6112:	f88d 2002 	strb.w	r2, [sp, #2]
  buff[3] = (uint8_t)((uint16_t)val[1] / 256U);
    6116:	0a1b      	lsrs	r3, r3, #8
    6118:	f88d 3003 	strb.w	r3, [sp, #3]
  buff[5] = (uint8_t)((uint16_t)val[2] / 256U);
    611c:	888b      	ldrh	r3, [r1, #4]
    611e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
  buff[4] = (uint8_t)((uint16_t)val[2] - (buff[5] * 256U));
    6122:	f88d 2004 	strb.w	r2, [sp, #4]
  buff[5] = (uint8_t)((uint16_t)val[2] / 256U);
    6126:	0a1b      	lsrs	r3, r3, #8
    6128:	f88d 3005 	strb.w	r3, [sp, #5]
  ret = lis2mdl_write_reg(ctx, LIS2MDL_OFFSET_X_REG_L, buff, 6);
    612c:	466a      	mov	r2, sp
    612e:	2306      	movs	r3, #6
    6130:	2145      	movs	r1, #69	; 0x45
    6132:	f7ff ffdc 	bl	60ee <lis2mdl_write_reg>

  return ret;
}
    6136:	b003      	add	sp, #12
    6138:	f85d fb04 	ldr.w	pc, [sp], #4

0000613c <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
    613c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    613e:	2301      	movs	r3, #1
{
    6140:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6142:	aa01      	add	r2, sp, #4
    6144:	2160      	movs	r1, #96	; 0x60
{
    6146:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6148:	f7ff ffcb 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    614c:	b958      	cbnz	r0, 6166 <lis2mdl_operating_mode_set+0x2a>
  {
    reg.md = (uint8_t)val;
    614e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6152:	f365 0301 	bfi	r3, r5, #0, #2
    6156:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    615a:	aa01      	add	r2, sp, #4
    615c:	2301      	movs	r3, #1
    615e:	2160      	movs	r1, #96	; 0x60
    6160:	4620      	mov	r0, r4
    6162:	f7ff ffc4 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    6166:	b003      	add	sp, #12
    6168:	bd30      	pop	{r4, r5, pc}

0000616a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
    616a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    616c:	2301      	movs	r3, #1
{
    616e:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6170:	aa01      	add	r2, sp, #4
    6172:	2160      	movs	r1, #96	; 0x60
{
    6174:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6176:	f7ff ffb4 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    617a:	b958      	cbnz	r0, 6194 <lis2mdl_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
    617c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6180:	f365 0383 	bfi	r3, r5, #2, #2
    6184:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6188:	aa01      	add	r2, sp, #4
    618a:	2301      	movs	r3, #1
    618c:	2160      	movs	r1, #96	; 0x60
    618e:	4620      	mov	r0, r4
    6190:	f7ff ffad 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    6194:	b003      	add	sp, #12
    6196:	bd30      	pop	{r4, r5, pc}

00006198 <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    619a:	2301      	movs	r3, #1
{
    619c:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    619e:	aa01      	add	r2, sp, #4
    61a0:	2160      	movs	r1, #96	; 0x60
{
    61a2:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    61a4:	f7ff ff9d 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    61a8:	b958      	cbnz	r0, 61c2 <lis2mdl_offset_temp_comp_set+0x2a>
  {
    reg.comp_temp_en = val;
    61aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    61ae:	f365 13c7 	bfi	r3, r5, #7, #1
    61b2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    61b6:	aa01      	add	r2, sp, #4
    61b8:	2301      	movs	r3, #1
    61ba:	2160      	movs	r1, #96	; 0x60
    61bc:	4620      	mov	r0, r4
    61be:	f7ff ff96 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    61c2:	b003      	add	sp, #12
    61c4:	bd30      	pop	{r4, r5, pc}

000061c6 <lis2mdl_set_rst_mode_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(stmdev_ctx_t *ctx,
                                 lis2mdl_set_rst_t val)
{
    61c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61c8:	2301      	movs	r3, #1
{
    61ca:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61cc:	aa01      	add	r2, sp, #4
    61ce:	2161      	movs	r1, #97	; 0x61
{
    61d0:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61d2:	f7ff ff86 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    61d6:	b958      	cbnz	r0, 61f0 <lis2mdl_set_rst_mode_set+0x2a>
  {
    reg.set_rst = (uint8_t)val;
    61d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    61dc:	f365 0342 	bfi	r3, r5, #1, #2
    61e0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61e4:	aa01      	add	r2, sp, #4
    61e6:	2301      	movs	r3, #1
    61e8:	2161      	movs	r1, #97	; 0x61
    61ea:	4620      	mov	r0, r4
    61ec:	f7ff ff7f 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    61f0:	b003      	add	sp, #12
    61f2:	bd30      	pop	{r4, r5, pc}

000061f4 <lis2mdl_set_rst_sensor_single_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_sensor_single_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
    61f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61f6:	2301      	movs	r3, #1
{
    61f8:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    61fa:	aa01      	add	r2, sp, #4
    61fc:	2161      	movs	r1, #97	; 0x61
{
    61fe:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    6200:	f7ff ff6f 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    6204:	b958      	cbnz	r0, 621e <lis2mdl_set_rst_sensor_single_set+0x2a>
  {
    reg.off_canc_one_shot = val;
    6206:	f89d 3004 	ldrb.w	r3, [sp, #4]
    620a:	f365 1304 	bfi	r3, r5, #4, #1
    620e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
    6212:	aa01      	add	r2, sp, #4
    6214:	2301      	movs	r3, #1
    6216:	2161      	movs	r1, #97	; 0x61
    6218:	4620      	mov	r0, r4
    621a:	f7ff ff68 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    621e:	b003      	add	sp, #12
    6220:	bd30      	pop	{r4, r5, pc}

00006222 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6222:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6224:	2301      	movs	r3, #1
{
    6226:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6228:	aa01      	add	r2, sp, #4
    622a:	2162      	movs	r1, #98	; 0x62
{
    622c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    622e:	f7ff ff58 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    6232:	b958      	cbnz	r0, 624c <lis2mdl_block_data_update_set+0x2a>
  {
    reg.bdu = val;
    6234:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6238:	f365 1304 	bfi	r3, r5, #4, #1
    623c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6240:	aa01      	add	r2, sp, #4
    6242:	2301      	movs	r3, #1
    6244:	2162      	movs	r1, #98	; 0x62
    6246:	4620      	mov	r0, r4
    6248:	f7ff ff51 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    624c:	b003      	add	sp, #12
    624e:	bd30      	pop	{r4, r5, pc}

00006250 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    6250:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
    6252:	2306      	movs	r3, #6
{
    6254:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
    6256:	466a      	mov	r2, sp
    6258:	2168      	movs	r1, #104	; 0x68
    625a:	f7ff ff42 	bl	60e2 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    625e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6262:	f89d 3000 	ldrb.w	r3, [sp]
    6266:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    626a:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    626c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6270:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6274:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    6278:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    627a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    627e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6282:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    6286:	80a3      	strh	r3, [r4, #4]

  return ret;
}
    6288:	b002      	add	sp, #8
    628a:	bd10      	pop	{r4, pc}

0000628c <lis2mdl_temperature_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_temperature_raw_get(stmdev_ctx_t *ctx,  int16_t *val)
{
    628c:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
    628e:	2302      	movs	r3, #2
{
    6290:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
    6292:	aa01      	add	r2, sp, #4
    6294:	216e      	movs	r1, #110	; 0x6e
    6296:	f7ff ff24 	bl	60e2 <lis2mdl_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
    629a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    629e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    62a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    62a6:	8023      	strh	r3, [r4, #0]

  return ret;
}
    62a8:	b002      	add	sp, #8
    62aa:	bd10      	pop	{r4, pc}

000062ac <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    62ac:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
    62ae:	2301      	movs	r3, #1
    62b0:	214f      	movs	r1, #79	; 0x4f
    62b2:	f7ff bf16 	b.w	60e2 <lis2mdl_read_reg>

000062b6 <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    62b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62b8:	2301      	movs	r3, #1
{
    62ba:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62bc:	aa01      	add	r2, sp, #4
    62be:	2160      	movs	r1, #96	; 0x60
{
    62c0:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62c2:	f7ff ff0e 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    62c6:	b958      	cbnz	r0, 62e0 <lis2mdl_reset_set+0x2a>
  {
    reg.soft_rst = val;
    62c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    62cc:	f365 1345 	bfi	r3, r5, #5, #1
    62d0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62d4:	aa01      	add	r2, sp, #4
    62d6:	2301      	movs	r3, #1
    62d8:	2160      	movs	r1, #96	; 0x60
    62da:	4620      	mov	r0, r4
    62dc:	f7ff ff07 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    62e0:	b003      	add	sp, #12
    62e2:	bd30      	pop	{r4, r5, pc}

000062e4 <lis2mdl_boot_set>:
  * @param  val   change the values of reboot in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
    62e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62e6:	2301      	movs	r3, #1
{
    62e8:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62ea:	aa01      	add	r2, sp, #4
    62ec:	2160      	movs	r1, #96	; 0x60
{
    62ee:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    62f0:	f7ff fef7 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    62f4:	b958      	cbnz	r0, 630e <lis2mdl_boot_set+0x2a>
  {
    reg.reboot = val;
    62f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    62fa:	f365 1386 	bfi	r3, r5, #6, #1
    62fe:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
    6302:	aa01      	add	r2, sp, #4
    6304:	2301      	movs	r3, #1
    6306:	2160      	movs	r1, #96	; 0x60
    6308:	4620      	mov	r0, r4
    630a:	f7ff fef0 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    630e:	b003      	add	sp, #12
    6310:	bd30      	pop	{r4, r5, pc}

00006312 <lis2mdl_drdy_on_pin_set>:
  * @param  val   change the values of drdy_on_pin in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6312:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6314:	2301      	movs	r3, #1
{
    6316:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6318:	aa01      	add	r2, sp, #4
    631a:	2162      	movs	r1, #98	; 0x62
{
    631c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    631e:	f7ff fee0 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    6322:	b958      	cbnz	r0, 633c <lis2mdl_drdy_on_pin_set+0x2a>
  {
    reg.drdy_on_pin = val;
    6324:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6328:	f365 0300 	bfi	r3, r5, #0, #1
    632c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6330:	aa01      	add	r2, sp, #4
    6332:	2301      	movs	r3, #1
    6334:	2162      	movs	r1, #98	; 0x62
    6336:	4620      	mov	r0, r4
    6338:	f7ff fed9 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    633c:	b003      	add	sp, #12
    633e:	bd30      	pop	{r4, r5, pc}

00006340 <lis2mdl_spi_mode_set>:
  * @param  val      change the values of 4wspi in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_spi_mode_set(stmdev_ctx_t *ctx, lis2mdl_sim_t val)
{
    6340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6342:	2301      	movs	r3, #1
{
    6344:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    6346:	aa01      	add	r2, sp, #4
    6348:	2162      	movs	r1, #98	; 0x62
{
    634a:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    634c:	f7ff fec9 	bl	60e2 <lis2mdl_read_reg>

  if (ret == 0)
    6350:	b958      	cbnz	r0, 636a <lis2mdl_spi_mode_set+0x2a>
  {
    reg._4wspi = (uint8_t)val;
    6352:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6356:	f365 0382 	bfi	r3, r5, #2, #1
    635a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
    635e:	aa01      	add	r2, sp, #4
    6360:	2301      	movs	r3, #1
    6362:	2162      	movs	r1, #98	; 0x62
    6364:	4620      	mov	r0, r4
    6366:	f7ff fec2 	bl	60ee <lis2mdl_write_reg>
  }

  return ret;
}
    636a:	b003      	add	sp, #12
    636c:	bd30      	pop	{r4, r5, pc}

0000636e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    636e:	f000 bf57 	b.w	7220 <z_fatal_error>

00006372 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6372:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6374:	6800      	ldr	r0, [r0, #0]
    6376:	f000 bf53 	b.w	7220 <z_fatal_error>

0000637a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    637a:	2100      	movs	r1, #0
    637c:	2001      	movs	r0, #1
    637e:	f7ff bff6 	b.w	636e <z_arm_fatal_error>

00006382 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6382:	b508      	push	{r3, lr}
	handler();
    6384:	f7fb fb4a 	bl	1a1c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    638c:	f7fb bc0a 	b.w	1ba4 <z_arm_exc_exit>

00006390 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6390:	4603      	mov	r3, r0
	size_t n = 0;
    6392:	2000      	movs	r0, #0

	while (*s != '\0') {
    6394:	5c1a      	ldrb	r2, [r3, r0]
    6396:	b902      	cbnz	r2, 639a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6398:	4770      	bx	lr
		n++;
    639a:	3001      	adds	r0, #1
    639c:	e7fa      	b.n	6394 <strlen+0x4>

0000639e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    639e:	4603      	mov	r3, r0
	size_t n = 0;
    63a0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    63a2:	5c1a      	ldrb	r2, [r3, r0]
    63a4:	b10a      	cbz	r2, 63aa <strnlen+0xc>
    63a6:	4288      	cmp	r0, r1
    63a8:	d100      	bne.n	63ac <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    63aa:	4770      	bx	lr
		n++;
    63ac:	3001      	adds	r0, #1
    63ae:	e7f8      	b.n	63a2 <strnlen+0x4>

000063b0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    63b0:	1e43      	subs	r3, r0, #1
    63b2:	3901      	subs	r1, #1
    63b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    63b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    63bc:	4282      	cmp	r2, r0
    63be:	d101      	bne.n	63c4 <strcmp+0x14>
    63c0:	2a00      	cmp	r2, #0
    63c2:	d1f7      	bne.n	63b4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    63c4:	1a10      	subs	r0, r2, r0
    63c6:	4770      	bx	lr

000063c8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    63c8:	b510      	push	{r4, lr}
    63ca:	1e43      	subs	r3, r0, #1
    63cc:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    63ce:	4291      	cmp	r1, r2
    63d0:	d100      	bne.n	63d4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    63d2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    63d4:	f811 4b01 	ldrb.w	r4, [r1], #1
    63d8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    63dc:	e7f7      	b.n	63ce <memcpy+0x6>

000063de <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    63de:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    63e0:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    63e2:	4603      	mov	r3, r0
	while (n > 0) {
    63e4:	4293      	cmp	r3, r2
    63e6:	d100      	bne.n	63ea <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    63e8:	4770      	bx	lr
		*(d_byte++) = c_byte;
    63ea:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    63ee:	e7f9      	b.n	63e4 <memset+0x6>

000063f0 <_stdout_hook_default>:
}
    63f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63f4:	4770      	bx	lr

000063f6 <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    63f6:	f7fb bd0f 	b.w	1e18 <z_impl_zephyr_fputc>

000063fa <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    63fa:	684b      	ldr	r3, [r1, #4]
    63fc:	2b01      	cmp	r3, #1
    63fe:	dd07      	ble.n	6410 <sprintf_out+0x16>
		*(p->ptr) = c;
    6400:	680b      	ldr	r3, [r1, #0]
    6402:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    6404:	680b      	ldr	r3, [r1, #0]
    6406:	3301      	adds	r3, #1
    6408:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    640a:	684b      	ldr	r3, [r1, #4]
    640c:	3b01      	subs	r3, #1
    640e:	604b      	str	r3, [r1, #4]
}
    6410:	2000      	movs	r0, #0
    6412:	4770      	bx	lr

00006414 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6414:	2806      	cmp	r0, #6
    6416:	d108      	bne.n	642a <pm_state_set+0x16>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    641c:	2201      	movs	r2, #1
    641e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6422:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    6426:	bf20      	wfe
    while (true)
    6428:	e7fd      	b.n	6426 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    642a:	4770      	bx	lr

0000642c <pm_state_exit_post_ops>:
    642c:	2300      	movs	r3, #0
    642e:	f383 8811 	msr	BASEPRI, r3
    6432:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6436:	4770      	bx	lr

00006438 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6438:	6903      	ldr	r3, [r0, #16]
    643a:	b2c9      	uxtb	r1, r1
    643c:	220c      	movs	r2, #12
    643e:	fb01 3302 	mla	r3, r1, r2, r3
    6442:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6444:	f000 0007 	and.w	r0, r0, #7
    6448:	4770      	bx	lr

0000644a <set_on_state>:
	__asm__ volatile(
    644a:	f04f 0320 	mov.w	r3, #32
    644e:	f3ef 8211 	mrs	r2, BASEPRI
    6452:	f383 8812 	msr	BASEPRI_MAX, r3
    6456:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    645a:	6803      	ldr	r3, [r0, #0]
    645c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6460:	f043 0302 	orr.w	r3, r3, #2
    6464:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6466:	f382 8811 	msr	BASEPRI, r2
    646a:	f3bf 8f6f 	isb	sy
}
    646e:	4770      	bx	lr

00006470 <stop>:
{
    6470:	4603      	mov	r3, r0
    6472:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6474:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6476:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6478:	f04f 0420 	mov.w	r4, #32
    647c:	f3ef 8611 	mrs	r6, BASEPRI
    6480:	f384 8812 	msr	BASEPRI_MAX, r4
    6484:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6488:	250c      	movs	r5, #12
    648a:	fb05 0401 	mla	r4, r5, r1, r0
    648e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6490:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6494:	d001      	beq.n	649a <stop+0x2a>
    6496:	42a2      	cmp	r2, r4
    6498:	d110      	bne.n	64bc <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    649a:	fb05 0001 	mla	r0, r5, r1, r0
    649e:	2201      	movs	r2, #1
    64a0:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    64a2:	2000      	movs	r0, #0
	__asm__ volatile(
    64a4:	f386 8811 	msr	BASEPRI, r6
    64a8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    64ac:	b928      	cbnz	r0, 64ba <stop+0x4a>
	get_sub_config(dev, type)->stop();
    64ae:	685b      	ldr	r3, [r3, #4]
    64b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    64b4:	684b      	ldr	r3, [r1, #4]
    64b6:	4798      	blx	r3
	return 0;
    64b8:	2000      	movs	r0, #0
}
    64ba:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    64bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    64c0:	e7f0      	b.n	64a4 <stop+0x34>

000064c2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    64c2:	2280      	movs	r2, #128	; 0x80
    64c4:	f7ff bfd4 	b.w	6470 <stop>

000064c8 <async_start>:
{
    64c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ca:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    64cc:	6904      	ldr	r4, [r0, #16]
{
    64ce:	4605      	mov	r5, r0
    64d0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    64d2:	f04f 0020 	mov.w	r0, #32
    64d6:	f3ef 8c11 	mrs	ip, BASEPRI
    64da:	f380 8812 	msr	BASEPRI_MAX, r0
    64de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    64e2:	260c      	movs	r6, #12
    64e4:	fb06 4601 	mla	r6, r6, r1, r4
    64e8:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    64ea:	f000 0e07 	and.w	lr, r0, #7
    64ee:	f1be 0f01 	cmp.w	lr, #1
    64f2:	d111      	bne.n	6518 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    64f4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    64f6:	2600      	movs	r6, #0
	__asm__ volatile(
    64f8:	f38c 8811 	msr	BASEPRI, ip
    64fc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6500:	b946      	cbnz	r6, 6514 <async_start+0x4c>
	subdata->cb = cb;
    6502:	200c      	movs	r0, #12
    6504:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    6508:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    650c:	686b      	ldr	r3, [r5, #4]
    650e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    6512:	4798      	blx	r3
}
    6514:	4630      	mov	r0, r6
    6516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6518:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    651c:	4287      	cmp	r7, r0
    651e:	bf14      	ite	ne
    6520:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    6524:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6528:	e7e6      	b.n	64f8 <async_start+0x30>

0000652a <api_start>:
{
    652a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    652c:	2480      	movs	r4, #128	; 0x80
    652e:	9400      	str	r4, [sp, #0]
    6530:	f7ff ffca 	bl	64c8 <async_start>
}
    6534:	b002      	add	sp, #8
    6536:	bd10      	pop	{r4, pc}

00006538 <onoff_started_callback>:
	return &data->mgr[type];
    6538:	6900      	ldr	r0, [r0, #16]
{
    653a:	b410      	push	{r4}
	return &data->mgr[type];
    653c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    653e:	241c      	movs	r4, #28
    6540:	fb03 0004 	mla	r0, r3, r4, r0
    6544:	2100      	movs	r1, #0
}
    6546:	bc10      	pop	{r4}
	notify(mgr, 0);
    6548:	4710      	bx	r2

0000654a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    654a:	2000      	movs	r0, #0
    654c:	f000 bd4a 	b.w	6fe4 <nrfx_clock_start>

00006550 <blocking_start_callback>:
{
    6550:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6552:	f7fe bcf5 	b.w	4f40 <z_impl_k_sem_give>

00006556 <lfclk_stop>:
{
    6556:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    6558:	f7fb feda 	bl	2310 <z_nrf_clock_calibration_lfclk_stopped>
}
    655c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6560:	2000      	movs	r0, #0
    6562:	f000 bd77 	b.w	7054 <nrfx_clock_stop>

00006566 <timeout_handler>:
	start_cal_process();
    6566:	f7fb be11 	b.w	218c <start_cal_process>

0000656a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    656a:	6843      	ldr	r3, [r0, #4]
    656c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    656e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6572:	600b      	str	r3, [r1, #0]
}
    6574:	2000      	movs	r0, #0
    6576:	4770      	bx	lr

00006578 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6578:	6843      	ldr	r3, [r0, #4]
    657a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    657c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    6580:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6584:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6588:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    658c:	2000      	movs	r0, #0
    658e:	4770      	bx	lr

00006590 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6590:	6843      	ldr	r3, [r0, #4]
    6592:	685b      	ldr	r3, [r3, #4]
}
    6594:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6596:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    659a:	4770      	bx	lr

0000659c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    659c:	6843      	ldr	r3, [r0, #4]
    659e:	685b      	ldr	r3, [r3, #4]
}
    65a0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    65a2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    65a6:	4770      	bx	lr

000065a8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65a8:	6843      	ldr	r3, [r0, #4]
    65aa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    65ac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    65b0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    65b4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    65b6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    65ba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    65be:	2000      	movs	r0, #0
    65c0:	4770      	bx	lr

000065c2 <gpio_nrfx_manage_callback>:
	return port->data;
    65c2:	6903      	ldr	r3, [r0, #16]
	return list->head;
    65c4:	6858      	ldr	r0, [r3, #4]
{
    65c6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    65c8:	b158      	cbz	r0, 65e2 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65ca:	2400      	movs	r4, #0
    65cc:	4281      	cmp	r1, r0
    65ce:	d112      	bne.n	65f6 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    65d0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    65d2:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    65d4:	b954      	cbnz	r4, 65ec <gpio_nrfx_manage_callback+0x2a>
    65d6:	428d      	cmp	r5, r1
	list->head = node;
    65d8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    65da:	d100      	bne.n	65de <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    65dc:	6098      	str	r0, [r3, #8]
	parent->next = child;
    65de:	2000      	movs	r0, #0
    65e0:	6008      	str	r0, [r1, #0]
	if (set) {
    65e2:	b96a      	cbnz	r2, 6600 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    65e4:	2000      	movs	r0, #0
}
    65e6:	bd30      	pop	{r4, r5, pc}
    65e8:	4628      	mov	r0, r5
    65ea:	e7ef      	b.n	65cc <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    65ec:	428d      	cmp	r5, r1
	parent->next = child;
    65ee:	6020      	str	r0, [r4, #0]
	list->tail = node;
    65f0:	bf08      	it	eq
    65f2:	609c      	streq	r4, [r3, #8]
}
    65f4:	e7f3      	b.n	65de <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    65f6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65f8:	4604      	mov	r4, r0
    65fa:	2d00      	cmp	r5, #0
    65fc:	d1f4      	bne.n	65e8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    65fe:	b13a      	cbz	r2, 6610 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6600:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6602:	685a      	ldr	r2, [r3, #4]
    6604:	600a      	str	r2, [r1, #0]
	list->head = node;
    6606:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6608:	2800      	cmp	r0, #0
    660a:	d1eb      	bne.n	65e4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    660c:	6099      	str	r1, [r3, #8]
}
    660e:	e7ea      	b.n	65e6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6610:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6614:	e7e7      	b.n	65e6 <gpio_nrfx_manage_callback+0x24>

00006616 <i2c_nrfx_twim_configure>:
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6616:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    6618:	f011 0001 	ands.w	r0, r1, #1
    661c:	d105      	bne.n	662a <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(i2c_config)) {
    661e:	f3c1 0142 	ubfx	r1, r1, #1, #3
    6622:	2901      	cmp	r1, #1
    6624:	d004      	beq.n	6630 <i2c_nrfx_twim_configure+0x1a>
    6626:	2902      	cmp	r1, #2
    6628:	d008      	beq.n	663c <i2c_nrfx_twim_configure+0x26>
		return -EINVAL;
    662a:	f06f 0015 	mvn.w	r0, #21
}
    662e:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6630:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    6632:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6636:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
    663a:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    663c:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    663e:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    6642:	e7f8      	b.n	6636 <i2c_nrfx_twim_configure+0x20>

00006644 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    6644:	2200      	movs	r2, #0
    6646:	2101      	movs	r1, #1
    6648:	2003      	movs	r0, #3
    664a:	f7fb b9cf 	b.w	19ec <z_arm_irq_priority_set>

0000664e <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    664e:	2200      	movs	r2, #0
    6650:	2101      	movs	r1, #1
    6652:	2004      	movs	r0, #4
    6654:	f7fb b9ca 	b.w	19ec <z_arm_irq_priority_set>

00006658 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    6658:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    665a:	2100      	movs	r1, #0
    665c:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    665e:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    6660:	f000 fbbe 	bl	6de0 <pinctrl_lookup_state>
	if (ret < 0) {
    6664:	2800      	cmp	r0, #0
    6666:	db05      	blt.n	6674 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
    6668:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    666a:	6822      	ldr	r2, [r4, #0]
    666c:	7919      	ldrb	r1, [r3, #4]
    666e:	6818      	ldr	r0, [r3, #0]
    6670:	f000 fbed 	bl	6e4e <pinctrl_configure_pins>
}
    6674:	b002      	add	sp, #8
    6676:	bd10      	pop	{r4, pc}

00006678 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
    6678:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
    667a:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
    667c:	6863      	ldr	r3, [r4, #4]
    667e:	f104 0208 	add.w	r2, r4, #8
    6682:	681d      	ldr	r5, [r3, #0]
    6684:	2127      	movs	r1, #39	; 0x27
    6686:	2307      	movs	r3, #7
    6688:	47a8      	blx	r5
	if (status < 0) {
    668a:	2800      	cmp	r0, #0
    668c:	db04      	blt.n	6698 <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
    668e:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
    6690:	f013 0f0f 	tst.w	r3, #15
    6694:	bf18      	it	ne
    6696:	2000      	movne	r0, #0
}
    6698:	bd38      	pop	{r3, r4, r5, pc}

0000669a <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
    669a:	2939      	cmp	r1, #57	; 0x39
    669c:	d101      	bne.n	66a2 <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
    669e:	f7ff bfeb 	b.w	6678 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
    66a2:	2903      	cmp	r1, #3
    66a4:	d0fb      	beq.n	669e <lis2dh_sample_fetch+0x4>
		status = lis2dh_sample_fetch_temp(dev);
    66a6:	290c      	cmp	r1, #12
}
    66a8:	bf14      	ite	ne
    66aa:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
    66ae:	f06f 0085 	mvneq.w	r0, #133	; 0x85
    66b2:	4770      	bx	lr

000066b4 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    66b4:	b410      	push	{r4}
    66b6:	6884      	ldr	r4, [r0, #8]
    66b8:	68a4      	ldr	r4, [r4, #8]
    66ba:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    66bc:	bc10      	pop	{r4}
    66be:	4760      	bx	ip

000066c0 <lis2dh_i2c_write_data>:
{
    66c0:	b530      	push	{r4, r5, lr}
    66c2:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    66c4:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
    66c8:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    66ca:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    66ce:	f10d 0107 	add.w	r1, sp, #7
    66d2:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    66d4:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
    66d6:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
    66d8:	9103      	str	r1, [sp, #12]
{
    66da:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
    66dc:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
    66de:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
    66e0:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    66e4:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
    66e8:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    66ea:	2202      	movs	r2, #2
    66ec:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
    66f0:	f7ff ffe0 	bl	66b4 <i2c_transfer>
}
    66f4:	b009      	add	sp, #36	; 0x24
    66f6:	bd30      	pop	{r4, r5, pc}

000066f8 <lis2dh_i2c_read_data>:
{
    66f8:	b530      	push	{r4, r5, lr}
    66fa:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    66fc:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
    6700:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    6702:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6706:	f10d 0107 	add.w	r1, sp, #7
{
    670a:	461d      	mov	r5, r3
    670c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    670e:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
    6710:	6860      	ldr	r0, [r4, #4]
    6712:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
    6714:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
    6716:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    671a:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    671c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    671e:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6722:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    6726:	a902      	add	r1, sp, #8
    6728:	2202      	movs	r2, #2
    672a:	f7ff ffc3 	bl	66b4 <i2c_transfer>
}
    672e:	b009      	add	sp, #36	; 0x24
    6730:	bd30      	pop	{r4, r5, pc}

00006732 <lis2dh_i2c_write_reg>:
{
    6732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct lis2dh_config *cfg = dev->config;
    6734:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
    6736:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    673a:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    673c:	6858      	ldr	r0, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
    673e:	f88d 1000 	strb.w	r1, [sp]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    6742:	891b      	ldrh	r3, [r3, #8]
	msg.len = num_bytes;
    6744:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6746:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    674a:	a901      	add	r1, sp, #4
    674c:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
    674e:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
    6752:	f7ff ffaf 	bl	66b4 <i2c_transfer>
}
    6756:	b005      	add	sp, #20
    6758:	f85d fb04 	ldr.w	pc, [sp], #4

0000675c <lis2dh_i2c_read_reg>:
{
    675c:	b510      	push	{r4, lr}
    675e:	b088      	sub	sp, #32
	const struct lis2dh_config *cfg = dev->config;
    6760:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
    6762:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6766:	f10d 0107 	add.w	r1, sp, #7
    676a:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    676c:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
    676e:	6858      	ldr	r0, [r3, #4]
    6770:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
    6772:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
    6774:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6778:	2207      	movs	r2, #7
    677a:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    677e:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
    6780:	2202      	movs	r2, #2
    6782:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
    6784:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
    6788:	f7ff ff94 	bl	66b4 <i2c_transfer>
}
    678c:	b008      	add	sp, #32
    678e:	bd10      	pop	{r4, pc}

00006790 <lis2dh_i2c_update_reg>:
{
    6790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6794:	4698      	mov	r8, r3
	const struct lis2dh_config *cfg = dev->config;
    6796:	6843      	ldr	r3, [r0, #4]
{
    6798:	b088      	sub	sp, #32
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
    679a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    679e:	f893 a008 	ldrb.w	sl, [r3, #8]
    67a2:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    67a6:	2300      	movs	r3, #0
	msg[0].len = num_write;
    67a8:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    67aa:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    67ae:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    67b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    67b6:	2307      	movs	r3, #7
    67b8:	460e      	mov	r6, r1
    67ba:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
    67bc:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    67be:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    67c2:	2202      	movs	r2, #2
    67c4:	4653      	mov	r3, sl
    67c6:	a902      	add	r1, sp, #8
    67c8:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
    67ca:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    67cc:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
    67ce:	f7ff ff71 	bl	66b4 <i2c_transfer>
	if (rc != 0) {
    67d2:	b9b8      	cbnz	r0, 6804 <lis2dh_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
    67d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    67d8:	ea23 0104 	bic.w	r1, r3, r4
    67dc:	ea04 0408 	and.w	r4, r4, r8
    67e0:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    67e2:	42a3      	cmp	r3, r4
    67e4:	d00e      	beq.n	6804 <lis2dh_i2c_update_reg+0x74>
	msg.len = num_bytes;
    67e6:	2302      	movs	r3, #2
    67e8:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    67ea:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
    67ee:	463a      	mov	r2, r7
    67f0:	4653      	mov	r3, sl
    67f2:	a902      	add	r1, sp, #8
    67f4:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
    67f6:	f88d 6004 	strb.w	r6, [sp, #4]
    67fa:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    67fe:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
    6800:	f7ff ff58 	bl	66b4 <i2c_transfer>
}
    6804:	b008      	add	sp, #32
    6806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000680a <get_single_mode_raw_data>:
	return 0;
}

static int get_single_mode_raw_data(const struct device *dev,
				    int16_t *raw_mag)
{
    680a:	b570      	push	{r4, r5, r6, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
	const struct lis2mdl_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
    680c:	6845      	ldr	r5, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
    680e:	6906      	ldr	r6, [r0, #16]
{
    6810:	460c      	mov	r4, r1
	int rc = 0;

	rc = lis2mdl_operating_mode_set(ctx, LIS2MDL_SINGLE_TRIGGER);
    6812:	4628      	mov	r0, r5
    6814:	2101      	movs	r1, #1
    6816:	f7ff fc91 	bl	613c <lis2mdl_operating_mode_set>
	if (rc) {
    681a:	b978      	cbnz	r0, 683c <get_single_mode_raw_data+0x32>
	return z_impl_k_sem_take(sem, timeout);
    681c:	f44f 7224 	mov.w	r2, #656	; 0x290
    6820:	2300      	movs	r3, #0
    6822:	f106 000c 	add.w	r0, r6, #12
    6826:	f7fe fbab 	bl	4f80 <z_impl_k_sem_take>
		LOG_ERR("set single mode failed");
		return rc;
	}

	if (k_sem_take(&lis2mdl->fetch_sem, K_MSEC(SAMPLE_FETCH_TIMEOUT_MS))) {
    682a:	b928      	cbnz	r0, 6838 <get_single_mode_raw_data+0x2e>
			SAMPLE_FETCH_TIMEOUT_MS);
		return -EIO;
	}

	/* fetch raw data sample */
	rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
    682c:	4621      	mov	r1, r4
    682e:	4628      	mov	r0, r5
	if (rc) {
		LOG_ERR("Failed to read sample");
		return rc;
	}
	return 0;
}
    6830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
    6834:	f7ff bd0c 	b.w	6250 <lis2mdl_magnetic_raw_get>
		return -EIO;
    6838:	f06f 0004 	mvn.w	r0, #4
}
    683c:	bd70      	pop	{r4, r5, r6, pc}

0000683e <lis2mdl_init>:
	.sample_fetch = lis2mdl_sample_fetch,
	.channel_get = lis2mdl_channel_get,
};

static int lis2mdl_init(const struct device *dev)
{
    683e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
	const struct lis2mdl_config *cfg = dev->config;
    6840:	6844      	ldr	r4, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
    6842:	6907      	ldr	r7, [r0, #16]
	uint8_t wai;
	int rc = 0;

	lis2mdl->dev = dev;

	if (cfg->spi_4wires) {
    6844:	7da3      	ldrb	r3, [r4, #22]
	lis2mdl->dev = dev;
    6846:	6038      	str	r0, [r7, #0]
{
    6848:	4606      	mov	r6, r0
	if (cfg->spi_4wires) {
    684a:	b95b      	cbnz	r3, 6864 <lis2mdl_init+0x26>
			return -EIO;
		}
	}

	/* check chip ID */
	if (lis2mdl_device_id_get(ctx, &wai) < 0) {
    684c:	f10d 0107 	add.w	r1, sp, #7
    6850:	4620      	mov	r0, r4
    6852:	f7ff fd2b 	bl	62ac <lis2mdl_device_id_get>
    6856:	2800      	cmp	r0, #0
    6858:	da0b      	bge.n	6872 <lis2mdl_init+0x34>
			return -EIO;
    685a:	f06f 0504 	mvn.w	r5, #4
		}
	}
#endif

	return 0;
}
    685e:	4628      	mov	r0, r5
    6860:	b003      	add	sp, #12
    6862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (lis2mdl_spi_mode_set(ctx, LIS2MDL_SPI_4_WIRE) < 0) {
    6864:	2101      	movs	r1, #1
    6866:	4620      	mov	r0, r4
    6868:	f7ff fd6a 	bl	6340 <lis2mdl_spi_mode_set>
    686c:	2800      	cmp	r0, #0
    686e:	daed      	bge.n	684c <lis2mdl_init+0xe>
    6870:	e7f3      	b.n	685a <lis2mdl_init+0x1c>
	if (wai != LIS2MDL_ID) {
    6872:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6876:	2b40      	cmp	r3, #64	; 0x40
    6878:	d15c      	bne.n	6934 <lis2mdl_init+0xf6>
	if (lis2mdl_reset_set(ctx, PROPERTY_ENABLE) < 0) {
    687a:	2101      	movs	r1, #1
    687c:	4620      	mov	r0, r4
    687e:	f7ff fd1a 	bl	62b6 <lis2mdl_reset_set>
    6882:	2800      	cmp	r0, #0
    6884:	dbe9      	blt.n	685a <lis2mdl_init+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    6886:	2064      	movs	r0, #100	; 0x64
    6888:	f000 fe77 	bl	757a <z_impl_k_busy_wait>
	if (cfg->spi_4wires) {
    688c:	7da3      	ldrb	r3, [r4, #22]
    688e:	b9f3      	cbnz	r3, 68ce <lis2mdl_init+0x90>
	if (lis2mdl_block_data_update_set(ctx, PROPERTY_ENABLE) < 0) {
    6890:	2101      	movs	r1, #1
    6892:	4620      	mov	r0, r4
    6894:	f7ff fcc5 	bl	6222 <lis2mdl_block_data_update_set>
    6898:	2800      	cmp	r0, #0
    689a:	dbde      	blt.n	685a <lis2mdl_init+0x1c>
	if (lis2mdl_data_rate_set(ctx, LIS2MDL_ODR_10Hz)) {
    689c:	2100      	movs	r1, #0
    689e:	4620      	mov	r0, r4
    68a0:	f7ff fc63 	bl	616a <lis2mdl_data_rate_set>
    68a4:	2800      	cmp	r0, #0
    68a6:	d1d8      	bne.n	685a <lis2mdl_init+0x1c>
	if (cfg->cancel_offset) {
    68a8:	7d23      	ldrb	r3, [r4, #20]
    68aa:	b9bb      	cbnz	r3, 68dc <lis2mdl_init+0x9e>
	if (lis2mdl_offset_temp_comp_set(ctx, PROPERTY_ENABLE)) {
    68ac:	2101      	movs	r1, #1
    68ae:	4620      	mov	r0, r4
    68b0:	f7ff fc72 	bl	6198 <lis2mdl_offset_temp_comp_set>
    68b4:	4605      	mov	r5, r0
    68b6:	2800      	cmp	r0, #0
    68b8:	d1cf      	bne.n	685a <lis2mdl_init+0x1c>
	if (cfg->cancel_offset && cfg->single_mode) {
    68ba:	7d23      	ldrb	r3, [r4, #20]
    68bc:	b9ab      	cbnz	r3, 68ea <lis2mdl_init+0xac>
	if (cfg->single_mode) {
    68be:	7d63      	ldrb	r3, [r4, #21]
    68c0:	b9f3      	cbnz	r3, 6900 <lis2mdl_init+0xc2>
		rc = lis2mdl_operating_mode_set(ctx,
    68c2:	2100      	movs	r1, #0
    68c4:	4620      	mov	r0, r4
    68c6:	f7ff fc39 	bl	613c <lis2mdl_operating_mode_set>
		if (rc) {
    68ca:	b350      	cbz	r0, 6922 <lis2mdl_init+0xe4>
    68cc:	e016      	b.n	68fc <lis2mdl_init+0xbe>
		if (lis2mdl_spi_mode_set(ctx, LIS2MDL_SPI_4_WIRE) < 0) {
    68ce:	2101      	movs	r1, #1
    68d0:	4620      	mov	r0, r4
    68d2:	f7ff fd35 	bl	6340 <lis2mdl_spi_mode_set>
    68d6:	2800      	cmp	r0, #0
    68d8:	dada      	bge.n	6890 <lis2mdl_init+0x52>
    68da:	e7be      	b.n	685a <lis2mdl_init+0x1c>
		if (lis2mdl_set_rst_mode_set(ctx,
    68dc:	2101      	movs	r1, #1
    68de:	4620      	mov	r0, r4
    68e0:	f7ff fc71 	bl	61c6 <lis2mdl_set_rst_mode_set>
    68e4:	2800      	cmp	r0, #0
    68e6:	d0e1      	beq.n	68ac <lis2mdl_init+0x6e>
    68e8:	e7b7      	b.n	685a <lis2mdl_init+0x1c>
	if (cfg->cancel_offset && cfg->single_mode) {
    68ea:	7d63      	ldrb	r3, [r4, #21]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d0e8      	beq.n	68c2 <lis2mdl_init+0x84>
		rc = lis2mdl_set_rst_sensor_single_set(ctx,
    68f0:	2101      	movs	r1, #1
    68f2:	4620      	mov	r0, r4
    68f4:	f7ff fc7e 	bl	61f4 <lis2mdl_set_rst_sensor_single_set>
		if (rc) {
    68f8:	2800      	cmp	r0, #0
    68fa:	d0e0      	beq.n	68be <lis2mdl_init+0x80>
    68fc:	4605      	mov	r5, r0
    68fe:	e7ae      	b.n	685e <lis2mdl_init+0x20>
		rc = lis2mdl_drdy_on_pin_set(ctx, 1);
    6900:	2101      	movs	r1, #1
    6902:	4620      	mov	r0, r4
    6904:	f7ff fd05 	bl	6312 <lis2mdl_drdy_on_pin_set>
		if (rc) {
    6908:	2800      	cmp	r0, #0
    690a:	d1f7      	bne.n	68fc <lis2mdl_init+0xbe>
		rc = lis2mdl_boot_set(ctx, 1);
    690c:	2101      	movs	r1, #1
    690e:	4620      	mov	r0, r4
    6910:	f7ff fce8 	bl	62e4 <lis2mdl_boot_set>
		if (rc) {
    6914:	4601      	mov	r1, r0
    6916:	b980      	cbnz	r0, 693a <lis2mdl_init+0xfc>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6918:	2201      	movs	r2, #1
    691a:	f107 000c 	add.w	r0, r7, #12
    691e:	f000 fcbf 	bl	72a0 <z_impl_k_sem_init>
	if (cfg->trig_enabled) {
    6922:	7de3      	ldrb	r3, [r4, #23]
    6924:	2b00      	cmp	r3, #0
    6926:	d09a      	beq.n	685e <lis2mdl_init+0x20>
		if (lis2mdl_init_interrupt(dev) < 0) {
    6928:	4630      	mov	r0, r6
    692a:	f7fc f86f 	bl	2a0c <lis2mdl_init_interrupt>
    692e:	2800      	cmp	r0, #0
    6930:	da95      	bge.n	685e <lis2mdl_init+0x20>
    6932:	e792      	b.n	685a <lis2mdl_init+0x1c>
		return -EINVAL;
    6934:	f06f 0515 	mvn.w	r5, #21
    6938:	e791      	b.n	685e <lis2mdl_init+0x20>
    693a:	4605      	mov	r5, r0
    693c:	e78f      	b.n	685e <lis2mdl_init+0x20>

0000693e <lis2mdl_sample_fetch_temp.isra.0>:
static int lis2mdl_sample_fetch_temp(const struct device *dev)
    693e:	b513      	push	{r0, r1, r4, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
    6940:	6904      	ldr	r4, [r0, #16]
	if (lis2mdl_temperature_raw_get(ctx, &raw_temp) < 0) {
    6942:	6840      	ldr	r0, [r0, #4]
    6944:	f10d 0106 	add.w	r1, sp, #6
    6948:	f7ff fca0 	bl	628c <lis2mdl_temperature_raw_get>
    694c:	2800      	cmp	r0, #0
	lis2mdl->temp_sample = (sys_le16_to_cpu(raw_temp));
    694e:	bfa4      	itt	ge
    6950:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
    6954:	8163      	strhge	r3, [r4, #10]
}
    6956:	b002      	add	sp, #8
    6958:	bd10      	pop	{r4, pc}

0000695a <lis2mdl_sample_fetch_mag.isra.0>:
static int lis2mdl_sample_fetch_mag(const struct device *dev)
    695a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct lis2mdl_config *cfg = dev->config;
    695c:	6846      	ldr	r6, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
    695e:	6904      	ldr	r4, [r0, #16]
	if (cfg->single_mode) {
    6960:	7d73      	ldrb	r3, [r6, #21]
static int lis2mdl_sample_fetch_mag(const struct device *dev)
    6962:	4605      	mov	r5, r0
		rc = get_single_mode_raw_data(dev, raw_mag);
    6964:	4669      	mov	r1, sp
	if (cfg->single_mode) {
    6966:	b393      	cbz	r3, 69ce <lis2mdl_sample_fetch_mag.isra.0+0x74>
		rc = get_single_mode_raw_data(dev, raw_mag);
    6968:	f7ff ff4f 	bl	680a <get_single_mode_raw_data>
		if (rc) {
    696c:	bb68      	cbnz	r0, 69ca <lis2mdl_sample_fetch_mag.isra.0+0x70>
		lis2mdl->mag[0] = sys_le16_to_cpu(raw_mag[0]);
    696e:	f8bd 3000 	ldrh.w	r3, [sp]
    6972:	80a3      	strh	r3, [r4, #4]
		lis2mdl->mag[1] = sys_le16_to_cpu(raw_mag[1]);
    6974:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6978:	80e3      	strh	r3, [r4, #6]
		lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
    697a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    697e:	8123      	strh	r3, [r4, #8]
		if (cfg->cancel_offset) {
    6980:	7d33      	ldrb	r3, [r6, #20]
    6982:	b313      	cbz	r3, 69ca <lis2mdl_sample_fetch_mag.isra.0+0x70>
			rc = get_single_mode_raw_data(dev, raw_mag);
    6984:	4669      	mov	r1, sp
    6986:	4628      	mov	r0, r5
    6988:	f7ff ff3f 	bl	680a <get_single_mode_raw_data>
			if (rc) {
    698c:	b9e8      	cbnz	r0, 69ca <lis2mdl_sample_fetch_mag.isra.0+0x70>
			lis2mdl->mag[1] += sys_le16_to_cpu(raw_mag[1]);
    698e:	88e2      	ldrh	r2, [r4, #6]
    6990:	f8bd 3002 	ldrh.w	r3, [sp, #2]
			lis2mdl->mag[2] += sys_le16_to_cpu(raw_mag[2]);
    6994:	f8bd 1004 	ldrh.w	r1, [sp, #4]
			lis2mdl->mag[0] += sys_le16_to_cpu(raw_mag[0]);
    6998:	f8bd 0000 	ldrh.w	r0, [sp]
			lis2mdl->mag[1] += sys_le16_to_cpu(raw_mag[1]);
    699c:	441a      	add	r2, r3
			lis2mdl->mag[2] += sys_le16_to_cpu(raw_mag[2]);
    699e:	8923      	ldrh	r3, [r4, #8]
    69a0:	440b      	add	r3, r1
			lis2mdl->mag[0] += sys_le16_to_cpu(raw_mag[0]);
    69a2:	88a1      	ldrh	r1, [r4, #4]
    69a4:	4401      	add	r1, r0
			lis2mdl->mag[0] /= 2;
    69a6:	f3c1 30c0 	ubfx	r0, r1, #15, #1
    69aa:	fa00 f181 	sxtah	r1, r0, r1
    69ae:	1049      	asrs	r1, r1, #1
    69b0:	80a1      	strh	r1, [r4, #4]
			lis2mdl->mag[1] /= 2;
    69b2:	f3c2 31c0 	ubfx	r1, r2, #15, #1
    69b6:	fa01 f282 	sxtah	r2, r1, r2
    69ba:	1052      	asrs	r2, r2, #1
    69bc:	80e2      	strh	r2, [r4, #6]
			lis2mdl->mag[2] /= 2;
    69be:	f3c3 32c0 	ubfx	r2, r3, #15, #1
    69c2:	fa02 f383 	sxtah	r3, r2, r3
    69c6:	105b      	asrs	r3, r3, #1
		lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
    69c8:	8123      	strh	r3, [r4, #8]
}
    69ca:	b002      	add	sp, #8
    69cc:	bd70      	pop	{r4, r5, r6, pc}
		rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
    69ce:	4630      	mov	r0, r6
    69d0:	f7ff fc3e 	bl	6250 <lis2mdl_magnetic_raw_get>
		if (rc) {
    69d4:	2800      	cmp	r0, #0
    69d6:	d1f8      	bne.n	69ca <lis2mdl_sample_fetch_mag.isra.0+0x70>
		lis2mdl->mag[0] = sys_le16_to_cpu(raw_mag[0]);
    69d8:	f8bd 3000 	ldrh.w	r3, [sp]
    69dc:	80a3      	strh	r3, [r4, #4]
		lis2mdl->mag[1] = sys_le16_to_cpu(raw_mag[1]);
    69de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    69e2:	80e3      	strh	r3, [r4, #6]
		lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
    69e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    69e8:	e7ee      	b.n	69c8 <lis2mdl_sample_fetch_mag.isra.0+0x6e>

000069ea <lis2mdl_sample_fetch>:
	switch (chan) {
    69ea:	290c      	cmp	r1, #12
{
    69ec:	b510      	push	{r4, lr}
    69ee:	4604      	mov	r4, r0
	switch (chan) {
    69f0:	d00b      	beq.n	6a0a <lis2mdl_sample_fetch+0x20>
    69f2:	d805      	bhi.n	6a00 <lis2mdl_sample_fetch+0x16>
    69f4:	3908      	subs	r1, #8
    69f6:	2903      	cmp	r1, #3
    69f8:	d90a      	bls.n	6a10 <lis2mdl_sample_fetch+0x26>
    69fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    69fe:	e00a      	b.n	6a16 <lis2mdl_sample_fetch+0x2c>
    6a00:	2939      	cmp	r1, #57	; 0x39
    6a02:	d1fa      	bne.n	69fa <lis2mdl_sample_fetch+0x10>
		lis2mdl_sample_fetch_mag(dev);
    6a04:	f7ff ffa9 	bl	695a <lis2mdl_sample_fetch_mag.isra.0>
		lis2mdl_sample_fetch_temp(dev);
    6a08:	4620      	mov	r0, r4
    6a0a:	f7ff ff98 	bl	693e <lis2mdl_sample_fetch_temp.isra.0>
    6a0e:	e001      	b.n	6a14 <lis2mdl_sample_fetch+0x2a>
		lis2mdl_sample_fetch_mag(dev);
    6a10:	f7ff ffa3 	bl	695a <lis2mdl_sample_fetch_mag.isra.0>
		lis2mdl_sample_fetch_temp(dev);
    6a14:	2000      	movs	r0, #0
}
    6a16:	bd10      	pop	{r4, pc}

00006a18 <lis2mdl_attr_set>:
{
    6a18:	b513      	push	{r0, r1, r4, lr}
    6a1a:	460c      	mov	r4, r1
	switch (chan) {
    6a1c:	2c0b      	cmp	r4, #11
{
    6a1e:	4611      	mov	r1, r2
	switch (chan) {
    6a20:	d804      	bhi.n	6a2c <lis2mdl_attr_set+0x14>
    6a22:	2c07      	cmp	r4, #7
    6a24:	d804      	bhi.n	6a30 <lis2mdl_attr_set+0x18>
    6a26:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6a2a:	e027      	b.n	6a7c <lis2mdl_attr_set+0x64>
    6a2c:	2c39      	cmp	r4, #57	; 0x39
    6a2e:	d1fa      	bne.n	6a26 <lis2mdl_attr_set+0xe>
	switch (attr) {
    6a30:	b179      	cbz	r1, 6a52 <lis2mdl_attr_set+0x3a>
    6a32:	2908      	cmp	r1, #8
    6a34:	d1f7      	bne.n	6a26 <lis2mdl_attr_set+0xe>
		offset[i] = sys_cpu_to_le16(val->val1);
    6a36:	681a      	ldr	r2, [r3, #0]
    6a38:	f8ad 2000 	strh.w	r2, [sp]
	return lis2mdl_mag_user_offset_set(ctx, offset);
    6a3c:	4669      	mov	r1, sp
		offset[i] = sys_cpu_to_le16(val->val1);
    6a3e:	689a      	ldr	r2, [r3, #8]
	return lis2mdl_mag_user_offset_set(ctx, offset);
    6a40:	6840      	ldr	r0, [r0, #4]
		offset[i] = sys_cpu_to_le16(val->val1);
    6a42:	691b      	ldr	r3, [r3, #16]
    6a44:	f8ad 2002 	strh.w	r2, [sp, #2]
    6a48:	f8ad 3004 	strh.w	r3, [sp, #4]
	return lis2mdl_mag_user_offset_set(ctx, offset);
    6a4c:	f7ff fb55 	bl	60fa <lis2mdl_mag_user_offset_set>
		return lis2mdl_set_hard_iron(dev, chan, val);
    6a50:	e014      	b.n	6a7c <lis2mdl_attr_set+0x64>
		return lis2mdl_set_odr(dev, val);
    6a52:	681b      	ldr	r3, [r3, #0]
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
    6a54:	6840      	ldr	r0, [r0, #4]
	switch (val->val1) {
    6a56:	2b32      	cmp	r3, #50	; 0x32
    6a58:	d012      	beq.n	6a80 <lis2mdl_attr_set+0x68>
    6a5a:	dc06      	bgt.n	6a6a <lis2mdl_attr_set+0x52>
    6a5c:	2b0a      	cmp	r3, #10
    6a5e:	d007      	beq.n	6a70 <lis2mdl_attr_set+0x58>
    6a60:	2b14      	cmp	r3, #20
    6a62:	d00f      	beq.n	6a84 <lis2mdl_attr_set+0x6c>
    6a64:	f06f 0015 	mvn.w	r0, #21
    6a68:	e008      	b.n	6a7c <lis2mdl_attr_set+0x64>
    6a6a:	2b64      	cmp	r3, #100	; 0x64
    6a6c:	d1fa      	bne.n	6a64 <lis2mdl_attr_set+0x4c>
		odr = LIS2MDL_ODR_100Hz;
    6a6e:	2103      	movs	r1, #3
	if (lis2mdl_data_rate_set(ctx, odr)) {
    6a70:	f7ff fb7b 	bl	616a <lis2mdl_data_rate_set>
		return -EIO;
    6a74:	2800      	cmp	r0, #0
    6a76:	bf18      	it	ne
    6a78:	f06f 0004 	mvnne.w	r0, #4
}
    6a7c:	b002      	add	sp, #8
    6a7e:	bd10      	pop	{r4, pc}
		odr = LIS2MDL_ODR_50Hz;
    6a80:	2102      	movs	r1, #2
    6a82:	e7f5      	b.n	6a70 <lis2mdl_attr_set+0x58>
	switch (val->val1) {
    6a84:	2101      	movs	r1, #1
    6a86:	e7f3      	b.n	6a70 <lis2mdl_attr_set+0x58>

00006a88 <gpio_pin_interrupt_configure_dt>:
{
    6a88:	b430      	push	{r4, r5}
    6a8a:	4603      	mov	r3, r0
    6a8c:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    6a8e:	6800      	ldr	r0, [r0, #0]
    6a90:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6a92:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    6a94:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6a96:	d507      	bpl.n	6aa8 <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6a98:	6905      	ldr	r5, [r0, #16]
    6a9a:	2301      	movs	r3, #1
    6a9c:	682d      	ldr	r5, [r5, #0]
    6a9e:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6aa0:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    6aa2:	bf18      	it	ne
    6aa4:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6aa8:	69a4      	ldr	r4, [r4, #24]
    6aaa:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    6aae:	46a4      	mov	ip, r4
    6ab0:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
    6ab4:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6ab6:	4760      	bx	ip

00006ab8 <lis2mdl_gpio_callback>:
{
    6ab8:	b510      	push	{r4, lr}
	const struct lis2mdl_config *const cfg = lis2mdl->dev->config;
    6aba:	f851 3c1c 	ldr.w	r3, [r1, #-28]
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy, GPIO_INT_DISABLE);
    6abe:	6858      	ldr	r0, [r3, #4]
{
    6ac0:	460c      	mov	r4, r1
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy, GPIO_INT_DISABLE);
    6ac2:	3018      	adds	r0, #24
    6ac4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6ac8:	f7ff ffde 	bl	6a88 <gpio_pin_interrupt_configure_dt>
	k_work_submit(&lis2mdl->work);
    6acc:	f104 0010 	add.w	r0, r4, #16
}
    6ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&lis2mdl->work);
    6ad4:	f7fe bb5c 	b.w	5190 <k_work_submit>

00006ad8 <lis2mdl_work_cb>:
{
    6ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lis2mdl_handle_interrupt(lis2mdl->dev);
    6ada:	f850 0c2c 	ldr.w	r0, [r0, #-44]
	struct sensor_trigger drdy_trigger = {
    6ade:	2300      	movs	r3, #0
	struct lis2mdl_data *lis2mdl = dev->data;
    6ae0:	6905      	ldr	r5, [r0, #16]
	struct sensor_trigger drdy_trigger = {
    6ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ae6:	2301      	movs	r3, #1
    6ae8:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (lis2mdl->handler_drdy != NULL) {
    6aec:	6aab      	ldr	r3, [r5, #40]	; 0x28
	const struct lis2mdl_config *const cfg = dev->config;
    6aee:	6844      	ldr	r4, [r0, #4]
	if (lis2mdl->handler_drdy != NULL) {
    6af0:	b10b      	cbz	r3, 6af6 <lis2mdl_work_cb+0x1e>
		lis2mdl->handler_drdy(dev, &drdy_trigger);
    6af2:	a901      	add	r1, sp, #4
    6af4:	4798      	blx	r3
	if (cfg->single_mode) {
    6af6:	7d63      	ldrb	r3, [r4, #21]
    6af8:	b11b      	cbz	r3, 6b02 <lis2mdl_work_cb+0x2a>
	z_impl_k_sem_give(sem);
    6afa:	f105 000c 	add.w	r0, r5, #12
    6afe:	f7fe fa1f 	bl	4f40 <z_impl_k_sem_give>
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    6b02:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    6b06:	f104 0018 	add.w	r0, r4, #24
    6b0a:	f7ff ffbd 	bl	6a88 <gpio_pin_interrupt_configure_dt>
}
    6b0e:	b003      	add	sp, #12
    6b10:	bd30      	pop	{r4, r5, pc}

00006b12 <lis2mdl_trigger_set>:
{
    6b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6b14:	4604      	mov	r4, r0
	const struct lis2mdl_config *cfg = dev->config;
    6b16:	6840      	ldr	r0, [r0, #4]
	if (!cfg->trig_enabled) {
    6b18:	7dc5      	ldrb	r5, [r0, #23]
{
    6b1a:	460b      	mov	r3, r1
    6b1c:	4611      	mov	r1, r2
	struct lis2mdl_data *lis2mdl = dev->data;
    6b1e:	6922      	ldr	r2, [r4, #16]
	if (!cfg->trig_enabled) {
    6b20:	b19d      	cbz	r5, 6b4a <lis2mdl_trigger_set+0x38>
	if (trig->chan == SENSOR_CHAN_MAGN_XYZ) {
    6b22:	885b      	ldrh	r3, [r3, #2]
    6b24:	2b0b      	cmp	r3, #11
    6b26:	d110      	bne.n	6b4a <lis2mdl_trigger_set+0x38>
		lis2mdl->handler_drdy = handler;
    6b28:	6291      	str	r1, [r2, #40]	; 0x28
		if (handler) {
    6b2a:	b141      	cbz	r1, 6b3e <lis2mdl_trigger_set+0x2c>
			lis2mdl_magnetic_raw_get(ctx, raw);
    6b2c:	4669      	mov	r1, sp
    6b2e:	f7ff fb8f 	bl	6250 <lis2mdl_magnetic_raw_get>
	return lis2mdl_drdy_on_pin_set(ctx, enable);
    6b32:	6860      	ldr	r0, [r4, #4]
    6b34:	2101      	movs	r1, #1
    6b36:	f7ff fbec 	bl	6312 <lis2mdl_drdy_on_pin_set>
}
    6b3a:	b003      	add	sp, #12
    6b3c:	bd30      	pop	{r4, r5, pc}
	return lis2mdl_drdy_on_pin_set(ctx, enable);
    6b3e:	6860      	ldr	r0, [r4, #4]
}
    6b40:	b003      	add	sp, #12
    6b42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return lis2mdl_drdy_on_pin_set(ctx, enable);
    6b46:	f7ff bbe4 	b.w	6312 <lis2mdl_drdy_on_pin_set>
		return -ENOTSUP;
    6b4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6b4e:	e7f4      	b.n	6b3a <lis2mdl_trigger_set+0x28>

00006b50 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
    6b50:	b530      	push	{r4, r5, lr}
    6b52:	b089      	sub	sp, #36	; 0x24
    6b54:	4604      	mov	r4, r0
    6b56:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6b5a:	f10d 0107 	add.w	r1, sp, #7
    6b5e:	461d      	mov	r5, r3
    6b60:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    6b62:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
    6b64:	e9cd 2505 	strd	r2, r5, [sp, #20]
    6b68:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6b6a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6b6c:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
    6b6e:	6800      	ldr	r0, [r0, #0]
    6b70:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
    6b72:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6b76:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6b7a:	6882      	ldr	r2, [r0, #8]
    6b7c:	a902      	add	r1, sp, #8
    6b7e:	6894      	ldr	r4, [r2, #8]
    6b80:	2202      	movs	r2, #2
    6b82:	47a0      	blx	r4
}
    6b84:	b009      	add	sp, #36	; 0x24
    6b86:	bd30      	pop	{r4, r5, pc}

00006b88 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
    6b88:	b530      	push	{r4, r5, lr}
    6b8a:	b089      	sub	sp, #36	; 0x24
    6b8c:	4604      	mov	r4, r0
    6b8e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    6b92:	f10d 0107 	add.w	r1, sp, #7
    6b96:	461d      	mov	r5, r3
    6b98:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    6b9a:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
    6b9c:	e9cd 2505 	strd	r2, r5, [sp, #20]
    6ba0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6ba2:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    6ba4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
    6ba6:	6800      	ldr	r0, [r0, #0]
    6ba8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
    6baa:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6bae:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6bb2:	6881      	ldr	r1, [r0, #8]
    6bb4:	688c      	ldr	r4, [r1, #8]
    6bb6:	a902      	add	r1, sp, #8
    6bb8:	47a0      	blx	r4
}
    6bba:	b009      	add	sp, #36	; 0x24
    6bbc:	bd30      	pop	{r4, r5, pc}

00006bbe <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
    6bbe:	2200      	movs	r2, #0
    6bc0:	2101      	movs	r1, #1
    6bc2:	202f      	movs	r0, #47	; 0x2f
    6bc4:	f7fa bf12 	b.w	19ec <z_arm_irq_priority_set>

00006bc8 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    6bc8:	b530      	push	{r4, r5, lr}
    6bca:	4604      	mov	r4, r0
	while (*count) {
    6bcc:	6808      	ldr	r0, [r1, #0]
    6bce:	b908      	cbnz	r0, 6bd4 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    6bd0:	6010      	str	r0, [r2, #0]
	return NULL;
    6bd2:	e004      	b.n	6bde <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    6bd4:	6823      	ldr	r3, [r4, #0]
    6bd6:	685d      	ldr	r5, [r3, #4]
    6bd8:	b115      	cbz	r5, 6be0 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    6bda:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    6bdc:	6015      	str	r5, [r2, #0]
}
    6bde:	bd30      	pop	{r4, r5, pc}
		++(*current);
    6be0:	3308      	adds	r3, #8
		--(*count);
    6be2:	3801      	subs	r0, #1
		++(*current);
    6be4:	6023      	str	r3, [r4, #0]
		--(*count);
    6be6:	6008      	str	r0, [r1, #0]
    6be8:	e7f0      	b.n	6bcc <spi_context_get_next_buf.constprop.0+0x4>

00006bea <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    6bea:	4603      	mov	r3, r0
    6bec:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    6bee:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6bf0:	7919      	ldrb	r1, [r3, #4]
    6bf2:	2301      	movs	r3, #1
    6bf4:	fa03 f101 	lsl.w	r1, r3, r1
    6bf8:	6903      	ldr	r3, [r0, #16]
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6bfe:	bf18      	it	ne
    6c00:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    6c04:	b112      	cbz	r2, 6c0c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    6c06:	6883      	ldr	r3, [r0, #8]
    6c08:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6c0a:	4718      	bx	r3
    6c0c:	6883      	ldr	r3, [r0, #8]
    6c0e:	691b      	ldr	r3, [r3, #16]
    6c10:	e7fb      	b.n	6c0a <gpio_pin_set_dt.isra.0+0x20>

00006c12 <_spi_context_cs_control>:
{
    6c12:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6c14:	6803      	ldr	r3, [r0, #0]
{
    6c16:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6c18:	b1e3      	cbz	r3, 6c54 <_spi_context_cs_control+0x42>
    6c1a:	6898      	ldr	r0, [r3, #8]
    6c1c:	b1d0      	cbz	r0, 6c54 <_spi_context_cs_control+0x42>
    6c1e:	6805      	ldr	r5, [r0, #0]
    6c20:	b1c5      	cbz	r5, 6c54 <_spi_context_cs_control+0x42>
		if (on) {
    6c22:	b149      	cbz	r1, 6c38 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    6c24:	2101      	movs	r1, #1
    6c26:	f7ff ffe0 	bl	6bea <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    6c2a:	6823      	ldr	r3, [r4, #0]
    6c2c:	689b      	ldr	r3, [r3, #8]
    6c2e:	6898      	ldr	r0, [r3, #8]
}
    6c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6c34:	f000 bca1 	b.w	757a <z_impl_k_busy_wait>
			if (!force_off &&
    6c38:	b912      	cbnz	r2, 6c40 <_spi_context_cs_control+0x2e>
    6c3a:	889b      	ldrh	r3, [r3, #4]
    6c3c:	04db      	lsls	r3, r3, #19
    6c3e:	d409      	bmi.n	6c54 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    6c40:	6880      	ldr	r0, [r0, #8]
    6c42:	f000 fc9a 	bl	757a <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6c46:	6823      	ldr	r3, [r4, #0]
    6c48:	2100      	movs	r1, #0
    6c4a:	6898      	ldr	r0, [r3, #8]
}
    6c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6c50:	f7ff bfcb 	b.w	6bea <gpio_pin_set_dt.isra.0>
}
    6c54:	bd38      	pop	{r3, r4, r5, pc}

00006c56 <spi_context_unlock_unconditionally>:
{
    6c56:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    6c58:	2201      	movs	r2, #1
    6c5a:	2100      	movs	r1, #0
{
    6c5c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    6c5e:	f7ff ffd8 	bl	6c12 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    6c62:	69a3      	ldr	r3, [r4, #24]
    6c64:	b933      	cbnz	r3, 6c74 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    6c66:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    6c68:	f104 0010 	add.w	r0, r4, #16
}
    6c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c70:	f7fe b966 	b.w	4f40 <z_impl_k_sem_give>
    6c74:	bd10      	pop	{r4, pc}

00006c76 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    6c76:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    6c78:	6803      	ldr	r3, [r0, #0]
    6c7a:	428b      	cmp	r3, r1
{
    6c7c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    6c7e:	d106      	bne.n	6c8e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    6c80:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    6c84:	b934      	cbnz	r4, 6c94 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    6c86:	f7ff ffe6 	bl	6c56 <spi_context_unlock_unconditionally>
	return 0;
    6c8a:	4620      	mov	r0, r4
}
    6c8c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6c8e:	f06f 0015 	mvn.w	r0, #21
    6c92:	e7fb      	b.n	6c8c <spi_nrfx_release+0x16>
		return -EBUSY;
    6c94:	f06f 000f 	mvn.w	r0, #15
    6c98:	e7f8      	b.n	6c8c <spi_nrfx_release+0x16>

00006c9a <spi_nrfx_init>:
{
    6c9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    6c9e:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    6ca0:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    6ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ret = pinctrl_lookup_state(config, id, &state);
    6ca4:	aa01      	add	r2, sp, #4
    6ca6:	2100      	movs	r1, #0
    6ca8:	4630      	mov	r0, r6
    6caa:	f000 f899 	bl	6de0 <pinctrl_lookup_state>
	if (ret < 0) {
    6cae:	2800      	cmp	r0, #0
    6cb0:	db43      	blt.n	6d3a <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
    6cb2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6cb4:	6832      	ldr	r2, [r6, #0]
    6cb6:	7919      	ldrb	r1, [r3, #4]
    6cb8:	6818      	ldr	r0, [r3, #0]
    6cba:	f000 f8c8 	bl	6e4e <pinctrl_configure_pins>
	if (err < 0) {
    6cbe:	2800      	cmp	r0, #0
    6cc0:	db3b      	blt.n	6d3a <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
    6cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6cc4:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    6cc6:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6cc8:	2601      	movs	r6, #1
    6cca:	3408      	adds	r4, #8
    6ccc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    6cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6cd4:	f1a4 0208 	sub.w	r2, r4, #8
    6cd8:	4293      	cmp	r3, r2
    6cda:	d804      	bhi.n	6ce6 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    6cdc:	4628      	mov	r0, r5
    6cde:	f7ff ffba 	bl	6c56 <spi_context_unlock_unconditionally>
	return 0;
    6ce2:	2000      	movs	r0, #0
    6ce4:	e029      	b.n	6d3a <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    6ce6:	f854 0c08 	ldr.w	r0, [r4, #-8]
    6cea:	f000 fa83 	bl	71f4 <z_device_is_ready>
    6cee:	b338      	cbz	r0, 6d40 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    6cf0:	f854 0c08 	ldr.w	r0, [r4, #-8]
    6cf4:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    6cf8:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    6cfc:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    6d00:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6d04:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6d08:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    6d0a:	bf54      	ite	pl
    6d0c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6d10:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6d14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6d18:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6d1c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6d1e:	bf4c      	ite	mi
    6d20:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6d24:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
    6d28:	f8d8 3000 	ldr.w	r3, [r8]
    6d2c:	f8cc 7000 	str.w	r7, [ip]
    6d30:	4798      	blx	r3
		if (ret < 0) {
    6d32:	2800      	cmp	r0, #0
    6d34:	f104 0408 	add.w	r4, r4, #8
    6d38:	dac8      	bge.n	6ccc <spi_nrfx_init+0x32>
}
    6d3a:	b002      	add	sp, #8
    6d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    6d40:	f06f 0012 	mvn.w	r0, #18
    6d44:	e7f9      	b.n	6d3a <spi_nrfx_init+0xa0>

00006d46 <event_handler>:
{
    6d46:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    6d48:	7803      	ldrb	r3, [r0, #0]
{
    6d4a:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d13d      	bne.n	6dcc <event_handler+0x86>
	if (!ctx->tx_len) {
    6d50:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    6d52:	b19b      	cbz	r3, 6d7c <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    6d54:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    6d56:	429a      	cmp	r2, r3
    6d58:	d810      	bhi.n	6d7c <event_handler+0x36>
	ctx->tx_len -= len;
    6d5a:	1a9b      	subs	r3, r3, r2
    6d5c:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    6d5e:	bb4b      	cbnz	r3, 6db4 <event_handler+0x6e>
		++ctx->current_tx;
    6d60:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6d62:	3308      	adds	r3, #8
    6d64:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    6d66:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6d68:	3b01      	subs	r3, #1
    6d6a:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    6d6c:	f101 0248 	add.w	r2, r1, #72	; 0x48
    6d70:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6d74:	3138      	adds	r1, #56	; 0x38
    6d76:	f7ff ff27 	bl	6bc8 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    6d7a:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    6d7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    6d7e:	b1a3      	cbz	r3, 6daa <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    6d80:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    6d82:	429a      	cmp	r2, r3
    6d84:	d811      	bhi.n	6daa <event_handler+0x64>
	ctx->rx_len -= len;
    6d86:	1a9b      	subs	r3, r3, r2
    6d88:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    6d8a:	b9cb      	cbnz	r3, 6dc0 <event_handler+0x7a>
		++ctx->current_rx;
    6d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6d8e:	3308      	adds	r3, #8
    6d90:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    6d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6d94:	3b01      	subs	r3, #1
    6d96:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    6d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6d9c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    6da0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    6da4:	f7ff ff10 	bl	6bc8 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    6da8:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    6daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    6dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    6db0:	f7fb bef4 	b.w	2b9c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    6db4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    6db6:	2b00      	cmp	r3, #0
    6db8:	d0e0      	beq.n	6d7c <event_handler+0x36>
		ctx->tx_buf += dfs * len;
    6dba:	4413      	add	r3, r2
    6dbc:	644b      	str	r3, [r1, #68]	; 0x44
    6dbe:	e7dd      	b.n	6d7c <event_handler+0x36>
	} else if (ctx->rx_buf) {
    6dc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6dc2:	2b00      	cmp	r3, #0
    6dc4:	d0f1      	beq.n	6daa <event_handler+0x64>
		ctx->rx_buf += dfs * len;
    6dc6:	4413      	add	r3, r2
    6dc8:	64e3      	str	r3, [r4, #76]	; 0x4c
    6dca:	e7ee      	b.n	6daa <event_handler+0x64>
}
    6dcc:	bd10      	pop	{r4, pc}

00006dce <uart_nrfx_config_get>:
	*cfg = data->uart_config;
    6dce:	6902      	ldr	r2, [r0, #16]
{
    6dd0:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
    6dd6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6dda:	2000      	movs	r0, #0
    6ddc:	4770      	bx	lr

00006dde <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6dde:	4770      	bx	lr

00006de0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6de0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6de2:	6843      	ldr	r3, [r0, #4]
    6de4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6de6:	7a03      	ldrb	r3, [r0, #8]
    6de8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6dec:	3b01      	subs	r3, #1
    6dee:	00db      	lsls	r3, r3, #3
    6df0:	6845      	ldr	r5, [r0, #4]
    6df2:	6814      	ldr	r4, [r2, #0]
    6df4:	441d      	add	r5, r3
    6df6:	42ac      	cmp	r4, r5
    6df8:	d902      	bls.n	6e00 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    6dfa:	f06f 0001 	mvn.w	r0, #1
}
    6dfe:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6e00:	7965      	ldrb	r5, [r4, #5]
    6e02:	428d      	cmp	r5, r1
    6e04:	d002      	beq.n	6e0c <pinctrl_lookup_state+0x2c>
		(*state)++;
    6e06:	3408      	adds	r4, #8
    6e08:	6014      	str	r4, [r2, #0]
    6e0a:	e7f1      	b.n	6df0 <pinctrl_lookup_state+0x10>
			return 0;
    6e0c:	2000      	movs	r0, #0
    6e0e:	e7f6      	b.n	6dfe <pinctrl_lookup_state+0x1e>

00006e10 <nrf_pin_configure.constprop.0>:
 *
 * @param pin Pin configuration.
 * @param dir Pin direction.
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    6e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    6e12:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6e16:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    6e18:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6e1a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e1e:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6e20:	bf0e      	itee	eq
    6e22:	4615      	moveq	r5, r2
    6e24:	2501      	movne	r5, #1
    6e26:	2100      	movne	r1, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6e28:	9301      	str	r3, [sp, #4]
    6e2a:	f7fc fbd1 	bl	35d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6e2e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6e30:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    6e34:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6e38:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    6e3c:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    6e3e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6e42:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    6e46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    6e4a:	b003      	add	sp, #12
    6e4c:	bd30      	pop	{r4, r5, pc}

00006e4e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e50:	4615      	mov	r5, r2
    6e52:	4604      	mov	r4, r0
    6e54:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6e58:	2601      	movs	r6, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6e5a:	42bc      	cmp	r4, r7
    6e5c:	d102      	bne.n	6e64 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6e5e:	2000      	movs	r0, #0
}
    6e60:	b003      	add	sp, #12
    6e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    6e64:	6823      	ldr	r3, [r4, #0]
		switch (NRF_GET_FUN(pins[i])) {
    6e66:	0c1a      	lsrs	r2, r3, #16
    6e68:	2a0c      	cmp	r2, #12
    6e6a:	d85d      	bhi.n	6f28 <pinctrl_configure_pins+0xda>
    6e6c:	e8df f002 	tbb	[pc, r2]
    6e70:	4d201a07 	.word	0x4d201a07
    6e74:	5c4d3c25 	.word	0x5c4d3c25
    6e78:	525c5c5c 	.word	0x525c5c5c
    6e7c:	57          	.byte	0x57
    6e7d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e82:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6e86:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e88:	a801      	add	r0, sp, #4
    6e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e8e:	9301      	str	r3, [sp, #4]
    6e90:	f7fc fb9e 	bl	35d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6e94:	9b01      	ldr	r3, [sp, #4]
    6e96:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
    6e9a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6e9e:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6ea0:	4611      	mov	r1, r2
    6ea2:	e01c      	b.n	6ede <pinctrl_configure_pins+0x90>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ea8:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6eac:	2200      	movs	r2, #0
    6eae:	e7f7      	b.n	6ea0 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6eb4:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    6eb8:	e7e5      	b.n	6e86 <pinctrl_configure_pins+0x38>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ebe:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6ec2:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ec4:	a801      	add	r0, sp, #4
    6ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6eca:	9301      	str	r3, [sp, #4]
    6ecc:	f7fc fb80 	bl	35d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6ed0:	9b01      	ldr	r3, [sp, #4]
    6ed2:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    6ed6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6eda:	2200      	movs	r2, #0
    6edc:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6ede:	6820      	ldr	r0, [r4, #0]
    6ee0:	f7ff ff96 	bl	6e10 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6ee4:	3404      	adds	r4, #4
    6ee6:	e7b8      	b.n	6e5a <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6eec:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6ef0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ef2:	a801      	add	r0, sp, #4
    6ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ef8:	9301      	str	r3, [sp, #4]
    6efa:	f7fc fb69 	bl	35d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6efe:	9b01      	ldr	r3, [sp, #4]
    6f00:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    6f04:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    6f08:	e7c9      	b.n	6e9e <pinctrl_configure_pins+0x50>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f0e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6f12:	e7cb      	b.n	6eac <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f18:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6f1c:	e7c6      	b.n	6eac <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f22:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    6f26:	e7c1      	b.n	6eac <pinctrl_configure_pins+0x5e>
		switch (NRF_GET_FUN(pins[i])) {
    6f28:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6f2c:	e798      	b.n	6e60 <pinctrl_configure_pins+0x12>

00006f2e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6f2e:	4700      	bx	r0

00006f30 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6f30:	f000 bb23 	b.w	757a <z_impl_k_busy_wait>

00006f34 <clock_stop>:
{
    6f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6f36:	4604      	mov	r4, r0
    6f38:	b118      	cbz	r0, 6f42 <clock_stop+0xe>
    6f3a:	2801      	cmp	r0, #1
    6f3c:	d024      	beq.n	6f88 <clock_stop+0x54>
}
    6f3e:	b003      	add	sp, #12
    6f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f46:	2202      	movs	r2, #2
    6f48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f4c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6f50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f54:	2201      	movs	r2, #1
    6f56:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6f58:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6f5a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6f5c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6f60:	bf14      	ite	ne
    6f62:	2500      	movne	r5, #0
    6f64:	f10d 0507 	addeq.w	r5, sp, #7
    6f68:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6f6c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    6f70:	b1ac      	cbz	r4, 6f9e <clock_stop+0x6a>
    6f72:	2c01      	cmp	r4, #1
    6f74:	d1e3      	bne.n	6f3e <clock_stop+0xa>
            if (p_clk_src != NULL)
    6f76:	b125      	cbz	r5, 6f82 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6f78:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6f7c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6f80:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6f82:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6f86:	e012      	b.n	6fae <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    6f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f8c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6f8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6f96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f9a:	6058      	str	r0, [r3, #4]
}
    6f9c:	e7dc      	b.n	6f58 <clock_stop+0x24>
            if (p_clk_src != NULL)
    6f9e:	b125      	cbz	r5, 6faa <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6fa0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6fa4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6fa8:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6faa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6fae:	03db      	lsls	r3, r3, #15
    6fb0:	d5c5      	bpl.n	6f3e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6fb2:	b92d      	cbnz	r5, 6fc0 <clock_stop+0x8c>
    6fb4:	2001      	movs	r0, #1
    6fb6:	f7ff ffbb 	bl	6f30 <nrfx_busy_wait>
    6fba:	3f01      	subs	r7, #1
    6fbc:	d1d8      	bne.n	6f70 <clock_stop+0x3c>
    6fbe:	e7be      	b.n	6f3e <clock_stop+0xa>
    6fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fc4:	2b01      	cmp	r3, #1
    6fc6:	d0f5      	beq.n	6fb4 <clock_stop+0x80>
    6fc8:	e7b9      	b.n	6f3e <clock_stop+0xa>

00006fca <nrfx_clock_enable>:
{
    6fca:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6fcc:	2000      	movs	r0, #0
    6fce:	f7fa fcff 	bl	19d0 <arch_irq_is_enabled>
    6fd2:	b908      	cbnz	r0, 6fd8 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6fd4:	f7fa fcd8 	bl	1988 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fdc:	2200      	movs	r2, #0
    6fde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6fe2:	bd08      	pop	{r3, pc}

00006fe4 <nrfx_clock_start>:
{
    6fe4:	b508      	push	{r3, lr}
    switch (domain)
    6fe6:	b110      	cbz	r0, 6fee <nrfx_clock_start+0xa>
    6fe8:	2801      	cmp	r0, #1
    6fea:	d028      	beq.n	703e <nrfx_clock_start+0x5a>
}
    6fec:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ff2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6ff6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6ffa:	03c9      	lsls	r1, r1, #15
    6ffc:	d40b      	bmi.n	7016 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6ffe:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7002:	07d0      	lsls	r0, r2, #31
    7004:	d50c      	bpl.n	7020 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7006:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    700a:	0792      	lsls	r2, r2, #30
    700c:	d105      	bne.n	701a <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    700e:	2202      	movs	r2, #2
    7010:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    7014:	e7ea      	b.n	6fec <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    7016:	0791      	lsls	r1, r2, #30
    7018:	d002      	beq.n	7020 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    701a:	2000      	movs	r0, #0
    701c:	f7ff ff8a 	bl	6f34 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7024:	2200      	movs	r2, #0
    7026:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    702a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    702e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    7032:	2202      	movs	r2, #2
    7034:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7038:	2201      	movs	r2, #1
    703a:	609a      	str	r2, [r3, #8]
}
    703c:	e7d6      	b.n	6fec <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    703e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7042:	2200      	movs	r2, #0
    7044:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7048:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    704c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7050:	6018      	str	r0, [r3, #0]
}
    7052:	e7cb      	b.n	6fec <nrfx_clock_start+0x8>

00007054 <nrfx_clock_stop>:
    clock_stop(domain);
    7054:	f7ff bf6e 	b.w	6f34 <clock_stop>

00007058 <nrf_gpio_reconfigure>:
{
    7058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    705a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    705c:	a801      	add	r0, sp, #4
{
    705e:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    7062:	4617      	mov	r7, r2
    7064:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7066:	f7fc fc3b 	bl	38e0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    706a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    706c:	2f00      	cmp	r7, #0
    706e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7072:	bf14      	ite	ne
    7074:	2302      	movne	r3, #2
    7076:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7078:	2900      	cmp	r1, #0
    707a:	bf18      	it	ne
    707c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7080:	2d00      	cmp	r5, #0
    7082:	bf14      	ite	ne
    7084:	f04f 0c0c 	movne.w	ip, #12
    7088:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    708c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    708e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7092:	bf14      	ite	ne
    7094:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7098:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    709c:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    709e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    70a2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    70a6:	bf14      	ite	ne
    70a8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    70ac:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    70b0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    70b4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    70b8:	b101      	cbz	r1, 70bc <nrf_gpio_reconfigure+0x64>
    70ba:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    70bc:	b10f      	cbz	r7, 70c2 <nrf_gpio_reconfigure+0x6a>
    70be:	783f      	ldrb	r7, [r7, #0]
    70c0:	007f      	lsls	r7, r7, #1
    70c2:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    70c4:	b10d      	cbz	r5, 70ca <nrf_gpio_reconfigure+0x72>
    70c6:	782d      	ldrb	r5, [r5, #0]
    70c8:	00ad      	lsls	r5, r5, #2
    70ca:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    70cc:	b10c      	cbz	r4, 70d2 <nrf_gpio_reconfigure+0x7a>
    70ce:	7822      	ldrb	r2, [r4, #0]
    70d0:	0214      	lsls	r4, r2, #8
    70d2:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    70d4:	b10e      	cbz	r6, 70da <nrf_gpio_reconfigure+0x82>
    70d6:	7836      	ldrb	r6, [r6, #0]
    70d8:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    70da:	432c      	orrs	r4, r5
    70dc:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    70de:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    70e2:	b003      	add	sp, #12
    70e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000070e6 <nrf_gpio_cfg_sense_set>:
{
    70e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    70e8:	f10d 030f 	add.w	r3, sp, #15
    70ec:	9301      	str	r3, [sp, #4]
    70ee:	2300      	movs	r3, #0
{
    70f0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    70f4:	9300      	str	r3, [sp, #0]
    70f6:	461a      	mov	r2, r3
    70f8:	4619      	mov	r1, r3
    70fa:	f7ff ffad 	bl	7058 <nrf_gpio_reconfigure>
}
    70fe:	b005      	add	sp, #20
    7100:	f85d fb04 	ldr.w	pc, [sp], #4

00007104 <nrf_gpio_pin_set>:
{
    7104:	b507      	push	{r0, r1, r2, lr}
    7106:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7108:	a801      	add	r0, sp, #4
    710a:	f7fc ff49 	bl	3fa0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    710e:	9a01      	ldr	r2, [sp, #4]
    7110:	2301      	movs	r3, #1
    7112:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7118:	b003      	add	sp, #12
    711a:	f85d fb04 	ldr.w	pc, [sp], #4

0000711e <nrf_gpio_pin_clear>:
{
    711e:	b507      	push	{r0, r1, r2, lr}
    7120:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7122:	a801      	add	r0, sp, #4
    7124:	f7fc ff3c 	bl	3fa0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7128:	9a01      	ldr	r2, [sp, #4]
    712a:	2301      	movs	r3, #1
    712c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    712e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7132:	b003      	add	sp, #12
    7134:	f85d fb04 	ldr.w	pc, [sp], #4

00007138 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    7138:	1c43      	adds	r3, r0, #1
{
    713a:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    713c:	d009      	beq.n	7152 <spim_pin_uninit+0x1a>
    nrf_gpio_cfg(
    713e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7140:	a801      	add	r0, sp, #4
    7142:	f7fc ff2d 	bl	3fa0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7146:	9b01      	ldr	r3, [sp, #4]
    7148:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    714c:	2202      	movs	r2, #2
    714e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    7152:	b003      	add	sp, #12
    7154:	f85d fb04 	ldr.w	pc, [sp], #4

00007158 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    7158:	7f83      	ldrb	r3, [r0, #30]
    715a:	075a      	lsls	r2, r3, #29
    715c:	d40b      	bmi.n	7176 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    715e:	7fc0      	ldrb	r0, [r0, #31]
    7160:	28ff      	cmp	r0, #255	; 0xff
    7162:	d008      	beq.n	7176 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    7164:	079b      	lsls	r3, r3, #30
    7166:	bf58      	it	pl
    7168:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    716c:	b909      	cbnz	r1, 7172 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    716e:	f7ff bfd6 	b.w	711e <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7172:	f7ff bfc7 	b.w	7104 <nrf_gpio_pin_set>
}
    7176:	4770      	bx	lr

00007178 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    7178:	7b0a      	ldrb	r2, [r1, #12]
{
    717a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    717c:	2a03      	cmp	r2, #3
    717e:	d829      	bhi.n	71d4 <xfer_completeness_check+0x5c>
    7180:	e8df f002 	tbb	[pc, r2]
    7184:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7188:	688a      	ldr	r2, [r1, #8]
    718a:	0350      	lsls	r0, r2, #13
    718c:	d504      	bpl.n	7198 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    718e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    7192:	6908      	ldr	r0, [r1, #16]
    7194:	4290      	cmp	r0, r2
    7196:	d107      	bne.n	71a8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7198:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    719a:	0352      	lsls	r2, r2, #13
    719c:	d41a      	bmi.n	71d4 <xfer_completeness_check+0x5c>
    719e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    71a2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    71a4:	4291      	cmp	r1, r2
    71a6:	d015      	beq.n	71d4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    71a8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    71aa:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    71ac:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    71b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    71b4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    71b6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    71ba:	6908      	ldr	r0, [r1, #16]
    71bc:	4290      	cmp	r0, r2
    71be:	d1f3      	bne.n	71a8 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    71c0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    71c4:	e7ed      	b.n	71a2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    71c6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    71ca:	6909      	ldr	r1, [r1, #16]
    71cc:	e7ea      	b.n	71a4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    71ce:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    71d2:	e7fa      	b.n	71ca <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    71d4:	2001      	movs	r0, #1
}
    71d6:	4770      	bx	lr

000071d8 <nrf_gpio_pin_set>:
{
    71d8:	b507      	push	{r0, r1, r2, lr}
    71da:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71dc:	a801      	add	r0, sp, #4
    71de:	f7fd fbb3 	bl	4948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    71e2:	9a01      	ldr	r2, [sp, #4]
    71e4:	2301      	movs	r3, #1
    71e6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    71e8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    71ec:	b003      	add	sp, #12
    71ee:	f85d fb04 	ldr.w	pc, [sp], #4

000071f2 <z_device_state_init>:
}
    71f2:	4770      	bx	lr

000071f4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    71f4:	b138      	cbz	r0, 7206 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    71f6:	68c3      	ldr	r3, [r0, #12]
    71f8:	8818      	ldrh	r0, [r3, #0]
    71fa:	f3c0 0008 	ubfx	r0, r0, #0, #9
    71fe:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7202:	4258      	negs	r0, r3
    7204:	4158      	adcs	r0, r3
}
    7206:	4770      	bx	lr

00007208 <arch_system_halt>:
	__asm__ volatile(
    7208:	f04f 0220 	mov.w	r2, #32
    720c:	f3ef 8311 	mrs	r3, BASEPRI
    7210:	f382 8812 	msr	BASEPRI_MAX, r2
    7214:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    7218:	e7fe      	b.n	7218 <arch_system_halt+0x10>

0000721a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    721a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    721c:	f7ff fff4 	bl	7208 <arch_system_halt>

00007220 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7222:	4605      	mov	r5, r0
    7224:	460e      	mov	r6, r1
    7226:	f04f 0320 	mov.w	r3, #32
    722a:	f3ef 8711 	mrs	r7, BASEPRI
    722e:	f383 8812 	msr	BASEPRI_MAX, r3
    7232:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7236:	f7fe fadb 	bl	57f0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    723a:	4631      	mov	r1, r6
    723c:	4604      	mov	r4, r0
    723e:	4628      	mov	r0, r5
    7240:	f7ff ffeb 	bl	721a <k_sys_fatal_error_handler>
	__asm__ volatile(
    7244:	f387 8811 	msr	BASEPRI, r7
    7248:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    724c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    724e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7252:	f7fa bdc5 	b.w	1de0 <z_impl_k_thread_abort>

00007256 <z_early_memset>:
	(void) memset(dst, c, n);
    7256:	f7ff b8c2 	b.w	63de <memset>

0000725a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    725a:	f7ff b8b5 	b.w	63c8 <memcpy>

0000725e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    725e:	f3ef 8005 	mrs	r0, IPSR
}
    7262:	3800      	subs	r0, #0
    7264:	bf18      	it	ne
    7266:	2001      	movne	r0, #1
    7268:	4770      	bx	lr

0000726a <z_impl_k_thread_name_set>:
}
    726a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    726e:	4770      	bx	lr

00007270 <z_impl_k_thread_start>:
	z_sched_start(thread);
    7270:	f7fe b90a 	b.w	5488 <z_sched_start>

00007274 <z_pm_save_idle_exit>:
{
    7274:	b508      	push	{r3, lr}
	pm_system_resume();
    7276:	f7fa fa63 	bl	1740 <pm_system_resume>
}
    727a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    727e:	f7ff bdae 	b.w	6dde <sys_clock_idle_exit>

00007282 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7282:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7286:	428b      	cmp	r3, r1
    7288:	d001      	beq.n	728e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    728a:	f7fe b96d 	b.w	5568 <z_set_prio>
}
    728e:	2000      	movs	r0, #0
    7290:	4770      	bx	lr

00007292 <z_impl_k_mutex_init>:
{
    7292:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7294:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7296:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    729a:	e9c3 3300 	strd	r3, r3, [r3]
}
    729e:	4770      	bx	lr

000072a0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    72a0:	b13a      	cbz	r2, 72b2 <z_impl_k_sem_init+0x12>
    72a2:	428a      	cmp	r2, r1
    72a4:	d305      	bcc.n	72b2 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    72a6:	e9c0 1202 	strd	r1, r2, [r0, #8]
    72aa:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    72ae:	2000      	movs	r0, #0
    72b0:	4770      	bx	lr
		return -EINVAL;
    72b2:	f06f 0015 	mvn.w	r0, #21
}
    72b6:	4770      	bx	lr

000072b8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    72b8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    72ba:	2301      	movs	r3, #1
    72bc:	408b      	lsls	r3, r1
    72be:	ea22 0303 	bic.w	r3, r2, r3
    72c2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    72c4:	fa22 f001 	lsr.w	r0, r2, r1
}
    72c8:	f000 0001 	and.w	r0, r0, #1
    72cc:	4770      	bx	lr

000072ce <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    72ce:	b120      	cbz	r0, 72da <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    72d0:	2200      	movs	r2, #0
    72d2:	4611      	mov	r1, r2
    72d4:	3078      	adds	r0, #120	; 0x78
    72d6:	f000 b8ed 	b.w	74b4 <z_sched_wake>
}
    72da:	4770      	bx	lr

000072dc <z_work_submit_to_queue>:
{
    72dc:	b513      	push	{r0, r1, r4, lr}
    72de:	9001      	str	r0, [sp, #4]
    72e0:	4608      	mov	r0, r1
	__asm__ volatile(
    72e2:	f04f 0320 	mov.w	r3, #32
    72e6:	f3ef 8411 	mrs	r4, BASEPRI
    72ea:	f383 8812 	msr	BASEPRI_MAX, r3
    72ee:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    72f2:	a901      	add	r1, sp, #4
    72f4:	f7fd fefe 	bl	50f4 <submit_to_queue_locked>
	__asm__ volatile(
    72f8:	f384 8811 	msr	BASEPRI, r4
    72fc:	f3bf 8f6f 	isb	sy
}
    7300:	b002      	add	sp, #8
    7302:	bd10      	pop	{r4, pc}

00007304 <k_work_submit_to_queue>:
{
    7304:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    7306:	f7ff ffe9 	bl	72dc <z_work_submit_to_queue>
	if (ret > 0) {
    730a:	1e04      	subs	r4, r0, #0
    730c:	dd09      	ble.n	7322 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    730e:	f04f 0320 	mov.w	r3, #32
    7312:	f3ef 8011 	mrs	r0, BASEPRI
    7316:	f383 8812 	msr	BASEPRI_MAX, r3
    731a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    731e:	f000 f824 	bl	736a <z_reschedule_irqlock>
}
    7322:	4620      	mov	r0, r4
    7324:	bd10      	pop	{r4, pc}

00007326 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7326:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    732a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    732c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    732e:	2300      	movs	r3, #0
	node->prev = NULL;
    7330:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    7334:	4770      	bx	lr

00007336 <unpend_thread_no_timeout>:
{
    7336:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7338:	f7ff fff5 	bl	7326 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    733c:	7b43      	ldrb	r3, [r0, #13]
    733e:	f023 0302 	bic.w	r3, r3, #2
    7342:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7344:	2300      	movs	r3, #0
    7346:	6083      	str	r3, [r0, #8]
}
    7348:	bd08      	pop	{r3, pc}

0000734a <z_unpend_thread_no_timeout>:
{
    734a:	b508      	push	{r3, lr}
    734c:	f04f 0320 	mov.w	r3, #32
    7350:	f3ef 8111 	mrs	r1, BASEPRI
    7354:	f383 8812 	msr	BASEPRI_MAX, r3
    7358:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    735c:	f7ff ffeb 	bl	7336 <unpend_thread_no_timeout>
	__asm__ volatile(
    7360:	f381 8811 	msr	BASEPRI, r1
    7364:	f3bf 8f6f 	isb	sy
}
    7368:	bd08      	pop	{r3, pc}

0000736a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    736a:	4603      	mov	r3, r0
    736c:	b920      	cbnz	r0, 7378 <z_reschedule_irqlock+0xe>
    736e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7372:	b90a      	cbnz	r2, 7378 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7374:	f7fa bb7a 	b.w	1a6c <arch_swap>
    7378:	f383 8811 	msr	BASEPRI, r3
    737c:	f3bf 8f6f 	isb	sy
}
    7380:	4770      	bx	lr

00007382 <z_reschedule_unlocked>:
	__asm__ volatile(
    7382:	f04f 0320 	mov.w	r3, #32
    7386:	f3ef 8011 	mrs	r0, BASEPRI
    738a:	f383 8812 	msr	BASEPRI_MAX, r3
    738e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7392:	f7ff bfea 	b.w	736a <z_reschedule_irqlock>

00007396 <z_priq_dumb_best>:
{
    7396:	4603      	mov	r3, r0
	return list->head == list;
    7398:	6800      	ldr	r0, [r0, #0]
}
    739a:	4283      	cmp	r3, r0
    739c:	bf08      	it	eq
    739e:	2000      	moveq	r0, #0
    73a0:	4770      	bx	lr

000073a2 <z_ready_thread>:
{
    73a2:	b510      	push	{r4, lr}
    73a4:	f04f 0320 	mov.w	r3, #32
    73a8:	f3ef 8411 	mrs	r4, BASEPRI
    73ac:	f383 8812 	msr	BASEPRI_MAX, r3
    73b0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    73b4:	f7fe f832 	bl	541c <ready_thread>
	__asm__ volatile(
    73b8:	f384 8811 	msr	BASEPRI, r4
    73bc:	f3bf 8f6f 	isb	sy
}
    73c0:	bd10      	pop	{r4, pc}

000073c2 <z_thread_timeout>:
{
    73c2:	b510      	push	{r4, lr}
    73c4:	4601      	mov	r1, r0
	__asm__ volatile(
    73c6:	f04f 0320 	mov.w	r3, #32
    73ca:	f3ef 8411 	mrs	r4, BASEPRI
    73ce:	f383 8812 	msr	BASEPRI_MAX, r3
    73d2:	f3bf 8f6f 	isb	sy
		if (!killed) {
    73d6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    73da:	f013 0f28 	tst.w	r3, #40	; 0x28
    73de:	d10d      	bne.n	73fc <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    73e0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    73e4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    73e6:	b10b      	cbz	r3, 73ec <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    73e8:	f7ff ffa5 	bl	7336 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    73ec:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    73f0:	f023 0314 	bic.w	r3, r3, #20
    73f4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    73f8:	f7fe f810 	bl	541c <ready_thread>
	__asm__ volatile(
    73fc:	f384 8811 	msr	BASEPRI, r4
    7400:	f3bf 8f6f 	isb	sy
}
    7404:	bd10      	pop	{r4, pc}

00007406 <add_to_waitq_locked>:
{
    7406:	b538      	push	{r3, r4, r5, lr}
    7408:	4604      	mov	r4, r0
    740a:	460d      	mov	r5, r1
	unready_thread(thread);
    740c:	f7fe f85a 	bl	54c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7410:	7b63      	ldrb	r3, [r4, #13]
    7412:	f043 0302 	orr.w	r3, r3, #2
    7416:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7418:	b195      	cbz	r5, 7440 <add_to_waitq_locked+0x3a>
    741a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    741c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    741e:	429d      	cmp	r5, r3
    7420:	d015      	beq.n	744e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7422:	b1a3      	cbz	r3, 744e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    7424:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7428:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    742c:	4291      	cmp	r1, r2
    742e:	d008      	beq.n	7442 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    7430:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7432:	2a00      	cmp	r2, #0
    7434:	dd05      	ble.n	7442 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    7436:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7438:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    743c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    743e:	605c      	str	r4, [r3, #4]
}
    7440:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    7442:	686a      	ldr	r2, [r5, #4]
    7444:	4293      	cmp	r3, r2
    7446:	d002      	beq.n	744e <add_to_waitq_locked+0x48>
    7448:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    744a:	2b00      	cmp	r3, #0
    744c:	d1ec      	bne.n	7428 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    744e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7450:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7454:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7456:	606c      	str	r4, [r5, #4]
}
    7458:	e7f2      	b.n	7440 <add_to_waitq_locked+0x3a>

0000745a <z_unpend1_no_timeout>:
{
    745a:	b510      	push	{r4, lr}
	__asm__ volatile(
    745c:	f04f 0320 	mov.w	r3, #32
    7460:	f3ef 8411 	mrs	r4, BASEPRI
    7464:	f383 8812 	msr	BASEPRI_MAX, r3
    7468:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    746c:	f7ff ff93 	bl	7396 <z_priq_dumb_best>
		if (thread != NULL) {
    7470:	4601      	mov	r1, r0
    7472:	b108      	cbz	r0, 7478 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    7474:	f7ff ff5f 	bl	7336 <unpend_thread_no_timeout>
	__asm__ volatile(
    7478:	f384 8811 	msr	BASEPRI, r4
    747c:	f3bf 8f6f 	isb	sy
}
    7480:	4608      	mov	r0, r1
    7482:	bd10      	pop	{r4, pc}

00007484 <z_unpend_first_thread>:
{
    7484:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7486:	f04f 0320 	mov.w	r3, #32
    748a:	f3ef 8511 	mrs	r5, BASEPRI
    748e:	f383 8812 	msr	BASEPRI_MAX, r3
    7492:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7496:	f7ff ff7e 	bl	7396 <z_priq_dumb_best>
		if (thread != NULL) {
    749a:	4604      	mov	r4, r0
    749c:	b120      	cbz	r0, 74a8 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    749e:	f7ff ff4a 	bl	7336 <unpend_thread_no_timeout>
    74a2:	3018      	adds	r0, #24
    74a4:	f000 f823 	bl	74ee <z_abort_timeout>
	__asm__ volatile(
    74a8:	f385 8811 	msr	BASEPRI, r5
    74ac:	f3bf 8f6f 	isb	sy
}
    74b0:	4620      	mov	r0, r4
    74b2:	bd38      	pop	{r3, r4, r5, pc}

000074b4 <z_sched_wake>:
{
    74b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    74b6:	f04f 0320 	mov.w	r3, #32
    74ba:	f3ef 8511 	mrs	r5, BASEPRI
    74be:	f383 8812 	msr	BASEPRI_MAX, r3
    74c2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    74c6:	f7ff ff66 	bl	7396 <z_priq_dumb_best>
		if (thread != NULL) {
    74ca:	4604      	mov	r4, r0
    74cc:	b150      	cbz	r0, 74e4 <z_sched_wake+0x30>
    74ce:	66c1      	str	r1, [r0, #108]	; 0x6c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    74d0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    74d2:	f7ff ff30 	bl	7336 <unpend_thread_no_timeout>
    74d6:	3018      	adds	r0, #24
    74d8:	f000 f809 	bl	74ee <z_abort_timeout>
			ready_thread(thread);
    74dc:	4620      	mov	r0, r4
    74de:	f7fd ff9d 	bl	541c <ready_thread>
			ret = true;
    74e2:	2001      	movs	r0, #1
	__asm__ volatile(
    74e4:	f385 8811 	msr	BASEPRI, r5
    74e8:	f3bf 8f6f 	isb	sy
}
    74ec:	bd38      	pop	{r3, r4, r5, pc}

000074ee <z_abort_timeout>:
{
    74ee:	b510      	push	{r4, lr}
	__asm__ volatile(
    74f0:	f04f 0220 	mov.w	r2, #32
    74f4:	f3ef 8411 	mrs	r4, BASEPRI
    74f8:	f382 8812 	msr	BASEPRI_MAX, r2
    74fc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7500:	6803      	ldr	r3, [r0, #0]
    7502:	b13b      	cbz	r3, 7514 <z_abort_timeout+0x26>
			remove_timeout(to);
    7504:	f7fe fa36 	bl	5974 <remove_timeout>
			ret = 0;
    7508:	2000      	movs	r0, #0
	__asm__ volatile(
    750a:	f384 8811 	msr	BASEPRI, r4
    750e:	f3bf 8f6f 	isb	sy
}
    7512:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7514:	f06f 0015 	mvn.w	r0, #21
    7518:	e7f7      	b.n	750a <z_abort_timeout+0x1c>

0000751a <z_get_next_timeout_expiry>:
{
    751a:	b510      	push	{r4, lr}
	__asm__ volatile(
    751c:	f04f 0320 	mov.w	r3, #32
    7520:	f3ef 8411 	mrs	r4, BASEPRI
    7524:	f383 8812 	msr	BASEPRI_MAX, r3
    7528:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    752c:	f7fe f9fc 	bl	5928 <next_timeout>
	__asm__ volatile(
    7530:	f384 8811 	msr	BASEPRI, r4
    7534:	f3bf 8f6f 	isb	sy
}
    7538:	bd10      	pop	{r4, pc}

0000753a <z_set_timeout_expiry>:
{
    753a:	b570      	push	{r4, r5, r6, lr}
    753c:	4604      	mov	r4, r0
    753e:	460d      	mov	r5, r1
	__asm__ volatile(
    7540:	f04f 0320 	mov.w	r3, #32
    7544:	f3ef 8611 	mrs	r6, BASEPRI
    7548:	f383 8812 	msr	BASEPRI_MAX, r3
    754c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    7550:	f7fe f9ea 	bl	5928 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7554:	2801      	cmp	r0, #1
    7556:	dd05      	ble.n	7564 <z_set_timeout_expiry+0x2a>
    7558:	42a0      	cmp	r0, r4
    755a:	db03      	blt.n	7564 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    755c:	4629      	mov	r1, r5
    755e:	4620      	mov	r0, r4
    7560:	f7fb fffa 	bl	3558 <sys_clock_set_timeout>
	__asm__ volatile(
    7564:	f386 8811 	msr	BASEPRI, r6
    7568:	f3bf 8f6f 	isb	sy
}
    756c:	bd70      	pop	{r4, r5, r6, pc}

0000756e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    756e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7570:	f7fe faf0 	bl	5b54 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7574:	bd08      	pop	{r3, pc}

00007576 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7576:	f7fe baed 	b.w	5b54 <sys_clock_tick_get>

0000757a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    757a:	b108      	cbz	r0, 7580 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    757c:	f7fa bc9a 	b.w	1eb4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7580:	4770      	bx	lr

00007582 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7582:	b510      	push	{r4, lr}
    7584:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    7586:	f7ff ffb2 	bl	74ee <z_abort_timeout>

	if (inactive) {
    758a:	b9b0      	cbnz	r0, 75ba <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    758c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    758e:	b10b      	cbz	r3, 7594 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7590:	4620      	mov	r0, r4
    7592:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7594:	f104 0018 	add.w	r0, r4, #24
    7598:	f7ff ff5f 	bl	745a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    759c:	b168      	cbz	r0, 75ba <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    759e:	f7ff ff00 	bl	73a2 <z_ready_thread>
	__asm__ volatile(
    75a2:	f04f 0320 	mov.w	r3, #32
    75a6:	f3ef 8011 	mrs	r0, BASEPRI
    75aa:	f383 8812 	msr	BASEPRI_MAX, r3
    75ae:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    75b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    75b6:	f7ff bed8 	b.w	736a <z_reschedule_irqlock>
    75ba:	bd10      	pop	{r4, pc}
